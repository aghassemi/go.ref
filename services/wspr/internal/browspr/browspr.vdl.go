// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: browspr

package browspr

import (
	"fmt"
	"v.io/v23/vdl"
	"v.io/x/ref/services/identity"
	"v.io/x/ref/services/wspr/internal/account"
)

var _ = __VDLInit() // Must be first; see __VDLInit comments for details.

//////////////////////////////////////////////////
// Type definitions

type StartMessage struct {
	CleanupBlessings      bool
	Identityd             string
	IdentitydBlessingRoot identity.BlessingRootResponse
	Proxy                 string
	NamespaceRoot         string
	LogLevel              int32
	LogModule             string
}

func (StartMessage) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/wspr/internal/browspr.StartMessage"`
}) {
}

func (m *StartMessage) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}
	var4 := (m.CleanupBlessings == false)
	if var4 {
		if err := fieldsTarget1.ZeroField("CleanupBlessings"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("CleanupBlessings")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}
			if err := fieldTarget3.FromBool(bool(m.CleanupBlessings), tt.NonOptional().Field(0).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
				return err
			}
		}
	}
	var7 := (m.Identityd == "")
	if var7 {
		if err := fieldsTarget1.ZeroField("Identityd"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget5, fieldTarget6, err := fieldsTarget1.StartField("Identityd")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}
			if err := fieldTarget6.FromString(string(m.Identityd), tt.NonOptional().Field(1).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget5, fieldTarget6); err != nil {
				return err
			}
		}
	}
	var10 := true
	var var11 bool
	if len(m.IdentitydBlessingRoot.Names) == 0 {
		var11 = true
	}
	var10 = var10 && var11
	var12 := (m.IdentitydBlessingRoot.PublicKey == "")
	var10 = var10 && var12
	if var10 {
		if err := fieldsTarget1.ZeroField("IdentitydBlessingRoot"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget8, fieldTarget9, err := fieldsTarget1.StartField("IdentitydBlessingRoot")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}

			if err := m.IdentitydBlessingRoot.FillVDLTarget(fieldTarget9, tt.NonOptional().Field(2).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget8, fieldTarget9); err != nil {
				return err
			}
		}
	}
	var15 := (m.Proxy == "")
	if var15 {
		if err := fieldsTarget1.ZeroField("Proxy"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget13, fieldTarget14, err := fieldsTarget1.StartField("Proxy")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}
			if err := fieldTarget14.FromString(string(m.Proxy), tt.NonOptional().Field(3).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget13, fieldTarget14); err != nil {
				return err
			}
		}
	}
	var18 := (m.NamespaceRoot == "")
	if var18 {
		if err := fieldsTarget1.ZeroField("NamespaceRoot"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget16, fieldTarget17, err := fieldsTarget1.StartField("NamespaceRoot")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}
			if err := fieldTarget17.FromString(string(m.NamespaceRoot), tt.NonOptional().Field(4).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget16, fieldTarget17); err != nil {
				return err
			}
		}
	}
	var21 := (m.LogLevel == int32(0))
	if var21 {
		if err := fieldsTarget1.ZeroField("LogLevel"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget19, fieldTarget20, err := fieldsTarget1.StartField("LogLevel")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}
			if err := fieldTarget20.FromInt(int64(m.LogLevel), tt.NonOptional().Field(5).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget19, fieldTarget20); err != nil {
				return err
			}
		}
	}
	var24 := (m.LogModule == "")
	if var24 {
		if err := fieldsTarget1.ZeroField("LogModule"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget22, fieldTarget23, err := fieldsTarget1.StartField("LogModule")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}
			if err := fieldTarget23.FromString(string(m.LogModule), tt.NonOptional().Field(6).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget22, fieldTarget23); err != nil {
				return err
			}
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *StartMessage) MakeVDLTarget() vdl.Target {
	return &StartMessageTarget{Value: m}
}

type StartMessageTarget struct {
	Value                       *StartMessage
	cleanupBlessingsTarget      vdl.BoolTarget
	identitydTarget             vdl.StringTarget
	identitydBlessingRootTarget identity.BlessingRootResponseTarget
	proxyTarget                 vdl.StringTarget
	namespaceRootTarget         vdl.StringTarget
	logLevelTarget              vdl.Int32Target
	logModuleTarget             vdl.StringTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *StartMessageTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if ttWant := vdl.TypeOf((*StartMessage)(nil)).Elem(); !vdl.Compatible(tt, ttWant) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, ttWant)
	}
	return t, nil
}
func (t *StartMessageTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "CleanupBlessings":
		t.cleanupBlessingsTarget.Value = &t.Value.CleanupBlessings
		target, err := &t.cleanupBlessingsTarget, error(nil)
		return nil, target, err
	case "Identityd":
		t.identitydTarget.Value = &t.Value.Identityd
		target, err := &t.identitydTarget, error(nil)
		return nil, target, err
	case "IdentitydBlessingRoot":
		t.identitydBlessingRootTarget.Value = &t.Value.IdentitydBlessingRoot
		target, err := &t.identitydBlessingRootTarget, error(nil)
		return nil, target, err
	case "Proxy":
		t.proxyTarget.Value = &t.Value.Proxy
		target, err := &t.proxyTarget, error(nil)
		return nil, target, err
	case "NamespaceRoot":
		t.namespaceRootTarget.Value = &t.Value.NamespaceRoot
		target, err := &t.namespaceRootTarget, error(nil)
		return nil, target, err
	case "LogLevel":
		t.logLevelTarget.Value = &t.Value.LogLevel
		target, err := &t.logLevelTarget, error(nil)
		return nil, target, err
	case "LogModule":
		t.logModuleTarget.Value = &t.Value.LogModule
		target, err := &t.logModuleTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct v.io/x/ref/services/wspr/internal/browspr.StartMessage", name)
	}
}
func (t *StartMessageTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *StartMessageTarget) ZeroField(name string) error {
	switch name {
	case "CleanupBlessings":
		t.Value.CleanupBlessings = false
		return nil
	case "Identityd":
		t.Value.Identityd = ""
		return nil
	case "IdentitydBlessingRoot":
		t.Value.IdentitydBlessingRoot = identity.BlessingRootResponse{}
		return nil
	case "Proxy":
		t.Value.Proxy = ""
		return nil
	case "NamespaceRoot":
		t.Value.NamespaceRoot = ""
		return nil
	case "LogLevel":
		t.Value.LogLevel = int32(0)
		return nil
	case "LogModule":
		t.Value.LogModule = ""
		return nil
	default:
		return fmt.Errorf("field %s not in struct v.io/x/ref/services/wspr/internal/browspr.StartMessage", name)
	}
}
func (t *StartMessageTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type AssociateAccountMessage struct {
	Account string
	Origin  string
	Caveats []account.Caveat
}

func (AssociateAccountMessage) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/wspr/internal/browspr.AssociateAccountMessage"`
}) {
}

func (m *AssociateAccountMessage) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}
	var4 := (m.Account == "")
	if var4 {
		if err := fieldsTarget1.ZeroField("Account"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Account")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}
			if err := fieldTarget3.FromString(string(m.Account), tt.NonOptional().Field(0).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
				return err
			}
		}
	}
	var7 := (m.Origin == "")
	if var7 {
		if err := fieldsTarget1.ZeroField("Origin"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget5, fieldTarget6, err := fieldsTarget1.StartField("Origin")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}
			if err := fieldTarget6.FromString(string(m.Origin), tt.NonOptional().Field(1).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget5, fieldTarget6); err != nil {
				return err
			}
		}
	}
	var var10 bool
	if len(m.Caveats) == 0 {
		var10 = true
	}
	if var10 {
		if err := fieldsTarget1.ZeroField("Caveats"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget8, fieldTarget9, err := fieldsTarget1.StartField("Caveats")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}

			listTarget11, err := fieldTarget9.StartList(tt.NonOptional().Field(2).Type, len(m.Caveats))
			if err != nil {
				return err
			}
			for i, elem13 := range m.Caveats {
				elemTarget12, err := listTarget11.StartElem(i)
				if err != nil {
					return err
				}

				if err := elem13.FillVDLTarget(elemTarget12, tt.NonOptional().Field(2).Type.Elem()); err != nil {
					return err
				}
				if err := listTarget11.FinishElem(elemTarget12); err != nil {
					return err
				}
			}
			if err := fieldTarget9.FinishList(listTarget11); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget8, fieldTarget9); err != nil {
				return err
			}
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *AssociateAccountMessage) MakeVDLTarget() vdl.Target {
	return &AssociateAccountMessageTarget{Value: m}
}

type AssociateAccountMessageTarget struct {
	Value         *AssociateAccountMessage
	accountTarget vdl.StringTarget
	originTarget  vdl.StringTarget
	caveatsTarget __VDLTarget1_list
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *AssociateAccountMessageTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if ttWant := vdl.TypeOf((*AssociateAccountMessage)(nil)).Elem(); !vdl.Compatible(tt, ttWant) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, ttWant)
	}
	return t, nil
}
func (t *AssociateAccountMessageTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Account":
		t.accountTarget.Value = &t.Value.Account
		target, err := &t.accountTarget, error(nil)
		return nil, target, err
	case "Origin":
		t.originTarget.Value = &t.Value.Origin
		target, err := &t.originTarget, error(nil)
		return nil, target, err
	case "Caveats":
		t.caveatsTarget.Value = &t.Value.Caveats
		target, err := &t.caveatsTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct v.io/x/ref/services/wspr/internal/browspr.AssociateAccountMessage", name)
	}
}
func (t *AssociateAccountMessageTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *AssociateAccountMessageTarget) ZeroField(name string) error {
	switch name {
	case "Account":
		t.Value.Account = ""
		return nil
	case "Origin":
		t.Value.Origin = ""
		return nil
	case "Caveats":
		t.Value.Caveats = []account.Caveat(nil)
		return nil
	default:
		return fmt.Errorf("field %s not in struct v.io/x/ref/services/wspr/internal/browspr.AssociateAccountMessage", name)
	}
}
func (t *AssociateAccountMessageTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

// []account.Caveat
type __VDLTarget1_list struct {
	Value      *[]account.Caveat
	elemTarget account.CaveatTarget
	vdl.TargetBase
	vdl.ListTargetBase
}

func (t *__VDLTarget1_list) StartList(tt *vdl.Type, len int) (vdl.ListTarget, error) {

	if ttWant := vdl.TypeOf((*[]account.Caveat)(nil)); !vdl.Compatible(tt, ttWant) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, ttWant)
	}
	if cap(*t.Value) < len {
		*t.Value = make([]account.Caveat, len)
	} else {
		*t.Value = (*t.Value)[:len]
	}
	return t, nil
}
func (t *__VDLTarget1_list) StartElem(index int) (elem vdl.Target, _ error) {
	t.elemTarget.Value = &(*t.Value)[index]
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *__VDLTarget1_list) FinishElem(elem vdl.Target) error {
	return nil
}
func (t *__VDLTarget1_list) FinishList(elem vdl.ListTarget) error {

	return nil
}

type CreateAccountMessage struct {
	Token string
}

func (CreateAccountMessage) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/wspr/internal/browspr.CreateAccountMessage"`
}) {
}

func (m *CreateAccountMessage) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}
	var4 := (m.Token == "")
	if var4 {
		if err := fieldsTarget1.ZeroField("Token"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Token")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}
			if err := fieldTarget3.FromString(string(m.Token), tt.NonOptional().Field(0).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
				return err
			}
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *CreateAccountMessage) MakeVDLTarget() vdl.Target {
	return &CreateAccountMessageTarget{Value: m}
}

type CreateAccountMessageTarget struct {
	Value       *CreateAccountMessage
	tokenTarget vdl.StringTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *CreateAccountMessageTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if ttWant := vdl.TypeOf((*CreateAccountMessage)(nil)).Elem(); !vdl.Compatible(tt, ttWant) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, ttWant)
	}
	return t, nil
}
func (t *CreateAccountMessageTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Token":
		t.tokenTarget.Value = &t.Value.Token
		target, err := &t.tokenTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct v.io/x/ref/services/wspr/internal/browspr.CreateAccountMessage", name)
	}
}
func (t *CreateAccountMessageTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *CreateAccountMessageTarget) ZeroField(name string) error {
	switch name {
	case "Token":
		t.Value.Token = ""
		return nil
	default:
		return fmt.Errorf("field %s not in struct v.io/x/ref/services/wspr/internal/browspr.CreateAccountMessage", name)
	}
}
func (t *CreateAccountMessageTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type CleanupMessage struct {
	InstanceId int32
}

func (CleanupMessage) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/wspr/internal/browspr.CleanupMessage"`
}) {
}

func (m *CleanupMessage) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}
	var4 := (m.InstanceId == int32(0))
	if var4 {
		if err := fieldsTarget1.ZeroField("InstanceId"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("InstanceId")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}
			if err := fieldTarget3.FromInt(int64(m.InstanceId), tt.NonOptional().Field(0).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
				return err
			}
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *CleanupMessage) MakeVDLTarget() vdl.Target {
	return &CleanupMessageTarget{Value: m}
}

type CleanupMessageTarget struct {
	Value            *CleanupMessage
	instanceIdTarget vdl.Int32Target
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *CleanupMessageTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if ttWant := vdl.TypeOf((*CleanupMessage)(nil)).Elem(); !vdl.Compatible(tt, ttWant) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, ttWant)
	}
	return t, nil
}
func (t *CleanupMessageTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "InstanceId":
		t.instanceIdTarget.Value = &t.Value.InstanceId
		target, err := &t.instanceIdTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct v.io/x/ref/services/wspr/internal/browspr.CleanupMessage", name)
	}
}
func (t *CleanupMessageTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *CleanupMessageTarget) ZeroField(name string) error {
	switch name {
	case "InstanceId":
		t.Value.InstanceId = int32(0)
		return nil
	default:
		return fmt.Errorf("field %s not in struct v.io/x/ref/services/wspr/internal/browspr.CleanupMessage", name)
	}
}
func (t *CleanupMessageTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type OriginHasAccountMessage struct {
	Origin string
}

func (OriginHasAccountMessage) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/wspr/internal/browspr.OriginHasAccountMessage"`
}) {
}

func (m *OriginHasAccountMessage) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}
	var4 := (m.Origin == "")
	if var4 {
		if err := fieldsTarget1.ZeroField("Origin"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Origin")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}
			if err := fieldTarget3.FromString(string(m.Origin), tt.NonOptional().Field(0).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
				return err
			}
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *OriginHasAccountMessage) MakeVDLTarget() vdl.Target {
	return &OriginHasAccountMessageTarget{Value: m}
}

type OriginHasAccountMessageTarget struct {
	Value        *OriginHasAccountMessage
	originTarget vdl.StringTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *OriginHasAccountMessageTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if ttWant := vdl.TypeOf((*OriginHasAccountMessage)(nil)).Elem(); !vdl.Compatible(tt, ttWant) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, ttWant)
	}
	return t, nil
}
func (t *OriginHasAccountMessageTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Origin":
		t.originTarget.Value = &t.Value.Origin
		target, err := &t.originTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct v.io/x/ref/services/wspr/internal/browspr.OriginHasAccountMessage", name)
	}
}
func (t *OriginHasAccountMessageTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *OriginHasAccountMessageTarget) ZeroField(name string) error {
	switch name {
	case "Origin":
		t.Value.Origin = ""
		return nil
	default:
		return fmt.Errorf("field %s not in struct v.io/x/ref/services/wspr/internal/browspr.OriginHasAccountMessage", name)
	}
}
func (t *OriginHasAccountMessageTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type GetAccountsMessage struct {
}

func (GetAccountsMessage) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/wspr/internal/browspr.GetAccountsMessage"`
}) {
}

func (m *GetAccountsMessage) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *GetAccountsMessage) MakeVDLTarget() vdl.Target {
	return &GetAccountsMessageTarget{Value: m}
}

type GetAccountsMessageTarget struct {
	Value *GetAccountsMessage
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *GetAccountsMessageTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if ttWant := vdl.TypeOf((*GetAccountsMessage)(nil)).Elem(); !vdl.Compatible(tt, ttWant) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, ttWant)
	}
	return t, nil
}
func (t *GetAccountsMessageTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	default:
		return nil, nil, fmt.Errorf("field %s not in struct v.io/x/ref/services/wspr/internal/browspr.GetAccountsMessage", name)
	}
}
func (t *GetAccountsMessageTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *GetAccountsMessageTarget) ZeroField(name string) error {
	switch name {
	default:
		return fmt.Errorf("field %s not in struct v.io/x/ref/services/wspr/internal/browspr.GetAccountsMessage", name)
	}
}
func (t *GetAccountsMessageTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type CreateInstanceMessage struct {
	InstanceId     int32
	Origin         string
	NamespaceRoots []string
	Proxy          string
}

func (CreateInstanceMessage) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/wspr/internal/browspr.CreateInstanceMessage"`
}) {
}

func (m *CreateInstanceMessage) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}
	var4 := (m.InstanceId == int32(0))
	if var4 {
		if err := fieldsTarget1.ZeroField("InstanceId"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("InstanceId")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}
			if err := fieldTarget3.FromInt(int64(m.InstanceId), tt.NonOptional().Field(0).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
				return err
			}
		}
	}
	var7 := (m.Origin == "")
	if var7 {
		if err := fieldsTarget1.ZeroField("Origin"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget5, fieldTarget6, err := fieldsTarget1.StartField("Origin")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}
			if err := fieldTarget6.FromString(string(m.Origin), tt.NonOptional().Field(1).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget5, fieldTarget6); err != nil {
				return err
			}
		}
	}
	var var10 bool
	if len(m.NamespaceRoots) == 0 {
		var10 = true
	}
	if var10 {
		if err := fieldsTarget1.ZeroField("NamespaceRoots"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget8, fieldTarget9, err := fieldsTarget1.StartField("NamespaceRoots")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}

			listTarget11, err := fieldTarget9.StartList(tt.NonOptional().Field(2).Type, len(m.NamespaceRoots))
			if err != nil {
				return err
			}
			for i, elem13 := range m.NamespaceRoots {
				elemTarget12, err := listTarget11.StartElem(i)
				if err != nil {
					return err
				}
				if err := elemTarget12.FromString(string(elem13), tt.NonOptional().Field(2).Type.Elem()); err != nil {
					return err
				}
				if err := listTarget11.FinishElem(elemTarget12); err != nil {
					return err
				}
			}
			if err := fieldTarget9.FinishList(listTarget11); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget8, fieldTarget9); err != nil {
				return err
			}
		}
	}
	var16 := (m.Proxy == "")
	if var16 {
		if err := fieldsTarget1.ZeroField("Proxy"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget14, fieldTarget15, err := fieldsTarget1.StartField("Proxy")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}
			if err := fieldTarget15.FromString(string(m.Proxy), tt.NonOptional().Field(3).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget14, fieldTarget15); err != nil {
				return err
			}
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *CreateInstanceMessage) MakeVDLTarget() vdl.Target {
	return &CreateInstanceMessageTarget{Value: m}
}

type CreateInstanceMessageTarget struct {
	Value                *CreateInstanceMessage
	instanceIdTarget     vdl.Int32Target
	originTarget         vdl.StringTarget
	namespaceRootsTarget vdl.StringSliceTarget
	proxyTarget          vdl.StringTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *CreateInstanceMessageTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if ttWant := vdl.TypeOf((*CreateInstanceMessage)(nil)).Elem(); !vdl.Compatible(tt, ttWant) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, ttWant)
	}
	return t, nil
}
func (t *CreateInstanceMessageTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "InstanceId":
		t.instanceIdTarget.Value = &t.Value.InstanceId
		target, err := &t.instanceIdTarget, error(nil)
		return nil, target, err
	case "Origin":
		t.originTarget.Value = &t.Value.Origin
		target, err := &t.originTarget, error(nil)
		return nil, target, err
	case "NamespaceRoots":
		t.namespaceRootsTarget.Value = &t.Value.NamespaceRoots
		target, err := &t.namespaceRootsTarget, error(nil)
		return nil, target, err
	case "Proxy":
		t.proxyTarget.Value = &t.Value.Proxy
		target, err := &t.proxyTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct v.io/x/ref/services/wspr/internal/browspr.CreateInstanceMessage", name)
	}
}
func (t *CreateInstanceMessageTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *CreateInstanceMessageTarget) ZeroField(name string) error {
	switch name {
	case "InstanceId":
		t.Value.InstanceId = int32(0)
		return nil
	case "Origin":
		t.Value.Origin = ""
		return nil
	case "NamespaceRoots":
		t.Value.NamespaceRoots = []string(nil)
		return nil
	case "Proxy":
		t.Value.Proxy = ""
		return nil
	default:
		return fmt.Errorf("field %s not in struct v.io/x/ref/services/wspr/internal/browspr.CreateInstanceMessage", name)
	}
}
func (t *CreateInstanceMessageTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

var __VDLInitCalled bool

// __VDLInit performs vdl initialization.  It is safe to call multiple times.
// If you have an init ordering issue, just insert the following line verbatim
// into your source files in this package, right after the "package foo" clause:
//
//    var _ = __VDLInit()
//
// The purpose of this function is to ensure that vdl initialization occurs in
// the right order, and very early in the init sequence.  In particular, vdl
// registration and package variable initialization needs to occur before
// functions like vdl.TypeOf will work properly.
//
// This function returns a dummy value, so that it can be used to initialize the
// first var in the file, to take advantage of Go's defined init order.
func __VDLInit() struct{} {
	if __VDLInitCalled {
		return struct{}{}
	}
	__VDLInitCalled = true

	// Register types.
	vdl.Register((*StartMessage)(nil))
	vdl.Register((*AssociateAccountMessage)(nil))
	vdl.Register((*CreateAccountMessage)(nil))
	vdl.Register((*CleanupMessage)(nil))
	vdl.Register((*OriginHasAccountMessage)(nil))
	vdl.Register((*GetAccountsMessage)(nil))
	vdl.Register((*CreateInstanceMessage)(nil))

	return struct{}{}
}
