// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: browspr

package browspr

import (
	"fmt"
	"v.io/v23/vdl"
	"v.io/x/ref/services/identity"
	"v.io/x/ref/services/wspr/internal/account"
)

type StartMessage struct {
	CleanupBlessings      bool
	Identityd             string
	IdentitydBlessingRoot identity.BlessingRootResponse
	Proxy                 string
	NamespaceRoot         string
	LogLevel              int32
	LogModule             string
}

func (StartMessage) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/wspr/internal/browspr.StartMessage"`
}) {
}

func (m *StartMessage) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_x_ref_services_wspr_internal_browspr_StartMessage == nil || __VDLType0 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("CleanupBlessings")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromBool(bool(m.CleanupBlessings), vdl.BoolType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Identityd")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromString(string(m.Identityd), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("IdentitydBlessingRoot")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.IdentitydBlessingRoot.FillVDLTarget(fieldTarget7, __VDLType_v_io_x_ref_services_identity_BlessingRootResponse); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	keyTarget8, fieldTarget9, err := fieldsTarget1.StartField("Proxy")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget9.FromString(string(m.Proxy), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget8, fieldTarget9); err != nil {
			return err
		}
	}
	keyTarget10, fieldTarget11, err := fieldsTarget1.StartField("NamespaceRoot")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget11.FromString(string(m.NamespaceRoot), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget10, fieldTarget11); err != nil {
			return err
		}
	}
	keyTarget12, fieldTarget13, err := fieldsTarget1.StartField("LogLevel")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget13.FromInt(int64(m.LogLevel), vdl.Int32Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget12, fieldTarget13); err != nil {
			return err
		}
	}
	keyTarget14, fieldTarget15, err := fieldsTarget1.StartField("LogModule")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget15.FromString(string(m.LogModule), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget14, fieldTarget15); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *StartMessage) MakeVDLTarget() vdl.Target {
	return &StartMessageTarget{Value: m}
}

type StartMessageTarget struct {
	Value                       *StartMessage
	cleanupBlessingsTarget      vdl.BoolTarget
	identitydTarget             vdl.StringTarget
	identitydBlessingRootTarget identity.BlessingRootResponseTarget
	proxyTarget                 vdl.StringTarget
	namespaceRootTarget         vdl.StringTarget
	logLevelTarget              vdl.Int32Target
	logModuleTarget             vdl.StringTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *StartMessageTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_v_io_x_ref_services_wspr_internal_browspr_StartMessage) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_x_ref_services_wspr_internal_browspr_StartMessage)
	}
	return t, nil
}
func (t *StartMessageTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "CleanupBlessings":
		t.cleanupBlessingsTarget.Value = &t.Value.CleanupBlessings
		target, err := &t.cleanupBlessingsTarget, error(nil)
		return nil, target, err
	case "Identityd":
		t.identitydTarget.Value = &t.Value.Identityd
		target, err := &t.identitydTarget, error(nil)
		return nil, target, err
	case "IdentitydBlessingRoot":
		t.identitydBlessingRootTarget.Value = &t.Value.IdentitydBlessingRoot
		target, err := &t.identitydBlessingRootTarget, error(nil)
		return nil, target, err
	case "Proxy":
		t.proxyTarget.Value = &t.Value.Proxy
		target, err := &t.proxyTarget, error(nil)
		return nil, target, err
	case "NamespaceRoot":
		t.namespaceRootTarget.Value = &t.Value.NamespaceRoot
		target, err := &t.namespaceRootTarget, error(nil)
		return nil, target, err
	case "LogLevel":
		t.logLevelTarget.Value = &t.Value.LogLevel
		target, err := &t.logLevelTarget, error(nil)
		return nil, target, err
	case "LogModule":
		t.logModuleTarget.Value = &t.Value.LogModule
		target, err := &t.logModuleTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_x_ref_services_wspr_internal_browspr_StartMessage)
	}
}
func (t *StartMessageTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *StartMessageTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type AssociateAccountMessage struct {
	Account string
	Origin  string
	Caveats []account.Caveat
}

func (AssociateAccountMessage) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/wspr/internal/browspr.AssociateAccountMessage"`
}) {
}

func (m *AssociateAccountMessage) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_x_ref_services_wspr_internal_browspr_AssociateAccountMessage == nil || __VDLType1 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Account")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Account), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Origin")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromString(string(m.Origin), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Caveats")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		listTarget8, err := fieldTarget7.StartList(__VDLType2, len(m.Caveats))
		if err != nil {
			return err
		}
		for i, elem10 := range m.Caveats {
			elemTarget9, err := listTarget8.StartElem(i)
			if err != nil {
				return err
			}

			if err := elem10.FillVDLTarget(elemTarget9, __VDLType_v_io_x_ref_services_wspr_internal_account_Caveat); err != nil {
				return err
			}
			if err := listTarget8.FinishElem(elemTarget9); err != nil {
				return err
			}
		}
		if err := fieldTarget7.FinishList(listTarget8); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *AssociateAccountMessage) MakeVDLTarget() vdl.Target {
	return &AssociateAccountMessageTarget{Value: m}
}

type AssociateAccountMessageTarget struct {
	Value         *AssociateAccountMessage
	accountTarget vdl.StringTarget
	originTarget  vdl.StringTarget
	caveatsTarget unnamed_5b5d762e696f2f782f7265662f73657276696365732f777370722f696e7465726e616c2f6163636f756e742e436176656174207374727563747b5479706520737472696e673b4172677320737472696e677dTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *AssociateAccountMessageTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_v_io_x_ref_services_wspr_internal_browspr_AssociateAccountMessage) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_x_ref_services_wspr_internal_browspr_AssociateAccountMessage)
	}
	return t, nil
}
func (t *AssociateAccountMessageTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Account":
		t.accountTarget.Value = &t.Value.Account
		target, err := &t.accountTarget, error(nil)
		return nil, target, err
	case "Origin":
		t.originTarget.Value = &t.Value.Origin
		target, err := &t.originTarget, error(nil)
		return nil, target, err
	case "Caveats":
		t.caveatsTarget.Value = &t.Value.Caveats
		target, err := &t.caveatsTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_x_ref_services_wspr_internal_browspr_AssociateAccountMessage)
	}
}
func (t *AssociateAccountMessageTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *AssociateAccountMessageTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

// []account.Caveat
type unnamed_5b5d762e696f2f782f7265662f73657276696365732f777370722f696e7465726e616c2f6163636f756e742e436176656174207374727563747b5479706520737472696e673b4172677320737472696e677dTarget struct {
	Value      *[]account.Caveat
	elemTarget account.CaveatTarget
	vdl.TargetBase
	vdl.ListTargetBase
}

func (t *unnamed_5b5d762e696f2f782f7265662f73657276696365732f777370722f696e7465726e616c2f6163636f756e742e436176656174207374727563747b5479706520737472696e673b4172677320737472696e677dTarget) StartList(tt *vdl.Type, len int) (vdl.ListTarget, error) {
	if !vdl.Compatible(tt, __VDLType2) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType2)
	}
	if cap(*t.Value) < len {
		*t.Value = make([]account.Caveat, len)
	} else {
		*t.Value = (*t.Value)[:len]
	}
	return t, nil
}
func (t *unnamed_5b5d762e696f2f782f7265662f73657276696365732f777370722f696e7465726e616c2f6163636f756e742e436176656174207374727563747b5479706520737472696e673b4172677320737472696e677dTarget) StartElem(index int) (elem vdl.Target, _ error) {
	t.elemTarget.Value = &(*t.Value)[index]
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_5b5d762e696f2f782f7265662f73657276696365732f777370722f696e7465726e616c2f6163636f756e742e436176656174207374727563747b5479706520737472696e673b4172677320737472696e677dTarget) FinishElem(elem vdl.Target) error {
	return nil
}
func (t *unnamed_5b5d762e696f2f782f7265662f73657276696365732f777370722f696e7465726e616c2f6163636f756e742e436176656174207374727563747b5479706520737472696e673b4172677320737472696e677dTarget) FinishList(elem vdl.ListTarget) error {

	return nil
}

type CreateAccountMessage struct {
	Token string
}

func (CreateAccountMessage) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/wspr/internal/browspr.CreateAccountMessage"`
}) {
}

func (m *CreateAccountMessage) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_x_ref_services_wspr_internal_browspr_CreateAccountMessage == nil || __VDLType3 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Token")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Token), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *CreateAccountMessage) MakeVDLTarget() vdl.Target {
	return &CreateAccountMessageTarget{Value: m}
}

type CreateAccountMessageTarget struct {
	Value       *CreateAccountMessage
	tokenTarget vdl.StringTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *CreateAccountMessageTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_v_io_x_ref_services_wspr_internal_browspr_CreateAccountMessage) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_x_ref_services_wspr_internal_browspr_CreateAccountMessage)
	}
	return t, nil
}
func (t *CreateAccountMessageTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Token":
		t.tokenTarget.Value = &t.Value.Token
		target, err := &t.tokenTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_x_ref_services_wspr_internal_browspr_CreateAccountMessage)
	}
}
func (t *CreateAccountMessageTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *CreateAccountMessageTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type CleanupMessage struct {
	InstanceId int32
}

func (CleanupMessage) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/wspr/internal/browspr.CleanupMessage"`
}) {
}

func (m *CleanupMessage) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_x_ref_services_wspr_internal_browspr_CleanupMessage == nil || __VDLType4 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("InstanceId")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromInt(int64(m.InstanceId), vdl.Int32Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *CleanupMessage) MakeVDLTarget() vdl.Target {
	return &CleanupMessageTarget{Value: m}
}

type CleanupMessageTarget struct {
	Value            *CleanupMessage
	instanceIdTarget vdl.Int32Target
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *CleanupMessageTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_v_io_x_ref_services_wspr_internal_browspr_CleanupMessage) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_x_ref_services_wspr_internal_browspr_CleanupMessage)
	}
	return t, nil
}
func (t *CleanupMessageTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "InstanceId":
		t.instanceIdTarget.Value = &t.Value.InstanceId
		target, err := &t.instanceIdTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_x_ref_services_wspr_internal_browspr_CleanupMessage)
	}
}
func (t *CleanupMessageTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *CleanupMessageTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type OriginHasAccountMessage struct {
	Origin string
}

func (OriginHasAccountMessage) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/wspr/internal/browspr.OriginHasAccountMessage"`
}) {
}

func (m *OriginHasAccountMessage) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_x_ref_services_wspr_internal_browspr_OriginHasAccountMessage == nil || __VDLType5 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Origin")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Origin), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *OriginHasAccountMessage) MakeVDLTarget() vdl.Target {
	return &OriginHasAccountMessageTarget{Value: m}
}

type OriginHasAccountMessageTarget struct {
	Value        *OriginHasAccountMessage
	originTarget vdl.StringTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *OriginHasAccountMessageTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_v_io_x_ref_services_wspr_internal_browspr_OriginHasAccountMessage) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_x_ref_services_wspr_internal_browspr_OriginHasAccountMessage)
	}
	return t, nil
}
func (t *OriginHasAccountMessageTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Origin":
		t.originTarget.Value = &t.Value.Origin
		target, err := &t.originTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_x_ref_services_wspr_internal_browspr_OriginHasAccountMessage)
	}
}
func (t *OriginHasAccountMessageTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *OriginHasAccountMessageTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type GetAccountsMessage struct {
}

func (GetAccountsMessage) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/wspr/internal/browspr.GetAccountsMessage"`
}) {
}

func (m *GetAccountsMessage) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_x_ref_services_wspr_internal_browspr_GetAccountsMessage == nil || __VDLType6 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *GetAccountsMessage) MakeVDLTarget() vdl.Target {
	return &GetAccountsMessageTarget{Value: m}
}

type GetAccountsMessageTarget struct {
	Value *GetAccountsMessage
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *GetAccountsMessageTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_v_io_x_ref_services_wspr_internal_browspr_GetAccountsMessage) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_x_ref_services_wspr_internal_browspr_GetAccountsMessage)
	}
	return t, nil
}
func (t *GetAccountsMessageTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_x_ref_services_wspr_internal_browspr_GetAccountsMessage)
	}
}
func (t *GetAccountsMessageTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *GetAccountsMessageTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type CreateInstanceMessage struct {
	InstanceId     int32
	Origin         string
	NamespaceRoots []string
	Proxy          string
}

func (CreateInstanceMessage) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/wspr/internal/browspr.CreateInstanceMessage"`
}) {
}

func (m *CreateInstanceMessage) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_x_ref_services_wspr_internal_browspr_CreateInstanceMessage == nil || __VDLType7 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("InstanceId")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromInt(int64(m.InstanceId), vdl.Int32Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Origin")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromString(string(m.Origin), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("NamespaceRoots")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		listTarget8, err := fieldTarget7.StartList(__VDLType8, len(m.NamespaceRoots))
		if err != nil {
			return err
		}
		for i, elem10 := range m.NamespaceRoots {
			elemTarget9, err := listTarget8.StartElem(i)
			if err != nil {
				return err
			}
			if err := elemTarget9.FromString(string(elem10), vdl.StringType); err != nil {
				return err
			}
			if err := listTarget8.FinishElem(elemTarget9); err != nil {
				return err
			}
		}
		if err := fieldTarget7.FinishList(listTarget8); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	keyTarget11, fieldTarget12, err := fieldsTarget1.StartField("Proxy")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget12.FromString(string(m.Proxy), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget11, fieldTarget12); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *CreateInstanceMessage) MakeVDLTarget() vdl.Target {
	return &CreateInstanceMessageTarget{Value: m}
}

type CreateInstanceMessageTarget struct {
	Value                *CreateInstanceMessage
	instanceIdTarget     vdl.Int32Target
	originTarget         vdl.StringTarget
	namespaceRootsTarget vdl.StringSliceTarget
	proxyTarget          vdl.StringTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *CreateInstanceMessageTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_v_io_x_ref_services_wspr_internal_browspr_CreateInstanceMessage) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_x_ref_services_wspr_internal_browspr_CreateInstanceMessage)
	}
	return t, nil
}
func (t *CreateInstanceMessageTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "InstanceId":
		t.instanceIdTarget.Value = &t.Value.InstanceId
		target, err := &t.instanceIdTarget, error(nil)
		return nil, target, err
	case "Origin":
		t.originTarget.Value = &t.Value.Origin
		target, err := &t.originTarget, error(nil)
		return nil, target, err
	case "NamespaceRoots":
		t.namespaceRootsTarget.Value = &t.Value.NamespaceRoots
		target, err := &t.namespaceRootsTarget, error(nil)
		return nil, target, err
	case "Proxy":
		t.proxyTarget.Value = &t.Value.Proxy
		target, err := &t.proxyTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_x_ref_services_wspr_internal_browspr_CreateInstanceMessage)
	}
}
func (t *CreateInstanceMessageTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *CreateInstanceMessageTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

func init() {
	vdl.Register((*StartMessage)(nil))
	vdl.Register((*AssociateAccountMessage)(nil))
	vdl.Register((*CreateAccountMessage)(nil))
	vdl.Register((*CleanupMessage)(nil))
	vdl.Register((*OriginHasAccountMessage)(nil))
	vdl.Register((*GetAccountsMessage)(nil))
	vdl.Register((*CreateInstanceMessage)(nil))
}

var __VDLType1 *vdl.Type = vdl.TypeOf((*AssociateAccountMessage)(nil))
var __VDLType4 *vdl.Type = vdl.TypeOf((*CleanupMessage)(nil))
var __VDLType3 *vdl.Type = vdl.TypeOf((*CreateAccountMessage)(nil))
var __VDLType7 *vdl.Type = vdl.TypeOf((*CreateInstanceMessage)(nil))
var __VDLType6 *vdl.Type = vdl.TypeOf((*GetAccountsMessage)(nil))
var __VDLType5 *vdl.Type = vdl.TypeOf((*OriginHasAccountMessage)(nil))
var __VDLType0 *vdl.Type = vdl.TypeOf((*StartMessage)(nil))
var __VDLType8 *vdl.Type = vdl.TypeOf([]string(nil))
var __VDLType2 *vdl.Type = vdl.TypeOf([]account.Caveat(nil))
var __VDLType_v_io_x_ref_services_identity_BlessingRootResponse *vdl.Type = vdl.TypeOf(identity.BlessingRootResponse{})
var __VDLType_v_io_x_ref_services_wspr_internal_account_Caveat *vdl.Type = vdl.TypeOf(account.Caveat{})
var __VDLType_v_io_x_ref_services_wspr_internal_browspr_AssociateAccountMessage *vdl.Type = vdl.TypeOf(AssociateAccountMessage{})
var __VDLType_v_io_x_ref_services_wspr_internal_browspr_CleanupMessage *vdl.Type = vdl.TypeOf(CleanupMessage{})
var __VDLType_v_io_x_ref_services_wspr_internal_browspr_CreateAccountMessage *vdl.Type = vdl.TypeOf(CreateAccountMessage{})
var __VDLType_v_io_x_ref_services_wspr_internal_browspr_CreateInstanceMessage *vdl.Type = vdl.TypeOf(CreateInstanceMessage{})
var __VDLType_v_io_x_ref_services_wspr_internal_browspr_GetAccountsMessage *vdl.Type = vdl.TypeOf(GetAccountsMessage{})
var __VDLType_v_io_x_ref_services_wspr_internal_browspr_OriginHasAccountMessage *vdl.Type = vdl.TypeOf(OriginHasAccountMessage{})
var __VDLType_v_io_x_ref_services_wspr_internal_browspr_StartMessage *vdl.Type = vdl.TypeOf(StartMessage{})

func __VDLEnsureNativeBuilt() {
}
