// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: server

package server

import (
	"fmt"
	"v.io/v23/security/access"
	"v.io/v23/vdl"
)

// ServiceData represents the persistent state of a Service.
type ServiceData struct {
	Version uint64 // covers the fields below
	Perms   access.Permissions
}

func (ServiceData) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/syncbase/server.ServiceData"`
}) {
}

func (m *ServiceData) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_x_ref_services_syncbase_server_ServiceData == nil || __VDLType0 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Version")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromUint(uint64(m.Version), vdl.Uint64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Perms")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Perms.FillVDLTarget(fieldTarget5, __VDLType_v_io_v23_security_access_Permissions); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *ServiceData) MakeVDLTarget() vdl.Target {
	return &ServiceDataTarget{Value: m}
}

type ServiceDataTarget struct {
	Value *ServiceData
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *ServiceDataTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_v_io_x_ref_services_syncbase_server_ServiceData) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_x_ref_services_syncbase_server_ServiceData)
	}
	return t, nil
}
func (t *ServiceDataTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Version":
		val, err := &vdl.Uint64Target{Value: &t.Value.Version}, error(nil)
		return nil, val, err
	case "Perms":
		val, err := &access.PermissionsTarget{Value: &t.Value.Perms}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_x_ref_services_syncbase_server_ServiceData)
	}
}
func (t *ServiceDataTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *ServiceDataTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

// AppData represents the persistent state of an App.
type AppData struct {
	Name    string
	Version uint64 // covers the fields below
	Perms   access.Permissions
}

func (AppData) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/syncbase/server.AppData"`
}) {
}

func (m *AppData) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_x_ref_services_syncbase_server_AppData == nil || __VDLType1 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Name")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Name), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Version")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromUint(uint64(m.Version), vdl.Uint64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Perms")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Perms.FillVDLTarget(fieldTarget7, __VDLType_v_io_v23_security_access_Permissions); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *AppData) MakeVDLTarget() vdl.Target {
	return &AppDataTarget{Value: m}
}

type AppDataTarget struct {
	Value *AppData
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *AppDataTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_v_io_x_ref_services_syncbase_server_AppData) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_x_ref_services_syncbase_server_AppData)
	}
	return t, nil
}
func (t *AppDataTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Name":
		val, err := &vdl.StringTarget{Value: &t.Value.Name}, error(nil)
		return nil, val, err
	case "Version":
		val, err := &vdl.Uint64Target{Value: &t.Value.Version}, error(nil)
		return nil, val, err
	case "Perms":
		val, err := &access.PermissionsTarget{Value: &t.Value.Perms}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_x_ref_services_syncbase_server_AppData)
	}
}
func (t *AppDataTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *AppDataTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

// DbInfo contains information about one database for an App.
// TODO(sadovsky): Track NoSQL vs. SQL.
type DbInfo struct {
	Name string
	// Select fields from nosql.DatabaseOptions, needed in order to open storage
	// engine on restart.
	RootDir string // interpreted by storage engine
	Engine  string // name of storage engine, e.g. "leveldb"
}

func (DbInfo) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/syncbase/server.DbInfo"`
}) {
}

func (m *DbInfo) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_x_ref_services_syncbase_server_DbInfo == nil || __VDLType2 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Name")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Name), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("RootDir")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromString(string(m.RootDir), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Engine")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget7.FromString(string(m.Engine), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *DbInfo) MakeVDLTarget() vdl.Target {
	return &DbInfoTarget{Value: m}
}

type DbInfoTarget struct {
	Value *DbInfo
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *DbInfoTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_v_io_x_ref_services_syncbase_server_DbInfo) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_x_ref_services_syncbase_server_DbInfo)
	}
	return t, nil
}
func (t *DbInfoTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Name":
		val, err := &vdl.StringTarget{Value: &t.Value.Name}, error(nil)
		return nil, val, err
	case "RootDir":
		val, err := &vdl.StringTarget{Value: &t.Value.RootDir}, error(nil)
		return nil, val, err
	case "Engine":
		val, err := &vdl.StringTarget{Value: &t.Value.Engine}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_x_ref_services_syncbase_server_DbInfo)
	}
}
func (t *DbInfoTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *DbInfoTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

func init() {
	vdl.Register((*ServiceData)(nil))
	vdl.Register((*AppData)(nil))
	vdl.Register((*DbInfo)(nil))
}

var __VDLType1 *vdl.Type = vdl.TypeOf((*AppData)(nil))
var __VDLType2 *vdl.Type = vdl.TypeOf((*DbInfo)(nil))
var __VDLType0 *vdl.Type = vdl.TypeOf((*ServiceData)(nil))
var __VDLType_v_io_v23_security_access_Permissions *vdl.Type = vdl.TypeOf(access.Permissions(nil))
var __VDLType_v_io_x_ref_services_syncbase_server_AppData *vdl.Type = vdl.TypeOf(AppData{})
var __VDLType_v_io_x_ref_services_syncbase_server_DbInfo *vdl.Type = vdl.TypeOf(DbInfo{})
var __VDLType_v_io_x_ref_services_syncbase_server_ServiceData *vdl.Type = vdl.TypeOf(ServiceData{})

func __VDLEnsureNativeBuilt() {
}
