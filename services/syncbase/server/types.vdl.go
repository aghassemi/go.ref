// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Source: types.vdl

package server

import (
	// VDL system imports
	"v.io/v23/vdl"

	// VDL user imports
	"v.io/v23/security/access"
)

// ServiceData represents the persistent state of a Service.
type ServiceData struct {
	Version uint64 // covers the fields below
	Perms   access.Permissions
}

func (ServiceData) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/syncbase/server.ServiceData"`
}) {
}

func (m *ServiceData) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_types_v_io_x_ref_services_syncbase_server_ServiceData == nil || __VDLTypetypes0 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	var2 := (m.Version == uint64(0))
	if !var2 {
		keyTarget3, fieldTarget4, err := fieldsTarget1.StartField("Version")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {
			if err := fieldTarget4.FromUint(uint64(m.Version), vdl.Uint64Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget3, fieldTarget4); err != nil {
				return err
			}
		}
	}
	var var5 bool
	if len(m.Perms) == 0 {
		var5 = true
	}
	if !var5 {
		keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Perms")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {

			if err := m.Perms.FillVDLTarget(fieldTarget7, __VDLType_types_v_io_v23_security_access_Permissions); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
				return err
			}
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *ServiceData) MakeVDLTarget() vdl.Target {
	return nil
}

func (m *ServiceData) IsZero() bool {

	var1 := true
	var2 := (m.Version == uint64(0))
	var1 = var1 && var2
	var var3 bool
	if len(m.Perms) == 0 {
		var3 = true
	}
	var1 = var1 && var3
	return var1
}

// AppData represents the persistent state of an App.
type AppData struct {
	Name    string
	Version uint64 // covers the fields below
	Perms   access.Permissions
}

func (AppData) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/syncbase/server.AppData"`
}) {
}

func (m *AppData) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_types_v_io_x_ref_services_syncbase_server_AppData == nil || __VDLTypetypes1 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	var2 := (m.Name == "")
	if !var2 {
		keyTarget3, fieldTarget4, err := fieldsTarget1.StartField("Name")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {
			if err := fieldTarget4.FromString(string(m.Name), vdl.StringType); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget3, fieldTarget4); err != nil {
				return err
			}
		}
	}
	var5 := (m.Version == uint64(0))
	if !var5 {
		keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Version")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {
			if err := fieldTarget7.FromUint(uint64(m.Version), vdl.Uint64Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
				return err
			}
		}
	}
	var var8 bool
	if len(m.Perms) == 0 {
		var8 = true
	}
	if !var8 {
		keyTarget9, fieldTarget10, err := fieldsTarget1.StartField("Perms")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {

			if err := m.Perms.FillVDLTarget(fieldTarget10, __VDLType_types_v_io_v23_security_access_Permissions); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget9, fieldTarget10); err != nil {
				return err
			}
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *AppData) MakeVDLTarget() vdl.Target {
	return nil
}

func (m *AppData) IsZero() bool {

	var1 := true
	var2 := (m.Name == "")
	var1 = var1 && var2
	var3 := (m.Version == uint64(0))
	var1 = var1 && var3
	var var4 bool
	if len(m.Perms) == 0 {
		var4 = true
	}
	var1 = var1 && var4
	return var1
}

// DbInfo contains information about one database for an App.
// TODO(sadovsky): Track NoSQL vs. SQL.
type DbInfo struct {
	Name string
	// Select fields from nosql.DatabaseOptions, needed in order to open storage
	// engine on restart.
	RootDir string // interpreted by storage engine
	Engine  string // name of storage engine, e.g. "leveldb"
}

func (DbInfo) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/syncbase/server.DbInfo"`
}) {
}

func (m *DbInfo) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_types_v_io_x_ref_services_syncbase_server_DbInfo == nil || __VDLTypetypes2 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	var2 := (m.Name == "")
	if !var2 {
		keyTarget3, fieldTarget4, err := fieldsTarget1.StartField("Name")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {
			if err := fieldTarget4.FromString(string(m.Name), vdl.StringType); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget3, fieldTarget4); err != nil {
				return err
			}
		}
	}
	var5 := (m.RootDir == "")
	if !var5 {
		keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("RootDir")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {
			if err := fieldTarget7.FromString(string(m.RootDir), vdl.StringType); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
				return err
			}
		}
	}
	var8 := (m.Engine == "")
	if !var8 {
		keyTarget9, fieldTarget10, err := fieldsTarget1.StartField("Engine")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {
			if err := fieldTarget10.FromString(string(m.Engine), vdl.StringType); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget9, fieldTarget10); err != nil {
				return err
			}
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *DbInfo) MakeVDLTarget() vdl.Target {
	return nil
}

func (m *DbInfo) IsZero() bool {

	var1 := (*m == DbInfo{})
	return var1
}

func init() {
	vdl.Register((*ServiceData)(nil))
	vdl.Register((*AppData)(nil))
	vdl.Register((*DbInfo)(nil))
}

var __VDLTypetypes1 *vdl.Type = vdl.TypeOf((*AppData)(nil))
var __VDLTypetypes2 *vdl.Type = vdl.TypeOf((*DbInfo)(nil))
var __VDLTypetypes0 *vdl.Type = vdl.TypeOf((*ServiceData)(nil))
var __VDLType_types_v_io_v23_security_access_Permissions *vdl.Type = vdl.TypeOf(access.Permissions(nil))
var __VDLType_types_v_io_x_ref_services_syncbase_server_AppData *vdl.Type = vdl.TypeOf(AppData{})
var __VDLType_types_v_io_x_ref_services_syncbase_server_DbInfo *vdl.Type = vdl.TypeOf(DbInfo{})
var __VDLType_types_v_io_x_ref_services_syncbase_server_ServiceData *vdl.Type = vdl.TypeOf(ServiceData{})

func __VDLEnsureNativeBuilt_types() {
}
