// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Source: types.vdl

package vsync

import (
	// VDL system imports
	"v.io/v23/vdl"

	// VDL user imports
	"v.io/syncbase/v23/services/syncbase/nosql"
)

// syncData represents the persistent state of the sync module.
type syncData struct {
	Id int64
}

func (syncData) __VDLReflect(struct {
	Name string `vdl:"v.io/syncbase/x/ref/services/syncbase/vsync.syncData"`
}) {
}

// GroupId is a globally unique SyncGroup ID.
type GroupId uint64

func (GroupId) __VDLReflect(struct {
	Name string `vdl:"v.io/syncbase/x/ref/services/syncbase/vsync.GroupId"`
}) {
}

// SyncGroup contains the state of a SyncGroup object.
type SyncGroup struct {
	Id      GroupId                              // globally unique identifier generated by Syncbase
	Name    string                               // globally unique Vanadium name chosen by app
	Version string                               // "etag" for concurrency control
	Spec    nosql.SyncGroupSpec                  // app-given specification
	Joiners map[string]nosql.SyncGroupMemberInfo // map of joiners to their metadata
}

func (SyncGroup) __VDLReflect(struct {
	Name string `vdl:"v.io/syncbase/x/ref/services/syncbase/vsync.SyncGroup"`
}) {
}

func init() {
	vdl.Register((*syncData)(nil))
	vdl.Register((*GroupId)(nil))
	vdl.Register((*SyncGroup)(nil))
}

const NoGroupId = GroupId(0)
