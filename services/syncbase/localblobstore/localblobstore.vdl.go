// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: localblobstore

package localblobstore

import (
	"fmt"
	"time"
	"v.io/v23/vdl"
	time_2 "v.io/v23/vdlroot/time"
	"v.io/x/ref/services/syncbase/server/interfaces"
)

var _ = __VDLInit() // Must be first; see __VDLInit comments for details.

//////////////////////////////////////////////////
// Type definitions

// A BlobMetadata describes information that syncbase stores for a blob it
// holds, independent of the actual content.  Compare with a Signpost, which
// may be stored for a blob that the current device does not hold (and
// indicates where it may be found).  (See
// v.io/x/ref/services/syncbase/server/interfaces/sync_types.vdl for the
// Signpost definition.)
type BlobMetadata struct {
	OwnerShares interfaces.BlobSharesBySyncgroup // >0 for any group => syncbase must keep blob.
	Referenced  time.Time                        // When structured-store reference to blob last seen.
	Accessed    time.Time                        // Last attempted access.
}

func (BlobMetadata) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/syncbase/localblobstore.BlobMetadata"`
}) {
}

func (m *BlobMetadata) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("OwnerShares")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		var var4 bool
		if len(m.OwnerShares) == 0 {
			var4 = true
		}
		if var4 {
			if err := fieldTarget3.FromZero(tt.NonOptional().Field(0).Type); err != nil {
				return err
			}
		} else {

			if err := m.OwnerShares.FillVDLTarget(fieldTarget3, tt.NonOptional().Field(0).Type); err != nil {
				return err
			}
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	var wireValue5 time_2.Time
	if err := time_2.TimeFromNative(&wireValue5, m.Referenced); err != nil {
		return err
	}

	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Referenced")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		var8 := (wireValue5 == time_2.Time{})
		if var8 {
			if err := fieldTarget7.FromZero(tt.NonOptional().Field(1).Type); err != nil {
				return err
			}
		} else {

			if err := wireValue5.FillVDLTarget(fieldTarget7, tt.NonOptional().Field(1).Type); err != nil {
				return err
			}
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	var wireValue9 time_2.Time
	if err := time_2.TimeFromNative(&wireValue9, m.Accessed); err != nil {
		return err
	}

	keyTarget10, fieldTarget11, err := fieldsTarget1.StartField("Accessed")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		var12 := (wireValue9 == time_2.Time{})
		if var12 {
			if err := fieldTarget11.FromZero(tt.NonOptional().Field(2).Type); err != nil {
				return err
			}
		} else {

			if err := wireValue9.FillVDLTarget(fieldTarget11, tt.NonOptional().Field(2).Type); err != nil {
				return err
			}
		}
		if err := fieldsTarget1.FinishField(keyTarget10, fieldTarget11); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *BlobMetadata) MakeVDLTarget() vdl.Target {
	return &BlobMetadataTarget{Value: m}
}

type BlobMetadataTarget struct {
	Value             *BlobMetadata
	ownerSharesTarget interfaces.BlobSharesBySyncgroupTarget
	referencedTarget  time_2.TimeTarget
	accessedTarget    time_2.TimeTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *BlobMetadataTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if ttWant := vdl.TypeOf((*BlobMetadata)(nil)).Elem(); !vdl.Compatible(tt, ttWant) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, ttWant)
	}
	return t, nil
}
func (t *BlobMetadataTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "OwnerShares":
		t.ownerSharesTarget.Value = &t.Value.OwnerShares
		target, err := &t.ownerSharesTarget, error(nil)
		return nil, target, err
	case "Referenced":
		t.referencedTarget.Value = &t.Value.Referenced
		target, err := &t.referencedTarget, error(nil)
		return nil, target, err
	case "Accessed":
		t.accessedTarget.Value = &t.Value.Accessed
		target, err := &t.accessedTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct v.io/x/ref/services/syncbase/localblobstore.BlobMetadata", name)
	}
}
func (t *BlobMetadataTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *BlobMetadataTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}
func (t *BlobMetadataTarget) FromZero(tt *vdl.Type) error {
	*t.Value = BlobMetadata{}
	return nil
}

// A PerSyncgroup is blob-related data stored per syncgroup.
// It includes information that helps syncgroup members decide whether
// a peer makes a better or worse owner of a blob.
type PerSyncgroup struct {
	Priority interfaces.SgPriority
}

func (PerSyncgroup) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/syncbase/localblobstore.PerSyncgroup"`
}) {
}

func (m *PerSyncgroup) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Priority")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		var4 := (m.Priority == interfaces.SgPriority{})
		if var4 {
			if err := fieldTarget3.FromZero(tt.NonOptional().Field(0).Type); err != nil {
				return err
			}
		} else {

			if err := m.Priority.FillVDLTarget(fieldTarget3, tt.NonOptional().Field(0).Type); err != nil {
				return err
			}
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *PerSyncgroup) MakeVDLTarget() vdl.Target {
	return &PerSyncgroupTarget{Value: m}
}

type PerSyncgroupTarget struct {
	Value          *PerSyncgroup
	priorityTarget interfaces.SgPriorityTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *PerSyncgroupTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if ttWant := vdl.TypeOf((*PerSyncgroup)(nil)).Elem(); !vdl.Compatible(tt, ttWant) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, ttWant)
	}
	return t, nil
}
func (t *PerSyncgroupTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Priority":
		t.priorityTarget.Value = &t.Value.Priority
		target, err := &t.priorityTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct v.io/x/ref/services/syncbase/localblobstore.PerSyncgroup", name)
	}
}
func (t *PerSyncgroupTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *PerSyncgroupTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}
func (t *PerSyncgroupTarget) FromZero(tt *vdl.Type) error {
	*t.Value = PerSyncgroup{}
	return nil
}

var __VDLInitCalled bool

// __VDLInit performs vdl initialization.  It is safe to call multiple times.
// If you have an init ordering issue, just insert the following line verbatim
// into your source files in this package, right after the "package foo" clause:
//
//    var _ = __VDLInit()
//
// The purpose of this function is to ensure that vdl initialization occurs in
// the right order, and very early in the init sequence.  In particular, vdl
// registration and package variable initialization needs to occur before
// functions like vdl.TypeOf will work properly.
//
// This function returns a dummy value, so that it can be used to initialize the
// first var in the file, to take advantage of Go's defined init order.
func __VDLInit() struct{} {
	if __VDLInitCalled {
		return struct{}{}
	}
	__VDLInitCalled = true

	// Register types.
	vdl.Register((*BlobMetadata)(nil))
	vdl.Register((*PerSyncgroup)(nil))

	return struct{}{}
}
