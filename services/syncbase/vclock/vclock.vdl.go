// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: vclock

package vclock

import (
	"fmt"
	"time"
	"v.io/v23/vdl"
	time_2 "v.io/v23/vdlroot/time"
)

// VClockData is the persistent state of the Syncbase virtual clock.
// All times are UTC.
type VClockData struct {
	// System time at boot.
	SystemTimeAtBoot time.Time
	// Current estimate of NTP time minus system clock time.
	Skew time.Duration
	// Elapsed time since boot, as seen by VClockD. Used for detecting reboots.
	ElapsedTimeSinceBoot time.Duration
	// NTP server timestamp from the most recent NTP sync, or zero value if none.
	// Note, the NTP sync may have been performed by some peer device.
	LastNtpTs time.Time
	// Number of reboots since last NTP sync, accumulated across all hops of p2p
	// clock sync. E.g. if LastNtpTs came from some peer device, NumReboots will
	// equal that device's NumReboots at the time of sync plus the number of
	// reboots on this device since then.
	NumReboots uint16
	// Number of sync hops between this device and the source of LastNtpTs.
	NumHops uint16
}

func (VClockData) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/syncbase/vclock.VClockData"`
}) {
}

func (m *VClockData) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	__VDLEnsureNativeBuilt()
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	var wireValue2 time_2.Time
	if err := time_2.TimeFromNative(&wireValue2, m.SystemTimeAtBoot); err != nil {
		return err
	}

	keyTarget3, fieldTarget4, err := fieldsTarget1.StartField("SystemTimeAtBoot")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := wireValue2.FillVDLTarget(fieldTarget4, __VDLType_time_Time); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget3, fieldTarget4); err != nil {
			return err
		}
	}
	var wireValue5 time_2.Duration
	if err := time_2.DurationFromNative(&wireValue5, m.Skew); err != nil {
		return err
	}

	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Skew")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := wireValue5.FillVDLTarget(fieldTarget7, __VDLType_time_Duration); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	var wireValue8 time_2.Duration
	if err := time_2.DurationFromNative(&wireValue8, m.ElapsedTimeSinceBoot); err != nil {
		return err
	}

	keyTarget9, fieldTarget10, err := fieldsTarget1.StartField("ElapsedTimeSinceBoot")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := wireValue8.FillVDLTarget(fieldTarget10, __VDLType_time_Duration); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget9, fieldTarget10); err != nil {
			return err
		}
	}
	var wireValue11 time_2.Time
	if err := time_2.TimeFromNative(&wireValue11, m.LastNtpTs); err != nil {
		return err
	}

	keyTarget12, fieldTarget13, err := fieldsTarget1.StartField("LastNtpTs")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := wireValue11.FillVDLTarget(fieldTarget13, __VDLType_time_Time); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget12, fieldTarget13); err != nil {
			return err
		}
	}
	keyTarget14, fieldTarget15, err := fieldsTarget1.StartField("NumReboots")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget15.FromUint(uint64(m.NumReboots), vdl.Uint16Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget14, fieldTarget15); err != nil {
			return err
		}
	}
	keyTarget16, fieldTarget17, err := fieldsTarget1.StartField("NumHops")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget17.FromUint(uint64(m.NumHops), vdl.Uint16Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget16, fieldTarget17); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *VClockData) MakeVDLTarget() vdl.Target {
	return &VClockDataTarget{Value: m}
}

type VClockDataTarget struct {
	Value                      *VClockData
	systemTimeAtBootTarget     time_2.TimeTarget
	skewTarget                 time_2.DurationTarget
	elapsedTimeSinceBootTarget time_2.DurationTarget
	lastNtpTsTarget            time_2.TimeTarget
	numRebootsTarget           vdl.Uint16Target
	numHopsTarget              vdl.Uint16Target
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *VClockDataTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData)
	}
	return t, nil
}
func (t *VClockDataTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "SystemTimeAtBoot":
		t.systemTimeAtBootTarget.Value = &t.Value.SystemTimeAtBoot
		target, err := &t.systemTimeAtBootTarget, error(nil)
		return nil, target, err
	case "Skew":
		t.skewTarget.Value = &t.Value.Skew
		target, err := &t.skewTarget, error(nil)
		return nil, target, err
	case "ElapsedTimeSinceBoot":
		t.elapsedTimeSinceBootTarget.Value = &t.Value.ElapsedTimeSinceBoot
		target, err := &t.elapsedTimeSinceBootTarget, error(nil)
		return nil, target, err
	case "LastNtpTs":
		t.lastNtpTsTarget.Value = &t.Value.LastNtpTs
		target, err := &t.lastNtpTsTarget, error(nil)
		return nil, target, err
	case "NumReboots":
		t.numRebootsTarget.Value = &t.Value.NumReboots
		target, err := &t.numRebootsTarget, error(nil)
		return nil, target, err
	case "NumHops":
		t.numHopsTarget.Value = &t.Value.NumHops
		target, err := &t.numHopsTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData)
	}
}
func (t *VClockDataTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *VClockDataTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

func init() {
	vdl.Register((*VClockData)(nil))
}

var __VDLType0 *vdl.Type

func __VDLType0_gen() *vdl.Type {
	__VDLType0Builder := vdl.TypeBuilder{}

	__VDLType01 := __VDLType0Builder.Optional()
	__VDLType02 := __VDLType0Builder.Struct()
	__VDLType03 := __VDLType0Builder.Named("v.io/x/ref/services/syncbase/vclock.VClockData").AssignBase(__VDLType02)
	__VDLType04 := __VDLType0Builder.Struct()
	__VDLType05 := __VDLType0Builder.Named("time.Time").AssignBase(__VDLType04)
	__VDLType06 := vdl.Int64Type
	__VDLType04.AppendField("Seconds", __VDLType06)
	__VDLType07 := vdl.Int32Type
	__VDLType04.AppendField("Nanos", __VDLType07)
	__VDLType02.AppendField("SystemTimeAtBoot", __VDLType05)
	__VDLType08 := __VDLType0Builder.Struct()
	__VDLType09 := __VDLType0Builder.Named("time.Duration").AssignBase(__VDLType08)
	__VDLType08.AppendField("Seconds", __VDLType06)
	__VDLType08.AppendField("Nanos", __VDLType07)
	__VDLType02.AppendField("Skew", __VDLType09)
	__VDLType02.AppendField("ElapsedTimeSinceBoot", __VDLType09)
	__VDLType02.AppendField("LastNtpTs", __VDLType05)
	__VDLType010 := vdl.Uint16Type
	__VDLType02.AppendField("NumReboots", __VDLType010)
	__VDLType02.AppendField("NumHops", __VDLType010)
	__VDLType01.AssignElem(__VDLType03)
	__VDLType0Builder.Build()
	__VDLType0v, err := __VDLType01.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType0v
}
func init() {
	__VDLType0 = __VDLType0_gen()
}

var __VDLType_time_Duration *vdl.Type

func __VDLType_time_Duration_gen() *vdl.Type {
	__VDLType_time_DurationBuilder := vdl.TypeBuilder{}

	__VDLType_time_Duration1 := __VDLType_time_DurationBuilder.Struct()
	__VDLType_time_Duration2 := __VDLType_time_DurationBuilder.Named("time.Duration").AssignBase(__VDLType_time_Duration1)
	__VDLType_time_Duration3 := vdl.Int64Type
	__VDLType_time_Duration1.AppendField("Seconds", __VDLType_time_Duration3)
	__VDLType_time_Duration4 := vdl.Int32Type
	__VDLType_time_Duration1.AppendField("Nanos", __VDLType_time_Duration4)
	__VDLType_time_DurationBuilder.Build()
	__VDLType_time_Durationv, err := __VDLType_time_Duration2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_time_Durationv
}
func init() {
	__VDLType_time_Duration = __VDLType_time_Duration_gen()
}

var __VDLType_time_Time *vdl.Type

func __VDLType_time_Time_gen() *vdl.Type {
	__VDLType_time_TimeBuilder := vdl.TypeBuilder{}

	__VDLType_time_Time1 := __VDLType_time_TimeBuilder.Struct()
	__VDLType_time_Time2 := __VDLType_time_TimeBuilder.Named("time.Time").AssignBase(__VDLType_time_Time1)
	__VDLType_time_Time3 := vdl.Int64Type
	__VDLType_time_Time1.AppendField("Seconds", __VDLType_time_Time3)
	__VDLType_time_Time4 := vdl.Int32Type
	__VDLType_time_Time1.AppendField("Nanos", __VDLType_time_Time4)
	__VDLType_time_TimeBuilder.Build()
	__VDLType_time_Timev, err := __VDLType_time_Time2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_time_Timev
}
func init() {
	__VDLType_time_Time = __VDLType_time_Time_gen()
}

var __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData *vdl.Type

func __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData_gen() *vdl.Type {
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockDataBuilder := vdl.TypeBuilder{}

	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData1 := __VDLType_v_io_x_ref_services_syncbase_vclock_VClockDataBuilder.Struct()
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData2 := __VDLType_v_io_x_ref_services_syncbase_vclock_VClockDataBuilder.Named("v.io/x/ref/services/syncbase/vclock.VClockData").AssignBase(__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData1)
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData3 := __VDLType_v_io_x_ref_services_syncbase_vclock_VClockDataBuilder.Struct()
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData4 := __VDLType_v_io_x_ref_services_syncbase_vclock_VClockDataBuilder.Named("time.Time").AssignBase(__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData3)
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData5 := vdl.Int64Type
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData3.AppendField("Seconds", __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData5)
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData6 := vdl.Int32Type
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData3.AppendField("Nanos", __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData6)
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData1.AppendField("SystemTimeAtBoot", __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData4)
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData7 := __VDLType_v_io_x_ref_services_syncbase_vclock_VClockDataBuilder.Struct()
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData8 := __VDLType_v_io_x_ref_services_syncbase_vclock_VClockDataBuilder.Named("time.Duration").AssignBase(__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData7)
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData7.AppendField("Seconds", __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData5)
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData7.AppendField("Nanos", __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData6)
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData1.AppendField("Skew", __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData8)
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData1.AppendField("ElapsedTimeSinceBoot", __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData8)
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData1.AppendField("LastNtpTs", __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData4)
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData9 := vdl.Uint16Type
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData1.AppendField("NumReboots", __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData9)
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData1.AppendField("NumHops", __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData9)
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockDataBuilder.Build()
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockDatav, err := __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_v_io_x_ref_services_syncbase_vclock_VClockDatav
}
func init() {
	__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData = __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData_gen()
}
func __VDLEnsureNativeBuilt() {
	if __VDLType0 == nil {
		__VDLType0 = __VDLType0_gen()
	}
	if __VDLType_time_Duration == nil {
		__VDLType_time_Duration = __VDLType_time_Duration_gen()
	}
	if __VDLType_time_Time == nil {
		__VDLType_time_Time = __VDLType_time_Time_gen()
	}
	if __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData == nil {
		__VDLType_v_io_x_ref_services_syncbase_vclock_VClockData = __VDLType_v_io_x_ref_services_syncbase_vclock_VClockData_gen()
	}
}
