/*
Package estore defines an extended interface for the Veyron store.

The extended interface supports synchronizing with remote stores by transporting Mutations.
*/
package estore

import (
  "veyron2/storage"
  "veyron2/services/store"
)

// Mutation represents an update to an entry in the store, and contains enough
// information for a privileged service to replicate the update elsewhere.
type Mutation struct {
  // ID is the key that identifies the entry.
  ID storage.ID

  // The version of the entry immediately before the update. For new entries,
  // the PriorVersion is NoVersion.
  PriorVersion storage.Version

  // The version of the entry immediately after the update. For deleted entries,
  // the Version is NoVersion.
  Version storage.Version

  // IsRoot is true if
  // 1) The entry was the store root immediately before being deleted, or
  // 2) The entry is the store root immediately after the update.
  IsRoot bool

  // Value is value stored at this entry.
  Value anydata

  // Tags specify permissions on this entry.
  Tags storage.TagList

  // Dir is the implicit directory of this entry, and may contain references
  // to other entries in the store.
  Dir []storage.DEntry
}

// Store defines an extended interface for the Veyron store. Mutations can be
// received via the Watcher interface, and committed via PutMutations().
type Store interface {
  store.Store

  // PutMutations puts external mutations in the store, within a transaction.
  PutMutations(Mutations []Mutation) (Err error)
}
