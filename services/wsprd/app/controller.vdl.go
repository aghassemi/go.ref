// This file was auto-generated by the veyron vdl tool.
// Source: controller.vdl

package app

import (
	// VDL system imports
	"v.io/core/veyron2"
	"v.io/core/veyron2/context"
	"v.io/core/veyron2/ipc"
)

// ControllerClientMethods is the client interface
// containing Controller methods.
type ControllerClientMethods interface {
	Serve(ctx *context.T, name string, serverId uint32, opts ...ipc.CallOpt) error
}

// ControllerClientStub adds universal methods to ControllerClientMethods.
type ControllerClientStub interface {
	ControllerClientMethods
	ipc.UniversalServiceMethods
}

// ControllerClient returns a client stub for Controller.
func ControllerClient(name string, opts ...ipc.BindOpt) ControllerClientStub {
	var client ipc.Client
	for _, opt := range opts {
		if clientOpt, ok := opt.(ipc.Client); ok {
			client = clientOpt
		}
	}
	return implControllerClientStub{name, client}
}

type implControllerClientStub struct {
	name   string
	client ipc.Client
}

func (c implControllerClientStub) c(ctx *context.T) ipc.Client {
	if c.client != nil {
		return c.client
	}
	return veyron2.GetClient(ctx)
}

func (c implControllerClientStub) Serve(ctx *context.T, i0 string, i1 uint32, opts ...ipc.CallOpt) (err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Serve", []interface{}{i0, i1}, opts...); err != nil {
		return
	}
	err = call.Finish()
	return
}

// ControllerServerMethods is the interface a server writer
// implements for Controller.
type ControllerServerMethods interface {
	Serve(ctx ipc.ServerContext, name string, serverId uint32) error
}

// ControllerServerStubMethods is the server interface containing
// Controller methods, as expected by ipc.Server.
// There is no difference between this interface and ControllerServerMethods
// since there are no streaming methods.
type ControllerServerStubMethods ControllerServerMethods

// ControllerServerStub adds universal methods to ControllerServerStubMethods.
type ControllerServerStub interface {
	ControllerServerStubMethods
	// Describe the Controller interfaces.
	Describe__() []ipc.InterfaceDesc
}

// ControllerServer returns a server stub for Controller.
// It converts an implementation of ControllerServerMethods into
// an object that may be used by ipc.Server.
func ControllerServer(impl ControllerServerMethods) ControllerServerStub {
	stub := implControllerServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := ipc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := ipc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implControllerServerStub struct {
	impl ControllerServerMethods
	gs   *ipc.GlobState
}

func (s implControllerServerStub) Serve(ctx ipc.ServerContext, i0 string, i1 uint32) error {
	return s.impl.Serve(ctx, i0, i1)
}

func (s implControllerServerStub) Globber() *ipc.GlobState {
	return s.gs
}

func (s implControllerServerStub) Describe__() []ipc.InterfaceDesc {
	return []ipc.InterfaceDesc{ControllerDesc}
}

// ControllerDesc describes the Controller interface.
var ControllerDesc ipc.InterfaceDesc = descController

// descController hides the desc to keep godoc clean.
var descController = ipc.InterfaceDesc{
	Name:    "Controller",
	PkgPath: "v.io/wspr/veyron/services/wsprd/app",
	Methods: []ipc.MethodDesc{
		{
			Name: "Serve",
			InArgs: []ipc.ArgDesc{
				{"name", ``},     // string
				{"serverId", ``}, // uint32
			},
		},
	},
}
