// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Source: ben.vdl

// Package ben defines datastructures to archive microbenchmark results.
//
// These are the data structures common to tools described in
// https://docs.google.com/document/d/1v-iKwej3eYT_RNhPwQ81A9fa8H15Q6RzNyv2rrAeAUc/edit?usp=sharing
package ben

import (
	"fmt"
	"v.io/v23/vdl"
)

// Cpu describes the CPU of the machine on which the microbenchmarks were run.
type Cpu struct {
	Architecture  string // Architecture of the CPU, e.g. "amd64", "386" etc.
	Description   string // A detailed description of the CPU, e.g., "Intel(R) Core(TM) i7-5557U CPU @ 3.10GHz"
	ClockSpeedMhz uint32 // Clock speed of the CPU in MHz
}

func (Cpu) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/ben.Cpu"`
}) {
}

func (m *Cpu) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_ben_v_io_x_ref_services_ben_Cpu == nil || __VDLTypeben0 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Architecture")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Architecture), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Description")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromString(string(m.Description), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("ClockSpeedMhz")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget7.FromUint(uint64(m.ClockSpeedMhz), vdl.Uint32Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Cpu) MakeVDLTarget() vdl.Target {
	return &CpuTarget{Value: m}
}

type CpuTarget struct {
	Value *Cpu
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *CpuTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_ben_v_io_x_ref_services_ben_Cpu) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_ben_v_io_x_ref_services_ben_Cpu)
	}
	return t, nil
}
func (t *CpuTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Architecture":
		val, err := &vdl.StringTarget{Value: &t.Value.Architecture}, error(nil)
		return nil, val, err
	case "Description":
		val, err := &vdl.StringTarget{Value: &t.Value.Description}, error(nil)
		return nil, val, err
	case "ClockSpeedMhz":
		val, err := &vdl.Uint32Target{Value: &t.Value.ClockSpeedMhz}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_ben_v_io_x_ref_services_ben_Cpu)
	}
}
func (t *CpuTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *CpuTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}

// Os describes the Operating System on which the microbenchmarks were run.
type Os struct {
	Name    string // Short name of the operating system: linux, darwin, android etc.
	Version string // Details of the distribution/version, e.g., "Ubuntu 14.04", "Mac OS X 10.11.2 15C50" etc.
}

func (Os) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/ben.Os"`
}) {
}

func (m *Os) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_ben_v_io_x_ref_services_ben_Os == nil || __VDLTypeben1 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Name")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Name), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Version")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromString(string(m.Version), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Os) MakeVDLTarget() vdl.Target {
	return &OsTarget{Value: m}
}

type OsTarget struct {
	Value *Os
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *OsTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_ben_v_io_x_ref_services_ben_Os) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_ben_v_io_x_ref_services_ben_Os)
	}
	return t, nil
}
func (t *OsTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Name":
		val, err := &vdl.StringTarget{Value: &t.Value.Name}, error(nil)
		return nil, val, err
	case "Version":
		val, err := &vdl.StringTarget{Value: &t.Value.Version}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_ben_v_io_x_ref_services_ben_Os)
	}
}
func (t *OsTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *OsTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}

// Scenario encapsulates the conditions on the machine on which the microbenchmarks were run.
type Scenario struct {
	Cpu   Cpu
	Os    Os
	Label string // Arbitrary string label assigned by the uploader.
}

func (Scenario) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/ben.Scenario"`
}) {
}

func (m *Scenario) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_ben_v_io_x_ref_services_ben_Scenario == nil || __VDLTypeben2 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Cpu")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Cpu.FillVDLTarget(fieldTarget3, __VDLType_ben_v_io_x_ref_services_ben_Cpu); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Os")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Os.FillVDLTarget(fieldTarget5, __VDLType_ben_v_io_x_ref_services_ben_Os); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Label")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget7.FromString(string(m.Label), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Scenario) MakeVDLTarget() vdl.Target {
	return &ScenarioTarget{Value: m}
}

type ScenarioTarget struct {
	Value *Scenario
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *ScenarioTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_ben_v_io_x_ref_services_ben_Scenario) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_ben_v_io_x_ref_services_ben_Scenario)
	}
	return t, nil
}
func (t *ScenarioTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Cpu":
		val, err := &CpuTarget{Value: &t.Value.Cpu}, error(nil)
		return nil, val, err
	case "Os":
		val, err := &OsTarget{Value: &t.Value.Os}, error(nil)
		return nil, val, err
	case "Label":
		val, err := &vdl.StringTarget{Value: &t.Value.Label}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_ben_v_io_x_ref_services_ben_Scenario)
	}
}
func (t *ScenarioTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *ScenarioTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}

// SourceCode represents the state of the source code used to build the
// microbenchmarks.
//
// Typically it would be the commit hash of a git repository or the contents of
// a manifest of a jiri (https://github.com/vanadium/go.jiri) project and not
// the complete source code itself.
type SourceCode string

func (SourceCode) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/ben.SourceCode"`
}) {
}

func (m *SourceCode) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if err := t.FromString(string((*m)), __VDLType_ben_v_io_x_ref_services_ben_SourceCode); err != nil {
		return err
	}
	return nil
}

func (m *SourceCode) MakeVDLTarget() vdl.Target {
	return &SourceCodeTarget{Value: m}
}

type SourceCodeTarget struct {
	Value *SourceCode
	vdl.TargetBase
}

func (t *SourceCodeTarget) FromString(src string, tt *vdl.Type) error {
	if !vdl.Compatible(tt, __VDLType_ben_v_io_x_ref_services_ben_SourceCode) {
		return fmt.Errorf("type %v incompatible with %v", tt, __VDLType_ben_v_io_x_ref_services_ben_SourceCode)
	}
	*t.Value = SourceCode(src)
	return nil
}

// Run encapsulates the results of a single microbenchmark run.
type Run struct {
	Name              string // Name of the microbenchmark. <package>.Benchmark<Name> in Go.
	Iterations        uint64
	NanoSecsPerOp     float64 // Nano-seconds per iteration.
	AllocsPerOp       uint64  // Memory allocations per iteration.
	AllocedBytesPerOp uint64  // Size of memory allocations per iteration.
	MegaBytesPerSec   float64 // Throughput in MB/s.
	Parallelism       uint32  // For Go, the GOMAXPROCS used during benchmark execution
}

func (Run) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/ben.Run"`
}) {
}

func (m *Run) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_ben_v_io_x_ref_services_ben_Run == nil || __VDLTypeben3 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Name")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Name), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Iterations")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromUint(uint64(m.Iterations), vdl.Uint64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("NanoSecsPerOp")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget7.FromFloat(float64(m.NanoSecsPerOp), vdl.Float64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	keyTarget8, fieldTarget9, err := fieldsTarget1.StartField("AllocsPerOp")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget9.FromUint(uint64(m.AllocsPerOp), vdl.Uint64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget8, fieldTarget9); err != nil {
			return err
		}
	}
	keyTarget10, fieldTarget11, err := fieldsTarget1.StartField("AllocedBytesPerOp")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget11.FromUint(uint64(m.AllocedBytesPerOp), vdl.Uint64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget10, fieldTarget11); err != nil {
			return err
		}
	}
	keyTarget12, fieldTarget13, err := fieldsTarget1.StartField("MegaBytesPerSec")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget13.FromFloat(float64(m.MegaBytesPerSec), vdl.Float64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget12, fieldTarget13); err != nil {
			return err
		}
	}
	keyTarget14, fieldTarget15, err := fieldsTarget1.StartField("Parallelism")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget15.FromUint(uint64(m.Parallelism), vdl.Uint32Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget14, fieldTarget15); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Run) MakeVDLTarget() vdl.Target {
	return &RunTarget{Value: m}
}

type RunTarget struct {
	Value *Run
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *RunTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_ben_v_io_x_ref_services_ben_Run) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_ben_v_io_x_ref_services_ben_Run)
	}
	return t, nil
}
func (t *RunTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Name":
		val, err := &vdl.StringTarget{Value: &t.Value.Name}, error(nil)
		return nil, val, err
	case "Iterations":
		val, err := &vdl.Uint64Target{Value: &t.Value.Iterations}, error(nil)
		return nil, val, err
	case "NanoSecsPerOp":
		val, err := &vdl.Float64Target{Value: &t.Value.NanoSecsPerOp}, error(nil)
		return nil, val, err
	case "AllocsPerOp":
		val, err := &vdl.Uint64Target{Value: &t.Value.AllocsPerOp}, error(nil)
		return nil, val, err
	case "AllocedBytesPerOp":
		val, err := &vdl.Uint64Target{Value: &t.Value.AllocedBytesPerOp}, error(nil)
		return nil, val, err
	case "MegaBytesPerSec":
		val, err := &vdl.Float64Target{Value: &t.Value.MegaBytesPerSec}, error(nil)
		return nil, val, err
	case "Parallelism":
		val, err := &vdl.Uint32Target{Value: &t.Value.Parallelism}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_ben_v_io_x_ref_services_ben_Run)
	}
}
func (t *RunTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *RunTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}

func init() {
	vdl.Register((*Cpu)(nil))
	vdl.Register((*Os)(nil))
	vdl.Register((*Scenario)(nil))
	vdl.Register((*SourceCode)(nil))
	vdl.Register((*Run)(nil))
}

var __VDLTypeben0 *vdl.Type = vdl.TypeOf((*Cpu)(nil))
var __VDLTypeben1 *vdl.Type = vdl.TypeOf((*Os)(nil))
var __VDLTypeben3 *vdl.Type = vdl.TypeOf((*Run)(nil))
var __VDLTypeben2 *vdl.Type = vdl.TypeOf((*Scenario)(nil))
var __VDLType_ben_v_io_x_ref_services_ben_Cpu *vdl.Type = vdl.TypeOf(Cpu{})
var __VDLType_ben_v_io_x_ref_services_ben_Os *vdl.Type = vdl.TypeOf(Os{})
var __VDLType_ben_v_io_x_ref_services_ben_Run *vdl.Type = vdl.TypeOf(Run{})
var __VDLType_ben_v_io_x_ref_services_ben_Scenario *vdl.Type = vdl.TypeOf(Scenario{})
var __VDLType_ben_v_io_x_ref_services_ben_SourceCode *vdl.Type = vdl.TypeOf(SourceCode(""))

func __VDLEnsureNativeBuilt_ben() {
}
