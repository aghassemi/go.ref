// Copyright 2016 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package assets contains template strings and other assets for the benarchd web interface.
//
// This package is auto-generated by "jiri go generate v.io/x/ref/services/ben/benarchd/internal"
// which in-turn uses https://github.com/jteeuwen/go-bindata/
// Code generated by go-bindata.
// sources:
// badquery.tmpl.html
// benchmarks.tmpl.html
// footer.tmpl.html
// home.tmpl.html
// nobenchmarks.tmpl.html
// runs.tmpl.html
// sortable.css
// sortable.js
// styling.tmpl.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _badqueryTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x4f\x4f\xf3\x30\x0c\xc6\xef\xfb\x14\x7e\x73\x6f\xa3\xe9\x95\x90\x36\x85\x4a\xfc\xd9\x79\x50\x71\x41\x08\x4d\xa1\x0d\x6b\xc0\x4d\xa6\xc4\x5b\x57\x55\xfd\xee\x24\x6b\x07\x87\x82\x04\xbd\xd4\x56\x7e\x76\x1e\xfb\x89\xf8\x77\xbb\xbe\x79\x78\xbc\x5b\x41\x45\x35\x66\x33\x11\x7f\x70\xac\xd1\xf8\x4b\x56\x11\xed\x96\x9c\x37\x4d\x93\x36\xff\x53\xeb\xb6\x7c\xbe\x58\x2c\xf8\x31\x32\x2c\xb2\x4a\x96\xd9\x0c\xc2\x27\x48\x13\xaa\x6c\x95\xe7\xeb\x7c\x09\xd7\xca\x14\x55\x2d\xdd\x3b\xe4\xca\xef\x91\x3c\x5c\xb9\xa2\xd2\x07\x25\xf8\xc0\x9d\x6a\xba\x8e\x54\xbd\x43\x49\x0a\x98\xa7\x16\xb5\xd9\xb2\xbe\x9f\x09\x3e\xb4\x15\x2f\xb6\x6c\x23\x29\x4a\x7d\x80\x02\xa5\x0f\x8a\xea\x12\x13\x94\xad\xdd\x13\xc4\xf0\xcd\x8f\x19\x1b\x65\xd4\x52\x9b\x29\xbb\xd9\x14\xd6\x90\x32\x67\x6c\xda\x73\xeb\x74\xf9\xe3\x61\xa1\x10\xe1\x1c\x24\xc9\x3c\x29\x6c\x18\x5f\xf0\x80\xfd\xb2\xe4\x62\x28\x39\xc3\xfa\x13\x0d\xc3\x3b\x2d\x31\xd1\x41\xa0\x67\x99\x72\xce\x3a\xc1\x75\xf6\xd4\x75\xe9\xfd\x5e\xb9\xb6\xef\x9f\x41\x7b\x30\x96\xe0\x20\x51\x97\xcb\xb0\xb6\x74\x15\xb1\xb0\xaa\xb1\xdd\x1f\x84\x7c\xab\xfd\x2b\x11\x3c\x2e\x70\x6a\xcf\xab\xb5\x41\x28\x3b\x5d\x39\xe2\x82\x0f\xfe\x04\xbb\x4e\x0f\xe7\x23\x00\x00\xff\xff\x5f\x6f\xa4\x6d\x49\x02\x00\x00")

func badqueryTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_badqueryTmplHtml,
		"badquery.tmpl.html",
	)
}

func badqueryTmplHtml() (*asset, error) {
	bytes, err := badqueryTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "badquery.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _benchmarksTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\xe0\xb4\xbd\xd2\x6a\xbb\x0e\x43\x06\x59\x45\x97\xf4\xa1\x40\x31\x67\x73\x33\x60\x4f\x06\x2d\x9d\x23\xb6\x94\xa8\x90\x54\x1c\xc3\xcb\x77\xdf\xf1\x8f\x65\x59\xb2\x9d\x7a\x71\xf2\x12\xfa\x78\xbc\xfb\xdd\x91\xf7\xbb\x83\x92\x1f\xae\x26\x97\x5f\xfe\xb9\xfe\x48\x0a\x53\x8a\xf4\x55\x62\xff\x91\x87\x52\x54\x7a\x1c\x15\xc6\xd4\xbf\xc5\xf1\x72\xb9\x1c\x2d\x7f\x1e\x49\x75\x1b\xbf\xb9\xb8\xb8\x88\x1f\xac\x4e\x64\x75\x81\xe5\xe9\x2b\x82\x7f\x89\xe1\x46\x40\xfa\x3b\x54\x59\x51\x32\xf5\x8d\xfc\x05\xba\x11\x46\x93\x0f\x2a\x2b\xf8\x3d\x24\xb1\x57\x70\xca\xeb\xb5\x81\xb2\x16\xcc\x00\x89\xb4\x59\x09\x5e\xdd\x46\x8f\x8f\xde\x0e\xfe\xf8\x46\x14\x88\xb1\xdb\x01\x5d\x00\x98\x88\x14\x0a\x16\x28\x91\xca\xb0\xb9\x80\x51\xa6\xb5\x75\x1f\x7b\xff\xc9\x5c\xe6\x2b\x92\x09\xa6\x11\x72\x99\x0b\x9a\x43\x29\x89\x5d\x64\x52\x48\x45\xe9\xad\x82\x15\x7d\xf3\xfa\x75\x47\x66\xe0\xc1\x84\x8d\x5f\xc3\xc6\x9c\x69\x88\x2c\xc0\x24\xe7\xf7\x5d\x73\x82\xad\x64\x63\x9c\xce\x57\xdd\xfd\xe5\x97\x94\x2e\xf8\x03\xe4\xd4\x82\x01\x15\x85\x7c\x94\x8c\x57\x43\x23\xb3\x59\x26\x2b\x03\x95\x09\x6a\xa8\xa8\x21\x33\x5c\xb6\xba\xe1\x27\xa5\x19\x6a\x81\x72\x7e\x6e\x15\xcf\xdb\x05\xa5\x95\xa4\xba\x66\x19\x66\xcd\x09\x75\xc1\x72\xb9\xa4\xf4\x6d\x5e\xb7\x56\x87\x41\x64\x4c\xe5\xb3\x99\x6e\xea\x1a\x93\x88\x47\x5d\x06\xba\xfa\x0b\xa9\x4a\xc2\x9c\xf3\x71\xf4\x63\x67\x67\x9f\x35\x7b\x78\xc1\x41\xe4\x9b\xac\xb4\x82\xde\x41\x3c\xca\xab\x1a\xf3\xb5\xef\xf0\x6c\xe6\xf6\x22\x62\x56\x35\x8c\x23\x87\x88\xf0\x7c\x1c\xdd\x45\xa4\x62\x25\xb8\xc5\x3d\x13\x0d\xae\xd6\xeb\xd1\x9f\x0d\xa8\xd5\xe3\x63\x14\x0f\x5c\x08\x36\x07\x71\xc0\x85\xdb\x8b\x08\x86\x67\xcd\xa5\x5b\x3b\x49\xec\xb6\x7a\x81\xc6\x18\x69\x4f\xe4\x03\x08\x38\xa6\xc0\xf0\x45\x6f\x20\xeb\x66\x5e\x72\x04\xdd\x71\x3d\x6f\x8c\xc1\xeb\x0c\x79\xe9\xfc\xf2\x4b\x4a\x15\xe3\x1a\xf2\x1d\x91\x7b\x93\x90\xf7\x23\x5b\xaf\xf9\x82\x78\xb8\xa3\xcb\xeb\x9b\x50\x22\x2d\x2e\x16\xca\x22\x7e\x7f\x37\x5e\xaf\x71\xc9\x2b\x70\xca\xe1\x0c\x89\xf0\x50\x44\xa2\x88\xfc\x4b\x1a\x25\xee\x42\xfa\x9e\x02\x1b\xa5\x09\x6f\x75\xb0\x46\x15\x67\x82\x72\x7c\xb7\x58\x73\x0a\x2b\xcb\x16\x33\x4f\xd1\x74\x12\xb3\x3e\x5e\xa8\xf2\x1e\xca\x6e\x0c\x93\xe9\xe9\x21\x4c\xa6\x2f\x15\xc1\x64\x7a\x72\x00\x37\xb5\x90\xb6\xc8\x4f\x0f\x63\x73\xf2\xa5\x82\xd9\xd8\x3f\x39\xa4\xcf\xb6\x06\x4e\x8f\xe7\xb3\xaf\xaa\x97\x09\xc6\x19\x7f\x32\x92\x24\xb6\x94\x95\xbe\xea\x08\x3a\xb5\x9b\xc4\x81\x49\x5f\x96\x68\xf7\xd1\xac\x6f\x33\x20\x44\xbb\xa0\xf4\xcd\x5b\x5b\xe4\xcf\xe0\x67\x3c\x51\xbc\xdb\xf6\x57\x8d\xcd\xef\xdd\xce\xae\xeb\x8c\x3b\x5d\x90\x19\x46\xbd\x34\xdc\x41\x4f\xd2\x89\x87\xec\x1e\xa0\x9b\x4e\xdb\x6f\x03\x66\xdb\xf1\xb7\x32\x35\xe0\x63\x53\xec\x07\x32\x9b\xf9\x26\xd9\xb1\xff\x07\xf2\x3c\x0e\x07\xc5\xff\xb7\x41\x9e\xd8\xa7\x55\x53\xe2\x43\xcb\x90\xb3\xed\x08\x82\x7d\x86\x97\x40\x6a\xbc\x72\x8e\xf7\xce\xec\x23\x88\x52\x2b\x8b\x65\xfd\x3c\x24\xad\x07\x59\x3b\xc3\xf8\x6e\xf4\x4a\xe3\xac\x43\xf0\xd9\x2d\x0b\x9e\x15\x64\xde\x5e\x20\x59\x82\x02\xa2\x1a\x74\x6e\x99\xe8\x2c\x7e\x91\x94\x89\x6d\x4f\x18\x58\x66\x1a\x34\x7f\xdc\xaf\xe3\xf0\xb3\x38\x5e\x16\x92\x34\x9e\x82\x72\x9c\xde\xfc\xe8\x87\xe5\x49\x4c\xc1\xf5\xd6\x79\xd4\xe1\xa9\x67\xf9\xdd\x50\xc4\x73\x8d\x68\x43\x6e\x6a\xd4\xd9\xf3\x04\x51\xa2\x06\x92\x7d\xcf\xdf\x4e\x9f\x7d\x14\x96\xad\x14\xab\x6e\x81\x8c\x3e\xe1\xfd\xeb\x1e\xc1\xfa\x83\x83\xba\xb1\xc2\xfc\x10\x7a\xcf\x23\x15\x32\xd6\xe6\x3d\xa7\x2d\x4f\xbf\xc7\xa1\x09\x07\x9b\x4f\x57\xbb\x6c\x6c\x87\x1d\x5b\x5f\x76\xd6\x61\x29\xc2\xcf\xf7\x7a\x4c\x1d\x17\xd9\xb9\xcb\x56\xc1\xcc\x19\x0a\xa7\xaf\x15\x18\xb3\xfa\xc2\xbd\x0d\x4b\xaf\x83\x49\x50\x4a\x61\x78\x1d\x06\xac\x5d\x03\x09\xb2\x67\x75\x34\x1e\x2b\x08\x30\x2b\x39\x85\x4c\x5f\x83\x9a\xd4\xd6\x97\x3d\x9a\x56\x3a\x38\x3d\x04\xfd\x94\x64\x6d\x82\x94\xba\x83\xf0\x70\xa7\xfb\xa9\x3b\x81\x8c\xa6\xd8\x25\x98\xe2\x72\x34\xd1\xa3\xbf\x41\x69\xdb\x48\x06\xb9\xee\x2a\x75\xf3\x7e\x24\x6f\x03\xf2\xda\xa6\xc5\x67\xb4\x8b\xb6\xe7\x22\xe0\x68\x6f\xe6\x9c\x49\xca\xea\xe6\xb4\x2c\xb9\x51\x73\x0b\xef\xb2\x6e\x46\x57\xa0\x33\xc5\x6b\x73\x3c\x57\x56\xf3\x43\x87\xb3\xce\x91\xb4\x1d\xf4\x7d\x67\x1d\x58\x67\x4d\xdd\x77\x24\x69\x3b\x05\xb6\xa3\xe4\x30\x33\xdb\x21\xf3\x68\xd5\x9e\x19\x5a\x18\xe8\xb6\xa9\x72\x82\x23\xf7\x16\x06\xc7\x73\x61\x44\xd3\x96\x8e\x3d\x1b\x5b\xb3\x7b\x4d\x0e\x38\xd9\xfe\xed\x1b\x71\xbd\x3c\x50\xf0\x47\xd5\x9f\xd8\x3d\x3e\x95\x3a\x8c\x52\x58\xb2\x19\xff\x72\x64\x36\x05\xa5\xa4\xb2\xa3\x29\xc2\x0c\xe0\xbe\x1f\x0b\x6a\xf6\x7b\x04\x8a\x6c\x26\xd2\x43\xb3\xeb\xe1\x41\x36\x89\xed\x97\x85\xb0\xf6\x0f\x99\x68\x95\xe1\xdd\xb6\x5f\x47\xbe\x22\x60\x3c\xe5\xf6\x86\x1f\x5c\x16\x52\x62\x6c\xfe\x7b\x4b\x70\x94\xc4\x1e\x1f\xce\x94\xee\x1b\xd0\x7f\x01\x00\x00\xff\xff\x81\x97\x58\x11\x14\x12\x00\x00")

func benchmarksTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_benchmarksTmplHtml,
		"benchmarks.tmpl.html",
	)
}

func benchmarksTmplHtml() (*asset, error) {
	bytes, err := benchmarksTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "benchmarks.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _footerTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xd0\xbf\x6e\x03\x21\x0c\x06\xf0\xfd\x9e\x02\xb1\x5f\xbc\x57\x84\xb5\x7d\x8b\x88\x80\xc9\x59\xe5\x4f\x85\xcd\x2d\x28\xef\x5e\x74\x69\x97\x56\xb7\x21\xf9\x07\x7c\x9f\xc7\x08\x18\xa9\xa0\xd2\xb1\x56\xc1\xa6\x9f\xcf\xc5\xbc\x8e\xca\x27\xc7\x7c\xd5\x39\xa4\x35\x53\xa1\xf5\x47\xd8\x45\x29\x13\x68\x3f\x99\xdf\x6e\x09\xa3\xac\x8c\x5e\xa8\x96\x43\x4f\xdf\xd3\x39\xa7\xf2\xb9\x26\x62\xf9\xb5\x89\xac\x71\x6a\x6b\x18\xaf\x1a\xb4\xfd\xa8\x19\x0d\x38\x6b\x60\x0e\xfe\x8b\x4d\xe4\x8b\xdf\x00\x1e\x24\x5b\xbf\x5f\x7c\xcd\xb0\xbb\xe2\x02\xf5\x0c\x8f\x7a\x99\x06\xa4\x21\x42\x76\x3c\xbf\x03\xc6\xb6\x93\x47\x86\x3b\xce\x70\xef\xc7\xa5\x3f\xaf\x43\x4f\x47\x47\x98\x25\xed\x62\xe0\x15\xd4\x2e\x63\x60\x09\x73\x3f\xdf\x01\x00\x00\xff\xff\xba\xbb\x8c\x27\x34\x01\x00\x00")

func footerTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_footerTmplHtml,
		"footer.tmpl.html",
	)
}

func footerTmplHtml() (*asset, error) {
	bytes, err := footerTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "footer.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x4d\x6f\xe3\x36\x10\xbd\xef\xaf\x98\xb2\x40\x2f\xbb\x12\x9b\x6e\xb0\x40\xbc\xb2\x8a\x4d\x9a\x43\x81\x02\x09\x9a\xa6\x40\x4f\x06\x2d\x8e\x6c\x26\xa4\x28\x93\x94\x6d\x21\xc8\x7f\xef\x50\x1f\x8e\x12\x3b\x40\x72\xd1\x90\x7c\xef\x71\xe6\x99\x33\xc9\x7e\xfa\xe3\xe6\xea\x9f\xff\x6e\xaf\x61\x1d\x8c\xce\x3f\x65\xf1\x03\x7b\xa3\x2b\x3f\x67\xeb\x10\xea\x19\xe7\xbb\xdd\x2e\xdd\x7d\x4d\xad\x5b\xf1\xb3\x8b\x8b\x0b\xbe\x8f\x18\x16\xb1\x28\x64\xfe\x09\xe8\x2f\x0b\x2a\x68\xcc\x2f\xb1\x2a\xd6\x46\xb8\x47\xf8\x1b\x7d\xa3\x83\x87\x1f\xae\x58\xab\x2d\x66\xbc\x07\x74\xe0\xa7\xa7\x80\xa6\xd6\x22\x20\x30\x1f\x5a\xad\xaa\x15\x7b\x7e\xee\x75\xe2\x7a\x80\xa5\xa5\xda\xa3\x4c\x76\x4a\x86\x35\x3c\x41\x69\xab\x90\x94\xc2\x28\xdd\xce\xc0\xd8\xca\xfa\x5a\x14\xf8\x1d\x06\x22\x1f\x98\x19\xef\xb3\xca\x96\x56\xb6\x51\x28\x93\x6a\x0b\x85\x16\x9e\x0a\x32\x52\x27\x5a\xb4\xb6\x09\x10\xc3\x07\x3f\xac\xd8\x50\x85\x11\xaa\x3a\xc6\x2e\x16\x05\xdd\x8d\xd5\x01\xf6\x46\x71\xe5\x94\x7c\xe7\xa8\x40\xad\x61\x0c\x92\xe4\x2c\x29\x2c\x39\x97\x71\x82\x7d\x88\xf0\xad\x27\xf4\xd0\xd2\x3a\x03\xa2\x08\xca\x56\x73\xf6\xf3\xb0\x7b\x4a\x24\xe0\x3e\x94\x0a\xb5\x1c\xab\x3c\x6c\x4c\x48\x44\x53\x55\x4d\x4e\x9c\x22\x2e\x16\xdd\x19\x83\xd0\xd6\x38\x67\x71\x9f\x81\x92\x73\xb6\x61\x50\x09\x83\x31\xe0\xaf\xb4\xb4\x58\xa2\x7e\x47\xab\x3b\x63\xf4\x0b\xba\xc8\xcb\xef\x50\xd0\xab\x80\x4d\x83\xae\xcd\x78\x77\x38\xa9\xe5\xc5\x9b\x49\x8e\x5b\xa1\x1b\xba\xb4\x67\x8e\x59\xf9\x66\x69\x14\xe5\x35\xb9\x74\xd9\x84\x60\xab\xb1\xec\xc9\xaa\x0f\x93\xc4\x09\xe5\x51\xbe\xda\x22\x87\xad\x43\x39\xd6\x93\xf1\xe8\x73\x1f\xdf\x09\x7a\xa7\xd8\x65\xaa\xd0\xcf\xfa\xf3\x66\x9a\xad\x56\x79\x26\x60\xed\xb0\x9c\x33\xfe\xfb\x66\xfe\xaf\x35\xd7\x55\x61\x25\xb2\xfc\x10\x66\x5c\xe4\x90\xc0\x0f\xfa\x65\x97\x63\x83\x78\xd8\x29\x7a\xd6\xd1\x4b\x0f\x46\x04\xea\x92\x6a\x05\x13\x0a\x09\xbf\x7f\x8b\xf5\x33\xea\x9a\x66\xff\xb9\xa8\x9b\x99\x30\xf2\xdb\xf9\xe7\x6d\xaa\x2c\xdf\xfe\xf6\x95\x7b\x2c\x1a\xa7\x42\xcb\xf2\x11\x05\x07\x14\x1c\xa1\x86\xdc\x2e\x5f\xf2\x22\xc3\x24\xfa\xc7\x60\x6b\xe8\xd9\x64\x07\x84\x35\x52\x6f\xd6\xe2\xd0\x1d\x93\xde\x64\xf9\x09\xd5\x88\xcd\x81\x3a\xf4\x51\xac\x26\xd5\x64\x7c\x74\x6f\x78\x04\xb6\x46\x27\x82\x75\x27\xcc\x8d\x55\x5b\x4f\xc9\xdd\x74\x98\xe8\x8f\x6f\x3d\x8d\x8e\x2f\x80\xe9\x2a\xfd\x02\x63\x7d\x5d\xf4\xcb\xa6\xb1\xe1\xfb\xfd\xb2\xa9\x42\x03\x67\xe7\xe9\xaf\xe7\xfd\x0e\x60\x28\xd2\x57\x76\x46\x5d\x72\x84\x84\xaf\x6e\xef\x47\xad\xce\x22\x67\xfa\x60\x8f\x64\xc2\x49\x5e\x53\x6b\x2b\x24\x3a\x22\xff\x29\x69\x22\x50\xad\x60\x4b\x18\xb7\x47\xb5\x71\x3d\x7b\x10\x15\x4a\x8b\x47\x3a\x7d\xb7\x24\xf0\x57\xf7\x25\x47\xd5\x8a\x80\xb0\x6c\x3b\xa7\xdf\xca\x75\xe8\x99\x69\xbb\xef\x29\x33\x3f\x3e\x50\x4e\x4c\xa0\x69\x18\x07\xe0\xf1\x90\x2e\xad\x0d\xe8\xfa\x19\x3d\xc0\x33\xde\xcf\x57\x1a\xb7\xdd\xff\x8d\xff\x03\x00\x00\xff\xff\x35\xf1\xf7\x01\x48\x06\x00\x00")

func homeTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_homeTmplHtml,
		"home.tmpl.html",
	)
}

func homeTmplHtml() (*asset, error) {
	bytes, err := homeTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nobenchmarksTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x4f\x4b\xf4\x30\x10\xc6\xef\xfd\x14\x79\x73\x6f\xc3\xf2\x82\x50\x89\x05\xff\x5d\x55\xc4\x8b\x88\x2c\x31\x4d\xdb\xe8\x24\x59\x92\xec\x76\x4b\xe9\x77\x37\xd9\xd4\x22\xae\xc2\xf6\xd2\x09\xf9\xcd\xcc\x33\xf3\x84\xfe\xbb\xb9\xbf\x7e\x7a\x7e\xb8\x45\x9d\x57\x50\x65\x34\xfe\xd0\x5e\x81\x76\x17\xb8\xf3\x7e\x73\x4e\x48\xdf\xf7\x45\xff\xbf\x30\xb6\x25\xab\xb2\x2c\xc9\x3e\x32\x38\xb2\x82\xd5\x55\x86\xc2\x47\xbd\xf4\x20\xaa\x2b\xa1\x79\xa7\x98\xfd\x40\x8f\xc2\x6d\xc1\x3b\x74\x69\x79\x27\x77\x82\x92\x04\x1c\xe0\x71\xf4\x42\x6d\x80\x79\x81\xb0\xf3\x03\x48\xdd\xe2\x69\xca\x28\x49\xf5\xe8\x9b\xa9\x87\x48\xd2\x5a\xee\x10\x07\xe6\x82\x14\x55\x43\x0e\x6c\x30\x5b\x8f\x62\xf8\xee\xe6\x13\x9e\xfb\x2b\x26\xf5\x31\xbb\x5e\x73\xa3\xbd\xd0\x0b\xf6\xa3\x62\x6b\x65\xfd\xc7\x15\x17\x00\xe8\x2b\xc8\xf3\x55\xce\x4d\x98\x99\x92\x80\x9d\x94\x70\x96\x12\x12\x2a\x17\x30\x0c\x6d\x25\x83\x5c\x06\x61\x0e\x57\x52\x37\x86\x12\x59\xdd\x19\x64\xe7\x8d\x35\xc6\xa2\x97\x71\x2c\xa6\xe9\x35\x25\x9f\xdc\xf2\x17\x8d\xdf\xc3\xb8\xa2\x63\x03\x1a\x63\x82\xa4\xb8\xff\x05\xa7\x24\x39\x10\x0c\x39\xbc\x89\xcf\x00\x00\x00\xff\xff\x7b\x69\x4d\x38\x24\x02\x00\x00")

func nobenchmarksTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_nobenchmarksTmplHtml,
		"nobenchmarks.tmpl.html",
	)
}

func nobenchmarksTmplHtml() (*asset, error) {
	bytes, err := nobenchmarksTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nobenchmarks.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _runsTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x18\xdb\x6e\xdb\x36\xf4\xb9\xfd\x0a\x4e\x4f\x2d\x50\x49\x4d\x57\x60\x4b\x27\x6b\x48\x9c\xa2\x0b\xb0\xd4\x46\xdc\x0e\xdb\x53\x40\x8b\xc7\x16\x1b\x4a\x54\x49\xaa\x8e\xeb\xf9\xdf\x77\x48\x5d\x7c\x93\x5b\x77\xf1\x52\x60\x7e\xb1\x78\xc8\x73\xbf\x92\xd1\x0f\x17\x83\xfe\xbb\xbf\x86\xaf\x49\x6a\x32\x11\x3f\x8e\xec\x1f\xb9\xcb\x44\xae\x7b\x5e\x6a\x4c\xf1\x2a\x0c\x67\xb3\x59\x30\xfb\x31\x90\x6a\x1a\x9e\x9c\x9e\x9e\x86\x77\xf6\x8c\x67\xcf\x02\x65\xf1\x63\x82\xbf\xc8\x70\x23\x20\x3e\x87\x3c\x49\x33\xaa\x6e\xc9\x35\xe8\x52\x18\x4d\xce\x54\x92\xf2\x4f\x10\x85\xd5\x01\x77\x78\xb1\x30\x90\x15\x82\x1a\x20\x9e\x36\x73\xc1\xf3\xa9\xb7\x5c\x56\x74\x70\x71\x4b\x14\x88\x9e\xdb\x01\x9d\x02\x18\x8f\xa4\x0a\x26\x08\x91\xca\xd0\xb1\x80\x20\xd1\xda\xab\xf9\xba\x53\xd5\x77\x30\xe1\x77\xc0\xfc\x19\x67\x26\x25\x0b\x32\x91\xb9\xf1\x27\x34\xe3\x62\xfe\x8a\x64\x32\x97\xba\xa0\x09\xfc\x42\x6a\x46\x61\x8d\x19\x85\x95\x16\xd1\x58\xb2\x39\x49\x04\xd5\xa8\x78\xc6\x84\xcf\x20\x93\xc4\x7e\x24\x52\x48\xe5\xfb\x53\x05\x73\xff\xe4\xf9\xf3\x35\x98\x81\x3b\x53\x6f\xfc\x54\x6f\x8c\xa9\x06\x27\x5b\xc4\xf8\xa7\x75\x72\x82\xce\x65\x69\xdc\x99\x0f\x7a\x7d\x55\x7d\xfa\x7e\x25\xbd\x15\x06\x54\xa3\x5d\x46\x79\xbe\x4b\xe4\xe6\x26\x41\xdd\x20\x37\xf5\x31\x6b\xd1\x19\x47\xa5\x83\xd6\xfe\xb5\x39\xad\x81\x20\x31\x5c\xb6\x54\xea\xa5\xef\x27\x88\x0f\xca\x49\x30\x55\x9c\xb5\x1f\xbe\x9f\x4b\xdf\x9a\x0a\xbd\xe2\x80\x3a\xa5\x4c\xce\x7c\xff\x05\x2b\x5a\x7e\xdb\xca\x25\x54\x55\x14\x12\x10\xa2\xfd\xf0\xfd\x93\x17\xd6\x52\x2d\x5a\x37\xe2\xcd\x8d\x2e\x8b\x02\x7d\x8b\x1c\x9d\x49\xd7\xce\x23\x46\xfa\x32\x8e\x68\x1d\x01\xbf\x7e\xec\x2d\x16\xc1\x5b\x9a\x01\xf9\x9b\x94\x4a\x7c\x2c\x41\xcd\x97\x4b\x2f\xae\xa1\xcb\x65\x14\xd2\x18\x5d\xfa\x72\x83\x84\x8b\x9a\x0d\xdf\x52\x43\xfd\x0a\x5a\x3b\x64\x0b\xd2\xa5\x74\x43\xcc\x06\xca\x26\xcc\x42\xd5\x36\xc8\x02\x59\x37\x53\x74\xa0\x33\x4f\x8e\x8e\xc8\xcb\x0c\x14\x4f\xbc\x78\x30\xc2\x24\x61\xf7\xa5\x82\x86\x18\xa1\x6b\xa9\xe2\x32\x18\xe8\xda\x28\xe4\xc9\x16\xf8\x0f\x50\x1a\xa3\x60\xb9\x7c\xda\xc5\x13\x61\x3b\xda\x1c\x41\xc1\xfe\xf0\xfd\xb1\x35\xec\x17\x65\xe0\x2a\x8c\xc1\xb0\x2e\xd5\x8e\xaa\x76\xff\x02\x74\xa2\x78\x61\xbe\xa6\xef\xa3\x6a\xd1\xa4\xd2\x06\x8d\xbe\x90\xc9\xed\xa8\x00\x60\x57\xe9\x67\xcc\xad\x47\xc7\x33\x4a\x4b\xf9\x48\xb6\x41\x13\x5c\xfd\xf6\xb9\x22\xf6\xa8\x53\x3f\xc8\x59\x5b\x1e\x8e\xe8\xde\xf7\x85\x90\xb6\x76\x1d\x49\x8f\x86\x9c\x4d\xe9\xc3\x42\x74\xc7\x73\xbf\xd3\x31\x88\xff\x42\x55\x47\xf8\x68\xfe\x3a\x5c\xbf\x5d\xcf\xe1\xb9\xed\x72\x84\x20\xcb\x6f\xad\xe6\x86\x58\x74\xdb\xca\xbd\xb9\xa8\xdb\xc1\xaa\x8f\x54\x2c\xfe\x4f\xcd\xe3\xba\xcc\xf5\x71\x3b\x02\x59\x1f\x34\x36\x91\xfd\x66\x46\xd9\xe9\x1a\xab\x59\x69\x05\xeb\xa8\xb2\xe9\xbe\xe8\xa9\x06\x83\x96\x3e\xf9\xca\x7e\x1b\x63\xc4\x0d\x5e\x3d\xcf\x70\x6c\x9a\x05\x3a\x0d\x6b\xa5\xa2\xd6\x8d\x5e\x6c\x61\xa1\x2c\x30\x62\xd2\x07\x94\x04\xd7\x63\x94\x43\x4e\x48\x86\x23\x96\x9a\x13\x2a\xb0\x08\x3a\x91\xf4\xb6\x84\x6e\x4b\x7f\x4f\x19\xc7\x73\x03\xfa\x1b\x84\xc5\xa9\x96\x55\x48\x0f\x2f\x75\x06\x53\x5a\xc9\x5b\x28\x99\x80\xd6\x28\x8a\x95\x11\xf3\x56\xe6\xcc\x8b\xaf\xce\x43\x7d\x3f\x91\x36\xc2\x49\x1b\x9a\x15\x64\x96\x42\x8e\x13\x7b\x35\xee\xcf\x40\x01\x29\xab\xd2\xcd\xbc\x83\x2b\xe1\x3e\x4d\x1d\x5f\x4c\x35\x86\x3d\x1c\x2b\x93\xbd\x28\x34\x7d\x86\xed\x53\xa4\x16\x90\xad\xda\xbe\xf5\x9e\x96\xa5\x4a\x30\xe3\x25\x83\xc3\xc5\xf2\xe2\x91\x43\xeb\x23\xd6\x03\xb9\x32\xbe\x6c\xe2\xe9\x9e\x9e\xfa\xe6\xe0\x29\xa8\xc2\x00\x06\xc1\x75\x46\x4a\x1b\x39\x46\x12\x55\xe6\x64\xdc\xdc\x29\x9e\x11\x08\xa6\xc1\x33\xf2\x66\x70\x75\xf6\xe7\xf0\x7a\xd0\x1f\xe1\x1d\x4b\x91\x37\x72\x75\x04\xaf\x65\xc3\x15\x99\x5d\x05\x76\xdb\x9a\x3d\xd3\x51\x19\xbb\x66\xec\xc5\x42\xd1\x7c\x0a\x24\x40\x13\x65\xfa\xe0\xbe\x1e\xbb\xb6\xc1\x59\xcf\x43\x6d\x6e\xb0\xe3\x5e\xe6\x0c\xee\xea\x4b\x03\x36\x87\x60\xa8\xc0\x98\xf9\x3b\x5e\x5d\x1f\x6c\x7b\xdc\x6e\x34\x46\x4a\x61\x78\xb1\x63\x52\x17\x30\x16\xe0\x59\x4b\xec\x65\xf0\x96\xe6\x72\x04\x89\x1e\x82\x1a\x14\xcb\xa5\xf5\xac\xe3\xb2\x6f\x80\x40\x3c\x3e\x21\x0e\xf5\xcc\xd5\xbf\x1a\xb1\x26\xb7\x05\x73\x1d\xfb\x60\x5a\xc0\xce\x6d\x81\xe8\xa0\xb8\xbd\x73\x30\xdd\x2b\xac\x3a\x0d\x2a\xaa\xd9\x52\xed\x80\x7f\x99\xe6\xbf\x19\x10\x1b\xb7\xdd\x9f\xe4\xea\x92\xa9\xf1\x92\xd9\x5c\x2e\x71\x9c\x6c\x4b\xc0\xe5\x85\x75\xea\x93\xaa\x94\xe8\xa7\xd5\x55\x73\xbf\x7d\x9c\x11\x56\xe9\xfc\x65\x63\x56\x91\xb8\xca\x9d\xfb\x8d\x85\x6b\xc9\xf2\x5a\xa9\xce\x54\x71\xc6\x91\x02\x87\xb5\xbc\xf7\x73\x1c\xf1\xd6\x52\xd8\xc0\x14\xa7\xc2\xe7\xd8\x33\x30\x9f\x41\x29\x89\x33\x3d\x5f\x9b\x55\xbf\xcb\x70\x1a\x85\xf6\x31\xa4\x79\xf5\x71\xa5\x9d\x68\x95\xf4\xbc\xb0\x7d\x16\xfa\x80\xe2\x22\x96\xdb\xdb\x7d\x69\x9a\x48\x89\x9a\x55\x0f\x4d\x35\xa3\x28\xac\xe4\xc3\xf1\xd0\x3d\x7e\xfd\x13\x00\x00\xff\xff\xfd\xad\x18\x31\x0d\x13\x00\x00")

func runsTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_runsTmplHtml,
		"runs.tmpl.html",
	)
}

func runsTmplHtml() (*asset, error) {
	bytes, err := runsTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "runs.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sortableCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\xcb\x6e\xdb\x3a\x10\xdd\xfb\x2b\xe6\x0a\xb8\xc8\xe3\x46\x32\xa5\xbc\x74\x95\x38\x40\x92\x66\x51\x20\xe9\xa2\x69\x03\x74\x15\xd0\xe2\x48\x22\x42\x91\x02\x49\xf9\xd1\xa2\xff\xde\xa1\x65\xa7\x41\x0a\x24\x4d\x51\x5b\xa6\x3d\xc3\x79\x9d\xc3\x63\x8e\x77\xe1\xd2\x74\x4b\x2b\xeb\xc6\x43\xc6\xd2\x23\xf8\xd4\x20\xdc\x71\xcd\x85\xec\x5b\x38\xef\x7d\x63\xac\x4b\xe0\x5c\x29\x58\x05\x39\xb0\xe8\xd0\xce\x50\x24\xb0\x3b\x1e\x51\xfe\x67\x87\x60\x2a\xf0\x8d\x74\xe0\x4c\x6f\x4b\x84\xd2\x08\x04\x32\x6b\x33\x43\xab\x51\xc0\x74\x09\x1c\x2e\x6e\xdf\xc5\xce\x2f\x15\xae\x13\x95\x2c\x51\x53\xb2\x6f\xb8\x87\x92\x6b\x98\x22\x54\xa6\xd7\x02\xa4\x26\x27\xc2\xf5\xfb\xcb\xab\x0f\xb7\x57\x50\x49\x85\xab\x6e\x49\x2b\x54\x2c\xb8\xe7\xb1\xe7\x53\x85\xf7\xf7\xce\x58\x2f\x4b\xa3\xe1\xdb\x08\xe8\xe5\x2d\xd7\x4e\x7a\x69\x74\x01\x2c\xc9\x1c\x20\x77\x18\x4b\x1d\x9b\xde\x9f\xac\x22\x84\x74\x9d\xe2\xcb\x82\x5a\x28\xa9\x31\x9e\x2a\x53\x3e\x0c\x5b\x73\x29\x7c\x53\x40\x9a\x77\x8b\xc1\xd1\x60\x00\xfc\xd4\xd3\x72\x5b\x53\x35\x85\x15\xb9\x0f\x9f\x79\xed\x10\xfd\xe8\x26\xe8\x34\x1b\x57\x31\x57\xb2\xa6\x81\x5c\x3f\x1d\x36\x4c\xc7\x4b\xe9\x69\x06\x36\xd8\x53\x5e\x3e\xd4\x36\x00\x2f\xa0\xb7\x6a\x7b\x2b\x20\x2c\x64\xcb\x6b\x1c\xbb\x59\xfd\xdf\xa2\x55\x27\xbd\xaf\xf2\xbd\x53\xb2\x80\x2c\xed\x26\x51\xe3\x7d\x57\x8c\xc7\xf3\xf9\x3c\x99\xef\x27\xc6\xd6\xe3\x8c\x31\x16\xe2\xa3\x01\xc9\x24\x4a\x19\xfb\x37\x5a\xa3\xd8\x58\x33\x89\xf3\x0b\xb3\x98\x44\x0c\x18\x64\x07\xf4\x44\x44\x2f\x6d\x47\xd0\xad\x0f\xf6\xdc\x75\x58\xfa\x8f\x9c\x68\x9c\x44\x8b\x1b\x29\xbe\xd0\x07\x5a\x44\x1f\xc1\xea\xf8\x26\x51\x67\xa4\xf6\x68\x63\x9c\xa1\xf6\xae\x00\x6d\x34\x9e\xfc\xe4\x76\x20\x35\x3a\x3b\xed\xb8\x6f\x40\x4c\xa2\x9b\x03\x48\x33\x95\x26\x07\x29\x84\xe5\x3a\x4d\xe1\x38\xc9\xf7\xef\x32\xd6\x64\x77\xe1\x97\x3a\x4c\x0e\x73\xa0\xe5\xff\xeb\x8c\x85\xd8\x38\x0f\x6f\xc8\xbf\x52\x95\x71\x28\x43\x5f\x84\xed\x6c\x6b\x87\x9a\xc5\x16\x3b\xe4\x74\xa2\xdf\x47\xbf\x4a\xa2\x41\x2e\x68\xb4\x38\x48\x03\x45\xcc\x1d\x89\x4c\x48\x5d\xef\xbd\x1a\x2a\x70\x13\xbb\x96\x53\x69\x94\xb1\x05\xd8\x7a\xca\xb7\xd9\x1e\x0c\x4f\x92\x1f\xef\xc0\x3f\xb2\xed\x28\x89\xeb\x37\x0e\x01\xaf\x29\xf8\x51\x1b\xe9\x5b\x7b\x3c\x99\xfe\x0f\x9b\x3c\xfe\x83\x2a\x63\x5b\x82\x6d\x3c\xf7\xb8\x9d\xe6\x4c\x60\xbd\xf3\xe2\x0c\xa1\x7e\x70\x6c\x78\xeb\xad\x0b\xc4\x09\xac\x78\xaf\x5e\x1e\x7f\x93\x5a\x34\xe1\xae\xf8\x5b\xc4\x3f\xab\xfa\xdb\x84\xd0\xa5\x71\x14\x0a\x93\xd8\x82\xd2\xcf\x46\x3f\x02\x00\x00\xff\xff\x16\x05\xc1\x95\x20\x05\x00\x00")

func sortableCssBytes() ([]byte, error) {
	return bindataRead(
		_sortableCss,
		"sortable.css",
	)
}

func sortableCss() (*asset, error) {
	bytes, err := sortableCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sortable.css", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sortableJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x4d\x73\xdb\x36\x10\xbd\xf3\x57\x6c\x4f\xa4\x27\x22\x63\xf7\xd0\x83\xdd\x4e\xc7\x51\x74\xc8\x4c\xc6\x87\x3a\xed\x45\xa3\xc9\x80\xc4\x4a\xa4\x02\x02\x1a\x00\x74\xe2\x49\xf4\xdf\xbb\x4b\x88\x32\x49\x7d\xb9\x0d\x2e\x12\xc1\xb7\xbb\xef\xed\x2e\xb0\x7c\xfb\x16\xa6\x66\xf3\x6c\xab\x55\xe9\xe1\xd7\xeb\x9b\xdf\xe0\x53\x89\xf0\x8f\xd0\x42\x56\x4d\x0d\xf7\x8d\x2f\x8d\x75\x19\xdc\x2b\x05\x2d\xc8\x81\x45\x87\xf6\x09\x65\x16\x91\xf1\xdf\x0e\xc1\x2c\xc1\x97\x95\x03\x67\x1a\x5b\x20\x14\x46\x22\xd0\xe3\xca\x3c\xa1\xd5\x28\x21\x7f\x06\x01\xef\x1e\xdf\xa7\xce\x3f\x2b\x64\x2b\x55\x15\xa8\xc9\xd2\x97\xc2\x43\x21\x34\xe4\x08\x4b\xd3\x68\x09\x95\xa6\x4d\x84\x8f\x1f\xa6\xb3\x87\xc7\x19\x2c\x2b\x85\x59\x14\x3d\x09\x0b\x5e\xe4\x0a\x1d\xfc\x01\xd2\x14\x4d\x8d\xda\x67\x2b\xf4\x33\x85\xfc\xd7\xbd\x7b\x9e\x2a\xe1\xdc\x83\xa8\x31\x89\x6b\xa9\x52\x29\xbc\x48\x5b\x93\xd4\x19\xdb\xfe\x89\xaf\xee\xa2\xf9\x22\x5b\x1a\x3b\x13\x45\x99\x15\x42\xa9\x24\x38\x9d\x40\x2d\xbe\xe0\x27\xfe\xff\xb8\x03\x5f\x45\xd1\xb2\xd1\x85\xaf\x8c\x3e\x7c\x99\xf8\xfc\x0a\xbe\x47\x40\x8b\x99\x71\x2c\xe2\x85\xdf\xbc\x15\x85\x7f\x4f\x4f\x09\x85\xea\xde\x96\x28\x24\x5a\x26\xee\xf3\x57\x52\xfe\xfc\x39\x18\x0d\xa8\xb3\xbf\x31\xfd\x9d\xef\xc0\x7f\x6a\x54\x53\xeb\x9e\x00\xb6\x18\x88\x18\x22\x12\x5f\x4e\x28\xdf\x12\xbf\x75\x62\x78\x89\xcd\x06\xb5\x64\xcc\x87\xc2\x68\xc2\xec\x42\xf3\xf2\x65\x56\x39\x7e\x85\xf2\xde\x15\xac\x88\x78\xb0\x88\x8f\x95\xf3\x19\xc1\xbd\xa8\xb4\x3b\xa9\xa6\x95\x83\x32\x15\x8e\xaa\x2f\x2b\xbd\x8a\x7b\xbe\x39\x55\x95\xd3\xd4\x73\xff\xd5\x6d\x97\xa4\x94\x8c\xd1\x56\x45\x3c\x64\x2c\xa4\x9c\x3d\x51\xc2\xd9\x19\x6a\xb4\x49\x5c\x50\xfb\x7d\x89\x27\xfb\xdc\x24\x7d\xfd\x1d\x17\xf6\x1a\x44\xfe\x32\x94\x7d\x37\x80\x9e\xac\xc8\x3e\xf1\x7c\x5c\x7c\x52\x8e\x63\xf0\xea\xcb\xb4\x58\xd3\x79\xf9\x7f\xb9\xfb\x09\x7f\x12\xcf\x3b\x1c\xd6\x5b\x37\x4a\x0d\x51\xdb\x91\xd5\xa0\x74\x94\xfa\xa4\xcb\xe3\x9f\xf0\x7a\x69\xb7\x17\xb1\xa7\x69\x33\xa0\x3d\x82\x6d\x67\x4f\x42\x4f\x4d\xba\x72\x8e\xc0\x16\x8d\x25\xb7\x7f\x99\xaf\x2e\x39\x14\x32\xd4\xbe\xf3\xf0\x82\xea\xa4\x6f\x47\x27\xed\x04\x83\xbd\xbc\x7e\x27\xb0\xc4\x8c\x0d\x92\x7d\x33\x8a\x09\xe4\xe3\x66\xa9\x96\x49\xeb\xe5\x58\x13\x71\xb3\x8a\x70\x6e\x1e\x9a\x3a\xa7\x06\x17\x19\xbb\x9d\xb7\xe1\x17\x47\xaa\xca\x16\xf9\xc0\x22\xbf\x60\x41\xf1\x8f\xd2\x1f\x2f\x8b\xbe\xb1\xba\xa5\x93\x72\x84\x43\x4f\x5b\x40\x45\x17\xff\x45\x17\x6c\x9d\x8a\xe3\x2e\xa2\xd3\x4f\x97\x88\x76\x04\xfb\x7a\x33\x65\xe8\xe8\xd2\xe5\x58\x6f\x84\xc5\xb3\xb9\x38\xc9\xbe\x63\x7d\xc6\xef\xb9\xaa\x6c\x2f\x36\xd5\xa0\x53\x7b\x04\xe8\xf2\x49\xda\xab\x93\x8a\x79\x7d\x47\x3f\xbf\x87\x9e\x52\xa8\x57\xbe\xa4\x8d\x37\x6f\x60\x9c\x08\x9a\x43\xe1\x96\x9f\x96\x95\x92\x49\xa0\xb5\xc8\xac\xf9\xda\xa3\xf5\x42\x69\xa7\x8d\x61\xc7\xb9\x0d\x06\x5f\x2f\x56\x6f\x36\xce\x17\x77\x47\x29\xdf\x04\xca\xc4\x88\xa2\xbb\xb3\xac\xd9\x84\x40\x61\x8e\x32\x9a\x38\x0f\xb3\x18\x84\xa4\x37\x0b\xc2\x7c\x27\xc4\x2d\xe3\x27\xed\xf6\x2d\x31\xd8\x0e\xd1\x1d\x8d\x75\xc8\xdc\x9a\x68\x10\x3c\x2b\x50\xa9\x17\x22\xeb\x23\x44\x02\x15\xc6\x91\xe5\xde\x64\xbe\x5e\x8c\x5b\x35\x7c\xb5\x58\x9a\xf9\x04\x64\xd0\xab\xc7\x3f\x83\xdb\x8d\xf8\x6a\x7e\xbd\x80\x1f\x3f\x5a\xf3\xb1\xff\xbd\xde\xd0\x59\x6b\xd6\x1d\xe2\x65\x9e\x6a\x32\xa5\xc1\x49\x91\x4e\x76\xda\xeb\x0b\x7c\xf8\x4d\x30\xaa\x72\x45\xdb\xfd\x2f\xb3\xc2\xa2\xf0\xb8\x93\x9a\xc4\x6e\x23\x74\xff\x9e\x66\x78\x18\x13\x2c\x9f\x0c\x0f\x12\xc0\x57\x22\xa3\xe2\xe1\x28\xef\x75\x2d\xbf\xdd\x9f\x95\x6d\xf4\x6f\x00\x00\x00\xff\xff\x92\x47\xc7\x33\xc8\x0a\x00\x00")

func sortableJsBytes() ([]byte, error) {
	return bindataRead(
		_sortableJs,
		"sortable.js",
	)
}

func sortableJs() (*asset, error) {
	bytes, err := sortableJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sortable.js", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stylingTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\xd0\x3d\x4e\xc4\x30\x10\x05\xe0\x7e\x4f\x61\xb9\x85\xd8\xd0\x50\xa0\x18\x6a\x0a\x0e\x61\xd9\x13\x67\xc0\x7f\xf2\x8c\x76\xb5\x8a\xf6\xee\x4c\x02\x15\x15\x12\xa5\x5f\xf1\x3d\xcf\xdb\xb6\x08\x0b\x56\x50\x9a\xf8\x9a\xb1\x26\x7d\xbb\x9d\xe6\x02\xec\x55\xf5\x05\x9c\x3e\x23\x5c\x7a\x1b\xac\x55\x68\x95\xa1\xb2\xd3\x17\x8c\xbc\xba\x08\x67\x0c\x30\x1d\x8f\x7b\x85\x15\x19\x7d\x9e\x28\xf8\x0c\xee\xd1\x3c\xe8\x97\xd3\x2c\xde\xa7\x1a\x90\xdd\x81\x03\xad\x00\xe2\xac\x03\x16\xa7\x57\xe6\x4e\xcf\xd6\x12\xb7\xe1\x13\x98\xd4\x5a\xca\xe0\x3b\x92\x09\xad\xd8\xd0\xa2\x64\xc0\x25\x66\x83\xcd\x0a\x68\x9e\x6c\xf1\x0c\x43\x5a\x0c\xd6\x88\xa9\x4d\x5d\x7c\x53\xb0\x9a\x40\xb4\xf7\x51\x18\xd8\x59\xd1\x08\xff\xf4\x77\xf3\x43\xc8\xd9\x7e\x93\x7f\xbc\x65\x91\x85\xe8\x77\x13\xca\x6e\xaf\x8b\x2f\x98\xaf\xee\xfd\xa7\xe0\xee\x4d\xc2\xfd\xcb\xdb\x06\x35\xca\xe2\x5f\x01\x00\x00\xff\xff\x26\x75\xc0\xb2\x87\x01\x00\x00")

func stylingTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_stylingTmplHtml,
		"styling.tmpl.html",
	)
}

func stylingTmplHtml() (*asset, error) {
	bytes, err := stylingTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "styling.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"badquery.tmpl.html":     badqueryTmplHtml,
	"benchmarks.tmpl.html":   benchmarksTmplHtml,
	"footer.tmpl.html":       footerTmplHtml,
	"home.tmpl.html":         homeTmplHtml,
	"nobenchmarks.tmpl.html": nobenchmarksTmplHtml,
	"runs.tmpl.html":         runsTmplHtml,
	"sortable.css":           sortableCss,
	"sortable.js":            sortableJs,
	"styling.tmpl.html":      stylingTmplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"badquery.tmpl.html":     &bintree{badqueryTmplHtml, map[string]*bintree{}},
	"benchmarks.tmpl.html":   &bintree{benchmarksTmplHtml, map[string]*bintree{}},
	"footer.tmpl.html":       &bintree{footerTmplHtml, map[string]*bintree{}},
	"home.tmpl.html":         &bintree{homeTmplHtml, map[string]*bintree{}},
	"nobenchmarks.tmpl.html": &bintree{nobenchmarksTmplHtml, map[string]*bintree{}},
	"runs.tmpl.html":         &bintree{runsTmplHtml, map[string]*bintree{}},
	"sortable.css":           &bintree{sortableCss, map[string]*bintree{}},
	"sortable.js":            &bintree{sortableJs, map[string]*bintree{}},
	"styling.tmpl.html":      &bintree{stylingTmplHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
