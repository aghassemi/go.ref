// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Source: types.vdl

// Packages stats defines the non-native types exported by the stats service.
package stats

import (
	// VDL system imports
	"v.io/v23/vdl"
)

// HistogramValue is the value of Histogram objects.
type HistogramValue struct {
	// Count is the total number of values added to the histogram.
	Count int64
	// Sum is the sum of all the values added to the histogram.
	Sum int64
	// Min is the minimum of all the values added to the histogram.
	Min int64
	// Max is the maximum of all the values added to the histogram.
	Max int64
	// Buckets contains all the buckets of the histogram.
	Buckets []HistogramBucket
}

func (HistogramValue) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/stats.HistogramValue"`
}) {
}

func (m *HistogramValue) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_types_v_io_x_ref_services_stats_HistogramValue == nil || __VDLTypetypes0 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	var2 := (m.Count == int64(0))
	if !var2 {
		keyTarget3, fieldTarget4, err := fieldsTarget1.StartField("Count")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {
			if err := fieldTarget4.FromInt(int64(m.Count), vdl.Int64Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget3, fieldTarget4); err != nil {
				return err
			}
		}
	}
	var5 := (m.Sum == int64(0))
	if !var5 {
		keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Sum")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {
			if err := fieldTarget7.FromInt(int64(m.Sum), vdl.Int64Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
				return err
			}
		}
	}
	var8 := (m.Min == int64(0))
	if !var8 {
		keyTarget9, fieldTarget10, err := fieldsTarget1.StartField("Min")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {
			if err := fieldTarget10.FromInt(int64(m.Min), vdl.Int64Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget9, fieldTarget10); err != nil {
				return err
			}
		}
	}
	var11 := (m.Max == int64(0))
	if !var11 {
		keyTarget12, fieldTarget13, err := fieldsTarget1.StartField("Max")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {
			if err := fieldTarget13.FromInt(int64(m.Max), vdl.Int64Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget12, fieldTarget13); err != nil {
				return err
			}
		}
	}
	var var14 bool
	if len(m.Buckets) == 0 {
		var14 = true
	}
	if !var14 {
		keyTarget15, fieldTarget16, err := fieldsTarget1.StartField("Buckets")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {

			listTarget17, err := fieldTarget16.StartList(__VDLTypetypes1, len(m.Buckets))
			if err != nil {
				return err
			}
			for i, elem19 := range m.Buckets {
				elemTarget18, err := listTarget17.StartElem(i)
				if err != nil {
					return err
				}

				if err := elem19.FillVDLTarget(elemTarget18, __VDLType_types_v_io_x_ref_services_stats_HistogramBucket); err != nil {
					return err
				}
				if err := listTarget17.FinishElem(elemTarget18); err != nil {
					return err
				}
			}
			if err := fieldTarget16.FinishList(listTarget17); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget15, fieldTarget16); err != nil {
				return err
			}
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *HistogramValue) MakeVDLTarget() vdl.Target {
	return nil
}

func (m *HistogramValue) IsZero() bool {

	var1 := true
	var2 := (m.Count == int64(0))
	var1 = var1 && var2
	var3 := (m.Sum == int64(0))
	var1 = var1 && var3
	var4 := (m.Min == int64(0))
	var1 = var1 && var4
	var5 := (m.Max == int64(0))
	var1 = var1 && var5
	var var6 bool
	if len(m.Buckets) == 0 {
		var6 = true
	}
	var1 = var1 && var6
	return var1
}

// HistogramBucket is one histogram bucket.
type HistogramBucket struct {
	// LowBound is the lower bound of the bucket.
	LowBound int64
	// Count is the number of values in the bucket.
	Count int64
}

func (HistogramBucket) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/services/stats.HistogramBucket"`
}) {
}

func (m *HistogramBucket) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_types_v_io_x_ref_services_stats_HistogramBucket == nil || __VDLTypetypes2 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	var2 := (m.LowBound == int64(0))
	if !var2 {
		keyTarget3, fieldTarget4, err := fieldsTarget1.StartField("LowBound")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {
			if err := fieldTarget4.FromInt(int64(m.LowBound), vdl.Int64Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget3, fieldTarget4); err != nil {
				return err
			}
		}
	}
	var5 := (m.Count == int64(0))
	if !var5 {
		keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Count")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {
			if err := fieldTarget7.FromInt(int64(m.Count), vdl.Int64Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
				return err
			}
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *HistogramBucket) MakeVDLTarget() vdl.Target {
	return nil
}

func (m *HistogramBucket) IsZero() bool {

	var1 := (*m == HistogramBucket{})
	return var1
}

func init() {
	vdl.Register((*HistogramValue)(nil))
	vdl.Register((*HistogramBucket)(nil))
}

var __VDLTypetypes2 *vdl.Type = vdl.TypeOf((*HistogramBucket)(nil))
var __VDLTypetypes0 *vdl.Type = vdl.TypeOf((*HistogramValue)(nil))
var __VDLTypetypes1 *vdl.Type = vdl.TypeOf([]HistogramBucket(nil))
var __VDLType_types_v_io_x_ref_services_stats_HistogramBucket *vdl.Type = vdl.TypeOf(HistogramBucket{})
var __VDLType_types_v_io_x_ref_services_stats_HistogramValue *vdl.Type = vdl.TypeOf(HistogramValue{})

func __VDLEnsureNativeBuilt_types() {
}
