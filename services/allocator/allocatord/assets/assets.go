// Copyright 2016 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package assets contains template strings and other assets for the allocatord web interface.
//
// This package is auto-generated by "jiri go generate v.io/x/ref/services/allocator/allocatord"
// which in-turn uses https://github.com/jteeuwen/go-bindata/
// Code generated by go-bindata.
// sources:
// bad-request.tmpl.html
// dash.js
// dashboard.tmpl.html
// error.tmpl.html
// head.tmpl.html
// header.tmpl.html
// home.tmpl.html
// root.tmpl.html
// style.css
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _badRequestTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\x41\x0a\x02\x31\x0c\x00\xef\xfb\x8a\xf8\x00\x5b\xbc\x4a\xe8\x41\xf0\x2e\xfe\xa0\x9a\x40\x17\x56\x5b\x6b\x44\x96\xd2\xbf\xdb\x36\x7a\xf0\x14\x3a\x9d\x21\xc1\x0d\xc5\xab\xac\x89\x21\xc8\x6d\x71\x13\xfe\x06\x7b\x72\x13\x00\xca\x2c\x0b\xbb\x83\x27\x38\xf3\xe3\xc5\x4f\x41\xab\x68\x42\xab\x12\x5e\x22\xad\xc3\x0d\xbb\x7f\xb1\xbd\x3b\x4e\x99\xfb\x04\x28\xc5\x9c\xbc\x84\x5a\x3b\xb5\x5f\x5c\xca\x7b\x96\x00\xe6\x98\x73\xcc\xb0\xd5\xcf\xa4\xc1\x60\xfb\xde\xd5\x6a\x34\xd2\x84\xef\xd4\x44\xb4\xba\xba\x6d\x1a\x57\x7f\x02\x00\x00\xff\xff\xe0\x6f\x86\xe4\xcd\x00\x00\x00")

func badRequestTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_badRequestTmplHtml,
		"bad-request.tmpl.html",
	)
}

func badRequestTmplHtml() (*asset, error) {
	bytes, err := badRequestTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bad-request.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dashJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x57\xdd\x53\xdb\x38\x10\x7f\xe7\xaf\xd8\xb6\xdc\xd8\xb9\x0b\x6e\xa0\x1d\xda\x09\xd3\xb9\xa1\x09\x57\x32\x57\x3e\x4a\x42\xef\x81\x61\x3a\xc2\x52\x6c\xb5\xb2\xe4\x4a\x32\x90\xde\xe4\x7f\xbf\x95\xbf\x9d\x98\xf6\x78\x30\xf1\xee\xfe\x76\x57\xfb\xa5\xf5\xcb\x97\x30\x51\xe9\x4a\xf3\x28\xb6\x70\x30\xda\x3f\x84\x45\xcc\xe0\x33\x91\x84\xf2\x2c\x81\xe3\xcc\xc6\x4a\x9b\x00\x8e\x85\x80\x5c\xc8\x80\x66\x86\xe9\x7b\x46\x83\x1d\x04\x5f\x1b\x06\x6a\x09\x36\xe6\x06\x8c\xca\x74\xc8\x20\x54\x94\x01\xbe\x46\xea\x9e\x69\xc9\x28\xdc\xad\x80\xc0\xfb\xf9\x74\xcf\xd8\x95\x60\x0e\x25\x78\xc8\x24\x22\x6d\x4c\x2c\x84\x44\xc2\x1d\x83\xa5\xca\x24\x05\x2e\x91\xc8\xe0\xe3\x6c\x72\x72\x3e\x3f\x81\x25\x17\x2c\xd8\xd9\xb9\x27\x1a\x28\x31\x31\xbc\x83\x65\x26\x43\xcb\x95\xf4\x07\xf0\xef\x0e\x00\x2a\x9b\x12\x4b\x20\x33\x68\xc8\x2a\x88\x98\x64\x9a\x58\xf4\x22\x26\xda\x9a\x00\x45\x1c\x78\x72\x7a\x7c\xb5\x98\x23\xfc\x06\x09\x90\x23\xdd\x9f\xe5\x56\xb0\x31\x78\x1f\x11\x21\xc3\x15\xf8\x89\x19\x78\xc3\x92\x49\x51\xef\xdf\x6c\xd5\xb0\x6b\x0e\xa7\x48\x14\x25\x31\xa7\xad\x87\xbd\x7a\x3f\x5d\xce\xc1\xd7\xec\xfb\xcb\x5e\xb5\x9f\x52\xd3\x55\xf9\x1d\x09\x3f\x53\x37\xb9\xbc\xc6\x80\x93\x88\x81\xff\x5b\x9f\xc2\xf9\xca\xa0\x48\x2e\x71\x19\xda\xae\xee\x30\xcd\xf6\x32\xc7\xd9\x4b\x91\xf5\x33\x2b\x67\x2c\x51\x7a\xf5\x2b\x43\x28\xd5\x6f\x28\x61\xc9\xff\x34\x34\xe5\xe6\xdb\xaf\xcc\x38\x99\x7e\x3b\x14\x39\x5b\x86\xf0\x79\x7b\xb4\x53\x26\x7d\x7a\x7d\x75\xbc\x98\x5d\x9c\xcf\xbf\x2c\x2e\xbe\xcc\x4f\x26\x17\xe7\x53\x57\x02\x85\x1b\xde\x7e\xec\x8d\xe1\xd5\xe1\x68\x54\x68\xf5\x0e\xaa\x77\xf8\x1d\x0e\x4a\xda\xeb\x16\xed\x75\x49\x3b\x6c\xd1\x0e\x4b\xda\x7e\x1b\xbc\x5f\xa1\xf7\x69\x4b\x63\x05\x7f\xd3\x21\xe2\xe3\x0d\xd2\xd7\xb5\xcf\x79\xa1\x7e\xf9\x67\x36\x5d\x9c\xa2\xab\x6f\x46\xa3\xa3\x0e\xe3\xf4\x64\xf6\xe1\x74\x81\x9c\x83\x57\x1b\x9c\xc9\xc5\xc7\x8b\x2b\x64\x78\x2f\x46\xa3\xb7\xaf\xde\xfe\xe5\xd5\x2a\x69\x86\x0d\x81\x1d\x33\x93\x73\x16\x2a\x49\x0d\x4a\x39\x07\x2a\x7c\x82\x8d\x67\x19\x3d\x27\x09\x73\x78\xaf\xa2\x87\x46\x2f\x4b\x02\x52\xaa\xbe\x03\xf6\x68\x35\x09\xed\x25\xd1\x08\xb0\x4c\x9b\xb2\x13\x0b\xd0\x6e\xa6\x05\x82\x76\x03\xfc\xef\x0f\x8e\x72\x7a\xd7\x80\x93\x08\x52\x87\xf6\x3d\xe9\x95\x22\xa5\xad\x36\xcf\x91\x2a\xb6\x66\x36\xd3\xb2\xa3\xe8\xd9\xbb\x77\x80\x03\x83\x2d\x39\x8e\x18\x27\xb5\xde\x29\xc6\xc1\x9c\xe1\x8c\xca\x52\x88\x89\xa4\x02\xdd\xc3\xc1\xa2\xdd\x34\x90\x11\x97\x51\x1d\x8c\xa0\x7d\x24\x83\xea\xd3\x69\xc9\x99\x28\x69\xb5\x12\x08\xad\x0f\xb6\xeb\x7b\x2f\x2a\xa0\xf1\x06\x41\x18\x73\x41\x35\xc3\x19\x14\x84\x38\xca\xbe\xf9\x1b\x43\xc9\xfd\xa1\x27\x18\x22\x9c\x71\x15\x10\x04\xb9\x63\x02\xd0\x2b\x67\x6f\x3b\x2b\x41\x55\xfe\x3d\xe9\xea\xab\xe4\x9b\x5d\xdf\x4d\xdd\x41\x60\x31\x23\xfe\xe0\xf6\xa8\xc4\x67\x29\x36\x10\x73\xb1\x6f\x3c\xb9\xce\x69\x70\x3d\xab\x8c\xe0\x89\x82\xca\xd0\x1e\xb7\x2c\x09\x0c\x13\x2c\xc4\xe0\xe2\xf1\xac\x8a\x22\xc1\x26\x82\x18\xe3\x7b\x0d\xfd\xa8\xc6\x96\x76\x7f\x26\xb6\x1e\xb4\x73\xf2\xc1\xe5\xc4\xf5\x75\x7e\xfc\xc2\x43\xd3\x1a\xd1\x75\x26\x2a\xe7\x5b\x81\x17\x0a\xaf\x22\x19\xed\xe5\xe1\x43\xef\x4c\xac\x1e\xaa\xca\x72\x15\x97\x97\x8b\xa9\xfb\x1a\x40\x8e\xdb\x85\x52\x4f\x95\xf1\x76\x64\x2b\x9e\x2b\xb5\x71\xfe\x2c\x7c\x3f\xaa\x8d\x33\xad\x95\xde\x4b\x4c\x84\x86\x63\x4e\x59\x65\x78\x37\x20\x5f\xc9\x23\x1e\xdb\x12\x6b\xfe\xf4\xe0\x0f\xa4\x14\x75\x5b\xb8\x33\x18\x94\xaa\x01\x02\xaa\x24\x6b\x2a\xc4\x45\xa1\xa9\x92\x26\x61\x93\x3c\x18\x05\xfb\xa8\xe6\xae\x5b\x7a\x96\x84\x8b\x56\xa5\xb5\x55\x6c\xba\xda\x8e\xd1\xa6\x9a\x50\x25\xa9\xc0\xc6\xed\x2b\xda\xa7\x62\xde\x3e\xfa\x76\x76\xaf\xcb\x7c\x12\xdc\x11\x9e\xcc\x69\xfb\x7c\xa5\xbd\xe2\x52\x0e\xb0\x3f\x4f\x48\x18\x37\xfe\xe4\x3a\x1a\xa7\xf2\x59\x84\xf9\x95\xec\xa1\xe5\x66\xa4\x14\x56\x5f\x70\xcf\x4d\x46\x04\xff\x51\x34\xf5\xb1\x66\x24\x37\xe4\x53\x15\x66\x09\x93\x36\x88\x98\x3d\x11\xcc\xfd\x7c\xbf\x9a\xd1\x42\x77\xc0\xe9\xa0\x3e\x8d\x53\xaf\xd2\xbc\xb5\x5b\x45\x54\xdf\x52\x05\x20\x7f\x19\x76\x79\x0b\xec\xbb\xb9\xdb\x68\xc6\x9d\xf8\x2d\x71\x7e\xcc\xf9\x0f\xa4\xee\xbf\x6e\x10\xeb\xe6\xe7\x03\xa7\x36\x1e\xb7\x27\x7d\xc3\x8b\x99\xdb\xb1\xc6\x9d\x69\xdf\x70\x05\xc3\xf5\x86\x76\xcd\xa5\xca\x70\xe7\x3c\xde\x88\x12\x0b\xcd\xeb\xb3\x88\xfb\x1a\x67\xa6\x8b\x1b\x75\x5f\xb1\x09\x94\x50\x7a\xdc\xbe\x4d\x5a\xec\x75\x9f\xda\xf8\xf8\x91\x6f\x68\x4d\xb8\xfc\x4c\x44\x86\x87\xc7\x6c\xb9\xcd\x8c\xe5\x19\x0f\xce\xb8\x5c\x70\x9c\xda\x78\x3b\x8e\x46\xa3\xc1\xb0\x0d\x21\x8f\xfd\x10\xf2\xf8\x14\x24\xd2\x9c\x0a\x9c\xfb\x66\xfb\x0c\xd8\xf7\x63\xd8\xdb\x1f\x76\xc8\x99\xe4\x76\x4b\xd6\x2d\x1a\x2b\x47\xc5\xfa\x4b\x08\xa2\x6e\xbc\xb3\xb3\x33\xa0\xd4\xbb\x5d\x0f\x37\x24\x63\xdc\x6c\xbb\xa2\xf1\x38\x49\x80\x78\x43\xf0\x62\xfc\xb7\x8d\x48\xb8\x10\xdc\x14\x63\xa6\x0f\x78\xbb\xee\x00\x3a\xf8\x56\xb0\xcb\x5f\xeb\xaa\x58\xc3\x80\x6a\xf2\xe0\x63\x19\xb8\xad\x77\x41\xee\x44\x11\xad\x9b\xa2\x4c\xcb\xd5\xe9\x76\x30\xac\x4a\xfa\x89\x71\x5c\x2c\xc9\x06\x6a\x2d\xa0\xee\xbe\xe2\x00\x87\xa5\x56\x49\xbe\x81\x47\xfc\x9e\x49\xac\x2e\x2e\x37\xda\xb9\x63\xbb\xe0\xb7\x17\x00\x6a\xa1\xe8\xd5\xfe\x0e\x6d\xa0\xa5\x67\xd4\x06\x84\xd2\x89\x12\x59\x22\x7d\xcf\x4d\x0a\x8b\x59\x77\x81\xf5\x7a\x25\x64\x96\xdc\x31\xdd\xe6\xf3\x25\x6c\xf8\x51\x61\xae\xd4\x83\x29\x59\x41\x42\xd2\x66\xc2\xa4\xb6\x3d\xf3\xca\xed\xe2\xa6\xae\xbf\xd4\x06\xae\xf4\x70\xb8\x27\x69\x5d\x7f\x80\xd4\xbc\x50\xeb\x9b\x76\x5d\x0d\x91\x35\x30\x81\x37\xfd\x96\x71\xbf\x51\x89\xf8\xd1\x6d\x25\xde\xde\x69\xa8\xad\x33\x53\x87\x98\x63\xbd\xd6\x53\xd9\x1d\xef\x59\xcf\xd2\xd5\x9c\x80\xe0\xae\x62\x7d\xef\xb9\x7c\xee\x3e\xbb\xf0\x73\x23\xe3\x1a\xbf\x86\xdc\xde\xc3\x25\x1e\x42\xe2\x47\x59\x79\x23\x82\x44\x7c\x73\x95\x17\x3e\xb4\x9c\xda\xed\xbb\x15\x9e\x5c\x8f\xb6\x57\x8e\xe2\xbd\xd9\x38\x18\x7e\x02\xae\xdc\x54\xc8\x2c\x0b\x1a\x75\x33\xf4\x45\xdf\x13\xe1\x17\xc8\x21\xe0\x3a\x8a\x31\xde\xaa\xd5\x32\x46\x65\x20\x30\x2a\xe3\xfc\x59\x6c\xcc\x6b\x67\xf0\xbf\x00\x00\x00\xff\xff\x94\x84\x2d\xfe\xc0\x0e\x00\x00")

func dashJsBytes() ([]byte, error) {
	return bindataRead(
		_dashJs,
		"dash.js",
	)
}

func dashJs() (*asset, error) {
	bytes, err := dashJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dash.js", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dashboardTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x5f\x4f\xdb\x3a\x14\x7f\xe7\x53\xf8\xe6\x25\x5c\xd1\xd8\x2d\x70\xef\xa4\x2e\xed\x34\x01\x9b\x90\x10\xa0\xb1\x97\x69\xda\x83\x6b\x9f\x36\x6e\x9d\x38\xd8\x27\x85\x8a\xf1\xdd\xe7\xfc\x69\x69\xa1\xad\x88\x34\xf5\xa1\xc7\xc7\xbf\xf3\x3b\xff\x9d\xf8\x9f\xf3\x9b\xb3\xef\x3f\x6e\x2f\x48\x82\xa9\x1e\x1e\xc4\xf5\x1f\x21\x71\x02\x5c\x96\x82\x17\x51\xa1\x86\xe1\xd3\x13\xbd\x03\x3b\x07\x7b\xcd\x53\x78\x7e\x26\xe7\xdc\x25\x23\xc3\xad\x8c\x59\x0d\x38\xa8\xd1\x5a\x65\x33\x92\x58\x18\x0f\x42\xc6\xc6\x26\x43\x47\x27\xc6\x4c\x34\xf0\x5c\x39\x2a\x4c\xca\x84\x73\x9f\xc6\x3c\x55\x7a\x31\xb8\x33\x85\x15\x70\x74\x66\x24\x1c\xdd\x5a\xd3\x3f\xed\x76\x3b\xff\x75\xbb\xbf\xbf\x99\x91\x41\xd3\xf7\x62\xc7\xab\x14\x72\xad\x44\xe7\xa4\xbe\x7c\x39\x35\x92\x47\x84\x95\x6f\x42\x2c\xe8\x41\xe8\x70\xa1\xc1\x25\x00\xb8\x54\xe3\x22\x87\x41\x88\xf0\x88\xa5\xf3\xb0\xc9\xcb\x09\xab\x72\x24\xce\x8a\x41\x90\x20\xe6\xae\xcf\x18\x9f\xf2\xc7\xd7\xf1\x96\x3a\xa6\xd5\xc8\xb1\xe9\x7d\x01\x76\xc1\x8e\xa9\xff\x35\x07\x9a\xaa\x8c\x4e\x5d\x30\x8c\x59\xcd\xb7\x87\x5c\xc8\x6c\xea\x29\xb5\x29\xe4\x58\x73\x0b\x5b\xd9\xa3\xc2\xea\x28\xe7\xd6\x81\xf5\x8e\x4e\x68\x8f\xe5\x5e\xf3\xf7\xdd\x08\x63\x66\x0a\x58\x8f\x9e\x7a\x17\x4d\x2e\xb5\x6e\x97\xaf\x97\xce\x06\x0e\x39\x2a\xc1\xaa\x4a\x53\x5f\xd2\xa0\xaa\x7c\xf0\x52\xf9\x60\x4b\x7c\x8d\x91\xf4\x83\xb3\x27\x95\xaa\x57\x41\xd5\xab\x29\x9f\xf3\x5a\x1b\x6c\x66\xf8\xf0\xf0\x40\x27\x35\x5d\x3d\x51\x09\xb7\xe8\x98\x36\x5c\x82\x6d\xcd\x3d\x6c\xa6\xa4\x6e\x3b\xad\xc9\x68\x49\x76\x18\x8a\xc2\x5a\xc8\x30\xec\x90\xa7\x9c\x8b\x19\x9f\x80\xeb\x93\x9f\xa1\x30\x16\x2a\x5c\xf8\xeb\xf9\xdf\x8f\x5b\xed\x1d\xe0\x4d\x76\xe5\x49\xce\xb8\xd6\x23\x6f\x7b\x58\x25\xae\x32\x85\x8d\xc5\x7a\x8c\x31\x5b\x2e\x5c\x3c\x32\x72\xd1\x84\x2d\xd5\x9c\x28\x39\x08\x84\x5f\x23\xae\x32\xb0\xab\x58\x57\x57\xa5\xd9\x9a\x7e\xed\xa6\xda\xca\x60\xdf\xde\x7a\xe4\xa6\x5d\x09\xbe\xcc\x7c\x61\x33\xe1\xa1\x5b\x00\x15\x31\xa4\x5c\xe9\x8a\xf8\xa2\x94\x5e\x01\x37\x0f\xab\x0c\xaa\xa2\xbc\x0e\x53\x68\xee\x5c\x73\x19\x54\x38\xcd\x11\x32\xb1\x28\x1b\xf8\xd6\xf9\x5b\xf8\x7d\xee\xde\x0b\x15\x79\x11\x15\xce\x37\x30\xca\x05\xbe\xd7\x28\x85\xb4\xbd\x91\x54\x6e\xb6\xd3\x6a\xed\xb0\x2e\x2e\xeb\x24\x0b\xeb\xa7\xda\x64\x2e\xda\xd3\xf3\x72\x34\x55\x36\x89\x34\x1f\x81\x6f\xc4\xd5\xcd\xe7\xf3\xcb\xeb\xaf\x94\xd2\xed\xb5\x5f\x71\xee\x28\xff\xf2\x3e\x52\x08\x29\x71\xa0\x41\x20\xc8\x60\xd8\x4b\xf6\xe4\xbb\x61\x14\x0c\x8f\x5b\x60\x4f\x5b\x60\xff\x6f\x81\xed\xb5\x09\xa2\xb7\x6d\xfe\x77\x60\x3f\xc8\x36\x2d\x04\x6b\x8d\x8d\x52\x37\x59\x95\xfb\x8b\xdf\x12\x90\x04\x8d\x7f\x25\xd1\x2a\x98\x03\x91\x1c\x39\x25\xb7\xfe\x2b\xe3\x80\xa0\x5d\x10\x3e\xf1\xcd\x26\xe5\xf8\x5b\xba\x49\x1d\xb3\xfa\x45\xf0\x4f\x44\xf5\x71\xfe\x13\x00\x00\xff\xff\x77\x5e\x73\xb4\xb4\x07\x00\x00")

func dashboardTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardTmplHtml,
		"dashboard.tmpl.html",
	)
}

func dashboardTmplHtml() (*asset, error) {
	bytes, err := dashboardTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errorTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x3d\xc5\xd8\xbd\x0d\xdd\xca\x18\x70\x21\xb8\x10\x04\xc1\x03\xd4\x66\x24\x85\xb6\x29\x43\x44\x4a\xc8\xdd\x4d\x32\x76\xe1\xea\x93\xff\xdf\x83\x09\xee\x8c\xeb\xfd\xba\x10\x58\x3f\x8d\xba\xc2\x2d\xa8\x33\xba\x02\x40\x3f\xf8\x91\xf4\x99\xd9\x31\x2a\x79\x54\xa8\x64\xc6\xa7\x33\x6b\xa1\x6c\xab\x4f\x33\x14\x0a\x6e\x7d\xff\x66\x26\x93\xa8\xb6\x8c\x0b\x53\x4e\x80\x10\x9a\xc7\xfd\x1a\x63\x2e\xd5\xaf\x0d\xe1\x33\x78\x0b\x8d\xb8\x7b\x19\x17\xe1\x4b\x77\xc8\x5a\x8c\x8d\x48\xa2\xd0\x6c\xfe\x40\xec\xc0\x32\xbd\x8e\x75\x42\x2f\x6e\xa2\x18\x6b\x9d\x13\x55\xa7\x37\x0f\x95\x5c\x9b\xce\x2a\x5f\xfc\x06\x00\x00\xff\xff\x96\xa3\xfc\xdf\xfa\x00\x00\x00")

func errorTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_errorTmplHtml,
		"error.tmpl.html",
	)
}

func errorTmplHtml() (*asset, error) {
	bytes, err := errorTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _headTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x51\x6f\xda\x3c\x14\x7d\xff\x7e\x05\xf2\xf7\xc0\x43\x09\x09\x01\x42\xa9\x96\x4e\x53\x9f\xf6\x56\x6d\xfb\x03\x8e\x73\x81\xab\x26\x71\x14\x3b\xc5\x2c\xe3\xbf\xef\x3a\x46\x30\x68\xbb\x91\x08\x24\x2b\xf6\xf5\x3d\xe7\xdc\x63\x5b\x36\x4d\x93\xc2\x0a\x0b\x18\xb0\x0d\xf0\x94\xed\xf7\xff\x0d\x06\x9f\x72\xd0\x9c\xbe\xf4\x2b\x78\x0e\x31\x7b\x45\xd8\x96\xb2\xd2\xcc\x05\x85\x2c\x34\x14\x3a\x66\x5b\x4c\xf5\x26\x4e\xe1\x15\x05\x78\xed\x60\xe4\x32\x8e\x3f\x2c\x50\x23\xcf\x3c\x25\x78\x06\xf1\xe4\x72\x3a\xe7\x06\xf3\x3a\xff\x68\xba\x56\x50\xb5\x73\x3c\xa1\xe9\x42\xbe\x81\x13\x7d\x4e\xec\x35\xb2\xc7\xf7\xea\xe6\x65\x99\x81\x97\xcb\x04\xe9\xb3\x85\xc4\xa3\x80\x27\x78\x69\xe9\x2e\xbd\xec\x40\x11\xc9\xd5\x2c\x4a\x73\x5d\x2b\x2f\xe1\x54\xa0\xde\xbd\xa5\x4b\x32\x2e\x5e\x2c\xa1\x65\xcc\xb0\x78\x19\x6c\x2a\x58\xc5\x43\xdf\x5f\x51\x8a\x1a\xaf\xa5\x5c\x67\xc0\x4b\x54\x63\x21\x73\x5f\x28\xf5\x79\xc5\x73\xcc\x76\xf1\x77\x59\x57\x02\xee\x9e\x64\x0a\x77\xcf\x95\x7c\x98\x05\xc1\x68\x1e\x04\xbf\xbe\xc9\x44\x6a\xf9\x40\xdd\x11\x85\x50\xf3\x0c\xc5\x68\xea\x26\x4f\xa3\x43\x8f\x32\x86\x6d\x45\x15\x64\xf1\xb0\xad\x50\x6d\x00\xb4\x0b\xea\x5d\x09\xf1\x50\x83\xd1\x56\x78\xf8\x78\x2a\xd2\xa6\xb3\x53\x3a\x73\x55\xb3\xa6\x19\x7f\x51\x0a\xb4\x7a\xa6\x21\x9a\xfd\xde\xc7\x94\x6c\xa2\xde\x8d\x89\x80\x5d\x12\xb8\x15\xd3\xb2\x16\x1b\x0f\x69\x49\xd8\x40\xe1\x4f\x50\x31\x9b\x2f\xcc\x7c\xf1\x31\xe9\x8a\xbf\xda\x74\xe5\x5f\x12\x78\x2d\x70\x5c\x16\x6b\xb7\xd1\x57\x48\x4d\x26\x33\x43\xad\x8f\xd8\x01\xda\x49\x6e\x11\x9a\x45\xd8\x47\xac\x05\x76\x73\x36\xa3\xf2\x66\xfd\x9c\x39\x68\x27\xb9\x28\x30\x51\xd0\x47\xac\x05\x76\x73\x16\x06\x86\x5a\x2f\x67\x0e\xda\x6d\xcf\x22\xb3\x88\x7a\xed\x99\x05\x76\x73\x36\x0f\x0d\xb5\x5e\xce\x1c\xb4\x9b\xdc\x3d\xad\xc6\x7d\xbf\x85\x74\xd0\xf7\xe4\x9c\x44\x7b\x79\x30\xba\x77\xd7\xe0\xdb\xa4\x7f\x6b\x1c\x3a\xde\x64\x49\x4e\x96\xce\xc9\xb1\x52\x17\xbb\xb9\x14\x1d\xbe\xc9\xe1\xf4\x1d\xa5\x5c\xec\xd6\x52\xcb\xc8\x2c\xa3\x33\xa1\x36\x72\x7b\x47\x54\xfc\x85\x1f\x8a\xdc\x5a\x66\x1a\x9a\xe9\xf9\x0e\xb5\x91\xd3\xfb\x7a\x78\x14\x73\x65\x4f\x0e\x0a\xae\x91\x50\x3f\xe8\x69\x7c\x92\x99\xac\xd8\xe9\x05\xfc\x3f\xe5\xf3\x69\x28\xae\x40\x7e\xb5\x75\xfe\x81\xfc\x4b\x99\xb9\xd2\xf6\x15\x3e\xbf\xc7\x9a\x06\x8a\x94\xfe\xb9\xfc\x0e\x00\x00\xff\xff\x0c\x31\x0b\x6b\xcc\x08\x00\x00")

func headTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_headTmplHtml,
		"head.tmpl.html",
	)
}

func headTmplHtml() (*asset, error) {
	bytes, err := headTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "head.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _headerTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x31\x6e\xc6\x20\x0c\x46\xf7\x9e\xc2\x72\xe7\x86\x0b\x90\x48\x1d\xba\x76\xa9\xd4\xdd\x0a\x26\x41\x22\x50\x01\xcd\x62\x71\xf7\xd2\x26\xa4\xbf\x94\x0d\x7f\xcf\x96\x1f\x16\x31\x6c\x5d\x60\xc0\x95\xc9\x70\xc2\x5a\x9f\x00\xf4\x51\x4c\xed\xd9\x8a\x40\x3b\xcc\x9e\x72\x1e\xd1\xb3\x2d\x78\xc4\x0d\x10\xac\x89\xed\x88\xcf\x78\xf1\xb8\x44\x9c\x3e\x29\x90\x71\xdf\x9b\x56\x74\xf5\xe6\x2f\x0a\xbd\x2b\x73\xda\xdd\xcc\x2f\x81\x36\xc6\x49\xa4\xb8\xe2\x19\x86\x8f\x16\x73\x7a\x6f\x61\xad\xf0\xea\x7d\x9c\xa9\xc4\xa4\xd5\xef\xe8\xa9\xa2\x9a\xcb\xdd\x2a\xb9\x65\xfd\xd7\x12\x71\x16\x86\xb7\x8d\x9c\xff\xfb\xcc\x4d\xb6\x6d\xec\xf8\xc1\x50\x84\x83\x39\x07\xae\x3d\x5a\xf5\x4b\x74\xfc\x13\x00\x00\xff\xff\xe2\x89\x41\x0f\x31\x01\x00\x00")

func headerTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_headerTmplHtml,
		"header.tmpl.html",
	)
}

func headerTmplHtml() (*asset, error) {
	bytes, err := headerTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "header.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x5d\x8f\xdb\x36\x10\x7c\xf7\xaf\xd8\x10\x01\x94\x43\x4e\x12\xd2\xbc\xa5\x92\x80\xa6\x0d\xd0\x00\x39\x17\x68\xd3\x02\x7d\x2a\x28\x71\x6d\x11\xa6\x49\x81\xa4\xec\xaa\x82\xff\x7b\x97\xfa\xb2\xae\xb0\x5b\x5c\x9f\x7c\x94\x46\xb3\x33\x3b\xdc\xbd\xec\x95\x30\x95\xef\x1a\x84\xda\x1f\x55\xb1\xc9\xe6\x1f\xe4\xa2\xd8\x00\x64\x5e\x7a\x85\xc5\x6f\x5c\x73\x21\xdb\x23\xf4\xfd\xf0\x00\x92\x5f\xd0\x9e\xd0\x6e\xf9\x11\x2f\x17\xf8\x4e\x29\x53\x71\x6f\x6c\x96\x8e\x78\xfa\x92\x90\x78\x6c\x14\xf7\x08\x2c\xb0\x31\x48\x2e\x97\x4d\x96\x8e\xcc\xd9\xab\x38\x86\xed\x4f\x5f\x3f\x7d\x80\x33\x42\x54\x1a\x6b\xcd\x39\x02\x0e\xca\x78\x30\x3b\xf0\x35\x82\xf3\x9d\x92\x7a\x1f\x8e\x52\xa0\x26\xe6\x4e\x3c\x42\x8d\xba\xc2\xf0\x7e\xe3\xb0\x6a\x2d\x3d\x8c\x2d\x86\x32\x02\x3c\xda\xa3\xd4\x46\x99\x7d\x07\x52\x2f\x1c\x08\xa8\xf0\x48\x04\xee\x11\x94\x3c\xe0\xc2\x06\x5c\x8b\x4d\xa9\xd0\x39\x2a\x93\x40\x1c\x93\xae\xd2\x88\x0e\x2a\xc5\x9d\xcb\xd9\x8c\x6b\xac\x39\xd1\xdf\x36\x56\xbc\x33\xad\x67\xb7\xec\xa1\x1d\x0d\x52\xcb\x5c\x65\x65\xe3\x03\x08\x60\xd7\xea\xca\x4b\xa3\xa1\xaa\xb9\xde\xe3\x47\xaf\xdf\x48\x32\xa1\xf1\xfc\xe3\xd7\xa7\x2f\x0f\xd0\x0f\x28\x00\x4a\xa1\x0d\x12\x93\x3d\xfa\x4f\xa3\xda\x8f\xdd\x67\x41\xe0\x87\x44\x6a\x8d\x36\xc0\x21\x07\x96\xed\x8c\xf6\x50\x91\x49\x9b\x47\x7b\xcb\xbb\xa8\x60\x6f\x27\xba\xb7\x2c\x4b\xc3\xeb\x82\x7d\x3b\xd0\x0e\x6a\xd2\xab\x9c\xec\xc8\xa5\x1e\x75\x65\xf5\xbb\xd9\x65\xc3\xf7\x18\x0f\x09\x15\xdf\x5b\x0c\x86\xa8\x2d\xf0\x44\x89\xef\x11\x3e\x6b\xe7\x39\x35\xdc\x85\x14\x6e\x86\x4f\x89\xbe\x9b\x38\x85\x3c\xcd\xa4\x73\x57\x5d\xac\xa4\x1b\x3b\x76\x1f\x32\xf5\x6f\x06\x0d\xea\x8a\xdf\x4d\x6b\x29\xc5\xa9\xfc\xb5\x4a\xb0\x44\x2c\xe3\xa1\xef\x6d\x68\x2b\xbc\x96\x5a\xe0\x9f\x8f\xf0\x7a\x4a\x1a\x3e\xe4\x90\x2c\xda\x87\x58\xee\x97\x97\x94\xe4\xba\xf8\x0d\x50\x2c\xd0\x73\xa9\xdc\x0a\x16\x54\xbe\x2f\xfa\xfe\xd0\x96\x18\x3a\x01\xc9\xd2\x8f\xf7\xcf\x50\xcd\xfa\x44\xe7\xb2\x78\x32\x2d\x49\x0c\xf0\x2c\x2d\x8b\xac\xb4\xcf\x11\x7d\x3f\x51\xad\x59\xd2\x15\xcd\xaa\x01\x77\x05\x5b\x3c\x99\x03\x52\xa6\x2f\x02\xaf\x2b\x72\xa8\x2d\xee\x72\x46\x72\x7e\xe0\xae\x2e\x0d\xb7\xe2\xd7\x9f\xbf\x5c\x2e\x6c\xf9\xbe\xf5\xde\xe8\xb8\xa1\x83\x3c\x21\x03\xcf\x2d\x5d\xdf\x9c\xfd\x51\x2a\xae\x0f\xac\x58\x3e\xcb\x52\xfe\xff\xd4\xd3\xa8\xe6\x4c\xa0\xf3\xd6\x74\x34\x3b\x7d\x3f\x06\x4d\x1a\xee\x4a\x1d\xc1\xff\x2e\xd4\xe8\x4a\xc9\xea\x90\xb3\xeb\x54\x46\xb7\xaa\x44\x8f\x10\x4d\x84\x61\x11\xbd\xf1\xfc\x40\x93\xc0\x61\x87\x67\xa0\xed\x63\xb4\x70\x0f\x90\x24\x49\xf4\x40\x66\x47\xdc\x7d\xab\xcf\xae\x2d\x2a\x77\x0d\x78\x6b\x34\xc2\x8e\x2e\x85\x48\xe6\xd7\x5a\x4c\x6f\xaf\xd7\x27\x73\x0d\xd7\x43\x43\xaa\x61\x4c\x49\x29\xa5\xbb\xb2\x3e\x4e\xef\xcb\x9d\x2f\x74\xc1\xee\x40\xf2\x9f\x66\xa7\x45\xb1\xc5\x73\xf0\x4b\x3b\x86\xa4\x4d\x4b\x60\xbe\xa8\x7d\x7f\x96\xbe\x86\xe4\x89\x22\x0d\x9b\x24\x9e\x0d\xd5\xd3\x75\x5f\x39\x1b\x76\x9a\x93\x7f\x61\xce\xbe\x61\x34\x53\x49\x18\xa3\x61\x93\xfd\x93\x73\xd5\x98\x05\x90\xa5\xe3\x5e\xa3\x61\xa2\xe5\x1d\x7e\xc7\x7f\x62\x7f\x07\x00\x00\xff\xff\x73\x0a\x07\x93\xdc\x06\x00\x00")

func homeTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_homeTmplHtml,
		"home.tmpl.html",
	)
}

func homeTmplHtml() (*asset, error) {
	bytes, err := homeTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rootTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xcd\x6a\xc3\x30\x10\x84\xef\x79\x8a\xad\xee\xb1\xc8\x5d\x11\x94\x5e\x5a\x68\x7b\x29\xf4\xbe\xb5\x36\xb6\x40\xd2\x0a\x59\x09\x18\xe3\x77\xaf\x7e\x92\x5b\x4e\x3b\x98\x99\xcf\x33\x52\x2f\x86\xc7\xbc\x46\x82\x39\x7b\xa7\x0f\xea\x71\x08\x8d\x3e\x00\xa8\x6c\xb3\x23\xfd\x8b\x01\x8d\xbd\x7a\xd8\xb6\xf6\x01\x86\x1f\x4a\x37\x4a\xdf\xe8\x69\xdf\xe1\xd5\x39\x1e\x31\x73\x52\xb2\xfb\x4b\xb2\x38\xc9\x47\x87\x99\x40\x54\x9a\x80\x61\xdf\x0f\x4a\x76\xb2\xfa\x63\xb3\xc2\xe8\x70\x59\xce\xc2\x1a\x0a\x25\xb7\xc6\xc4\xb7\xa2\xd3\xd1\xe1\xca\xd7\x2c\x9e\x61\x28\x35\x50\xeb\xe6\xd1\x86\x2a\x8a\x9c\x4f\x0f\x58\xc4\x89\x8e\xed\x87\xfa\x2d\x51\xcd\x61\x30\xf0\x55\x06\x4c\x04\x1f\x61\xc9\x18\x46\x5a\x80\x2f\xcf\xb7\x94\x82\xa7\x3b\x33\xf6\x5b\x14\xc2\x9c\xe8\x72\x16\xdb\x36\xbc\x73\x75\x09\xfd\xc9\x13\xd8\xa0\x24\xde\xcd\xb2\xb9\x95\xec\x9d\x94\xac\xfb\xea\xed\xef\xf9\x1f\x00\x00\xff\xff\x9f\x7c\x3e\xfd\x67\x01\x00\x00")

func rootTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_rootTmplHtml,
		"root.tmpl.html",
	)
}

func rootTmplHtml() (*asset, error) {
	bytes, err := rootTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "root.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _styleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x55\xcd\x8e\xdb\x36\x10\xbe\xfb\x29\x06\x30\x0a\x24\x41\xe8\xc8\x8e\xb1\xde\x7a\x4f\xae\x9b\x05\x0a\x14\x3d\x34\x6d\xef\x94\x38\x92\xd8\x50\xa4\x40\x52\x6b\x3b\x8b\xbe\x7b\x87\x14\x25\xff\x69\x11\xc3\xb6\xc0\xd1\xfc\x7e\xf3\xcd\xf0\xd3\x07\xd8\x9b\xf6\x64\x65\x55\x7b\x58\x65\xcb\x07\xf8\xab\x46\xf8\x87\x6b\x2e\x64\xd7\xc0\xae\xf3\xb5\xb1\x6e\x01\x3b\xa5\x20\x2a\x39\xb0\xe8\xd0\xbe\xa0\x58\xc0\x87\x4f\x33\xb2\xff\xdb\x21\x98\x12\x7c\x2d\x1d\x38\xd3\xd9\x02\xa1\x30\x02\x81\x8e\x95\x79\x41\xab\x51\x40\x7e\x02\x0e\xbf\x7c\xfd\x95\x39\x7f\x52\x98\x0c\x95\x2c\x50\x93\xb1\xaf\xb9\x87\x82\x6b\xc8\x11\x4a\xd3\x69\x01\x52\x93\x10\xe1\xf7\xdf\xf6\x5f\xfe\xf8\xfa\x05\x4a\xa9\x30\x46\x9b\xe5\x46\x9c\xe0\x75\x06\xa4\xa7\x3d\x2b\x79\x23\xd5\x69\x0b\x7f\x9a\xdc\x78\xf3\x34\x88\x0f\x18\x12\xdd\xc2\x3a\xcb\x46\x59\x8c\xbb\x05\x6d\x6c\xc3\xd5\x28\x2d\x8c\x32\x76\x0b\xf3\xcf\x9b\xf5\x66\xfd\x1c\xc4\x64\x9c\x7f\x93\xe4\x3a\x1a\x35\xc6\x50\x59\xba\xda\x02\xd7\x5e\x72\x25\xb9\x43\x71\xf6\x29\xbf\x93\xcb\xe5\xaa\x3d\x06\x91\x92\x1a\x59\x9d\x42\xaf\xb2\x5e\xd8\x72\x21\xa2\x7d\x3a\x37\xdc\x56\x52\x8f\xc7\x00\x4f\xa9\xcc\x61\x0b\xb5\x14\x02\xf5\xd3\xec\xbf\xd9\x6c\x5e\x90\x73\x4e\xde\x6c\xac\xb4\x35\x4e\x7a\x69\xc8\xa8\x94\xc7\x3e\xba\x90\xae\x55\x9c\x0a\x2f\x15\x46\x3f\xe1\xc9\x84\xb4\x58\xf4\x9a\x54\x57\xd7\xe8\xf0\x66\x48\x68\x99\x65\x3f\x85\xf3\x41\x0a\x5f\x0f\xc7\x10\xac\x46\x2e\x52\xa4\x3b\xb7\xff\x76\xce\xcb\xf2\xc4\x42\x42\xa8\xc9\x8b\x6b\x79\x81\x2c\x47\x7f\x40\x8c\xee\x73\x5e\x7c\xab\x6c\xe8\xd9\x88\x65\x96\x3d\x7e\x7e\x8c\x58\xe6\xe6\xc8\x5c\xcd\x45\xa8\xcf\x56\x39\x7f\x97\x7d\x84\xf4\x5d\xac\xb2\xf7\x01\x04\x20\xf0\x60\x4d\xbf\x04\xc8\x55\x7a\xe7\xec\xd7\x8f\x13\x18\x0f\xc2\x14\xf8\x50\x4b\x8f\xb7\xbd\x79\xe8\x55\xa6\x68\xf1\x9d\x49\x2d\xf0\xb8\x85\x9f\xe9\xf3\x74\x05\x34\xcf\x1d\x01\xd8\x7b\xf3\xa6\x1d\xdb\xa5\xb0\xf4\xe9\x70\x01\x9d\x90\x2f\x11\xbe\xbe\xb7\xac\x57\x5a\x5e\x35\x9c\xd9\xa1\x0b\x37\xb6\x73\x2f\x3d\xcd\xc3\xeb\xb9\xf4\xcf\xd9\x9d\x0e\x36\x5c\xaa\x09\x1d\x4a\x0e\x8f\x9e\x11\x2d\x2b\x4a\x3a\x86\x88\x86\x8b\xa6\x62\x27\xc6\x8f\x34\x80\x41\xe1\x23\x04\xc1\xf1\x2c\x38\x0f\x50\x42\x69\x99\x22\x06\xbd\x0b\x3e\xdc\x01\x99\x54\x38\xb1\xec\x05\x99\xe0\x9e\xb7\x46\xea\x7b\x7f\xab\xa1\x82\xa2\xe6\x96\x36\xc6\x24\xb9\x22\x67\x0f\x96\x13\xbc\xe1\xff\x72\x1c\x18\xa9\xf1\xae\x9f\xe8\x58\xdd\x99\x81\xd1\xca\x79\x72\xfb\x83\x96\x0d\xec\xa0\xcd\xe0\x4d\x73\xee\xda\x22\xe6\x74\xd9\xb0\xa8\xbe\x1a\x51\x17\x9d\xe5\xc1\xa7\x63\x6f\xcd\xe1\x65\xac\x0b\x4a\xdc\xc4\x9a\x1a\x8e\x91\xa3\x86\x06\x49\x7a\x2a\x33\x5b\x3c\xf6\x61\x95\xe1\x61\x53\x30\xc5\x73\xec\x9b\x9d\x76\x47\x22\xd4\xc3\x15\xd9\xe7\xcf\xcf\xeb\xe7\xe5\xee\x26\xe3\x69\xa0\x6f\x77\x52\x6e\x2c\x75\xb8\x2f\x9b\x3a\x4f\x3b\x5b\x49\x01\xf3\x34\x05\xe9\xed\x40\xd8\x9b\xf7\x01\xc0\x21\x1c\xa3\x5a\x9a\xe9\xde\x8f\x4c\x5d\xad\xdb\xc9\x1c\x26\x97\xe5\x25\x9b\xe9\x66\xf0\x68\x63\xc5\x9d\x75\xa1\xe4\x48\xb5\x24\x4a\x20\x6c\x36\x9b\x89\x94\x16\x0e\x15\x2d\x42\xba\x75\x5e\x2f\xcc\x05\x96\xbc\x53\xfe\x87\x4b\xeb\xba\x53\x77\xce\xb7\xda\xf8\x77\x63\x84\xf7\xdb\x3a\x70\x36\x06\x9a\xf0\xba\xdf\xef\xfb\x0e\xa1\xb5\xc6\xb2\xc6\x55\x6f\x6d\xf4\x04\xf7\x34\x8f\xc6\x4b\x64\x58\x96\xe9\xf9\x46\x2d\xbb\x5d\x96\xf5\x2b\xee\x96\x75\x23\x35\xb4\xd1\xb1\xb8\xff\x03\x00\x00\xff\xff\xd0\x09\x6a\xf4\xfe\x07\x00\x00")

func styleCssBytes() ([]byte, error) {
	return bindataRead(
		_styleCss,
		"style.css",
	)
}

func styleCss() (*asset, error) {
	bytes, err := styleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "style.css", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bad-request.tmpl.html": badRequestTmplHtml,
	"dash.js":               dashJs,
	"dashboard.tmpl.html":   dashboardTmplHtml,
	"error.tmpl.html":       errorTmplHtml,
	"head.tmpl.html":        headTmplHtml,
	"header.tmpl.html":      headerTmplHtml,
	"home.tmpl.html":        homeTmplHtml,
	"root.tmpl.html":        rootTmplHtml,
	"style.css":             styleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bad-request.tmpl.html": &bintree{badRequestTmplHtml, map[string]*bintree{}},
	"dash.js":               &bintree{dashJs, map[string]*bintree{}},
	"dashboard.tmpl.html":   &bintree{dashboardTmplHtml, map[string]*bintree{}},
	"error.tmpl.html":       &bintree{errorTmplHtml, map[string]*bintree{}},
	"head.tmpl.html":        &bintree{headTmplHtml, map[string]*bintree{}},
	"header.tmpl.html":      &bintree{headerTmplHtml, map[string]*bintree{}},
	"home.tmpl.html":        &bintree{homeTmplHtml, map[string]*bintree{}},
	"root.tmpl.html":        &bintree{rootTmplHtml, map[string]*bintree{}},
	"style.css":             &bintree{styleCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
