// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Source: service.vdl

// Package rps defines interfaces for playing the game Rock-Paper-Scissors.  It
// is an example of a simple Vanadium service.
//
// http://en.wikipedia.org/wiki/Rock-paper-scissors
//
// There are three different roles in the game:
//
// 1. Judge: A judge enforces the rules of the game and decides who the winner
// is. At the end of the game, the judge reports the final score to all the
// score keepers.
//
// 2. Player: A player can ask a judge to start a new game, it can challenge
// another player, and it can play a game.
//
// 3. ScoreKeeper: A score keeper receives the final score for a game after it
// ended.
package rps

import (
	"fmt"
	"io"
	"time"
	"v.io/v23"
	"v.io/v23/context"
	"v.io/v23/rpc"
	"v.io/v23/security/access"
	"v.io/v23/vdl"
	"v.io/v23/vdl/vdlconv"
	time_2 "v.io/v23/vdlroot/time"
)

// A GameId is used to uniquely identify a game within one Judge.
type GameId struct {
	Id string
}

func (GameId) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/examples/rps.GameId"`
}) {
}

func (m *GameId) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_service_v_io_x_ref_examples_rps_GameId == nil || __VDLTypeservice0 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Id")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Id), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *GameId) MakeVDLTarget() vdl.Target {
	return &GameIdTarget{Value: m}
}

type GameIdTarget struct {
	Value *GameId
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *GameIdTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_service_v_io_x_ref_examples_rps_GameId) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_service_v_io_x_ref_examples_rps_GameId)
	}
	return t, nil
}
func (t *GameIdTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Id":
		val, err := &vdl.StringTarget{Value: &t.Value.Id}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_service_v_io_x_ref_examples_rps_GameId)
	}
}
func (t *GameIdTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *GameIdTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

// GameOptions specifies the parameters of a game.
type GameOptions struct {
	NumRounds int32       // The number of rounds that a player must win to win the game.
	GameType  GameTypeTag // The type of game to play: Classic or LizardSpock.
}

func (GameOptions) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/examples/rps.GameOptions"`
}) {
}

func (m *GameOptions) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_service_v_io_x_ref_examples_rps_GameOptions == nil || __VDLTypeservice1 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("NumRounds")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromInt(int64(m.NumRounds), vdl.Int32Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("GameType")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.GameType.FillVDLTarget(fieldTarget5, __VDLType_service_v_io_x_ref_examples_rps_GameTypeTag); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *GameOptions) MakeVDLTarget() vdl.Target {
	return &GameOptionsTarget{Value: m}
}

type GameOptionsTarget struct {
	Value *GameOptions
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *GameOptionsTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_service_v_io_x_ref_examples_rps_GameOptions) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_service_v_io_x_ref_examples_rps_GameOptions)
	}
	return t, nil
}
func (t *GameOptionsTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "NumRounds":
		val, err := &vdl.Int32Target{Value: &t.Value.NumRounds}, error(nil)
		return nil, val, err
	case "GameType":
		val, err := &GameTypeTagTarget{Value: &t.Value.GameType}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_service_v_io_x_ref_examples_rps_GameOptions)
	}
}
func (t *GameOptionsTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *GameOptionsTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type GameTypeTagTarget struct {
	Value *GameTypeTag
	vdl.TargetBase
}

func (t *GameTypeTagTarget) FromUint(src uint64, tt *vdl.Type) error {
	val, err := vdlconv.Uint64ToUint8(src)
	if err != nil {
		return err
	}
	*t.Value = GameTypeTag(val)

	return nil
}
func (t *GameTypeTagTarget) FromInt(src int64, tt *vdl.Type) error {
	val, err := vdlconv.Int64ToUint8(src)
	if err != nil {
		return err
	}
	*t.Value = GameTypeTag(val)

	return nil
}
func (t *GameTypeTagTarget) FromFloat(src float64, tt *vdl.Type) error {
	val, err := vdlconv.Float64ToUint8(src)
	if err != nil {
		return err
	}
	*t.Value = GameTypeTag(val)

	return nil
}
func (t *GameTypeTagTarget) FromComplex(src complex128, tt *vdl.Type) error {
	val, err := vdlconv.Complex128ToUint8(src)
	if err != nil {
		return err
	}
	*t.Value = GameTypeTag(val)

	return nil
}

type GameTypeTag byte

func (GameTypeTag) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/examples/rps.GameTypeTag"`
}) {
}

func (m *GameTypeTag) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if err := t.FromUint(uint64((*m)), __VDLType_service_v_io_x_ref_examples_rps_GameTypeTag); err != nil {
		return err
	}
	return nil
}

func (m *GameTypeTag) MakeVDLTarget() vdl.Target {
	return &GameTypeTagTarget{Value: m}
}

type (
	// PlayerAction represents any single field of the PlayerAction union type.
	PlayerAction interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the PlayerAction union type.
		__VDLReflect(__PlayerActionReflect)
		FillVDLTarget(vdl.Target, *vdl.Type) error
	}
	// PlayerActionMove represents field Move of the PlayerAction union type.
	PlayerActionMove struct{ Value string } // The move that the player wants to make.
	// PlayerActionQuit represents field Quit of the PlayerAction union type.
	PlayerActionQuit struct{ Value unused } // Indicates that the player is quitting the game.
	// __PlayerActionReflect describes the PlayerAction union type.
	__PlayerActionReflect struct {
		Name  string `vdl:"v.io/x/ref/examples/rps.PlayerAction"`
		Type  PlayerAction
		Union struct {
			Move PlayerActionMove
			Quit PlayerActionQuit
		}
	}
)

func (x PlayerActionMove) Index() int                         { return 0 }
func (x PlayerActionMove) Interface() interface{}             { return x.Value }
func (x PlayerActionMove) Name() string                       { return "Move" }
func (x PlayerActionMove) __VDLReflect(__PlayerActionReflect) {}

func (m PlayerActionMove) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_service_v_io_x_ref_examples_rps_PlayerAction)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Move")
	if err != nil {
		return err
	}
	if err := fieldTarget3.FromString(string(m.Value), vdl.StringType); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m PlayerActionMove) MakeVDLTarget() vdl.Target {
	return nil
}

func (x PlayerActionQuit) Index() int                         { return 1 }
func (x PlayerActionQuit) Interface() interface{}             { return x.Value }
func (x PlayerActionQuit) Name() string                       { return "Quit" }
func (x PlayerActionQuit) __VDLReflect(__PlayerActionReflect) {}

func (m PlayerActionQuit) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_service_v_io_x_ref_examples_rps_PlayerAction)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Quit")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_service_v_io_x_ref_examples_rps_unused); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m PlayerActionQuit) MakeVDLTarget() vdl.Target {
	return nil
}

type unused struct {
}

func (unused) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/examples/rps.unused"`
}) {
}

func (m *unused) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_service_v_io_x_ref_examples_rps_unused == nil || __VDLTypeservice2 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *unused) MakeVDLTarget() vdl.Target {
	return &unusedTarget{Value: m}
}

type unusedTarget struct {
	Value *unused
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *unusedTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_service_v_io_x_ref_examples_rps_unused) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_service_v_io_x_ref_examples_rps_unused)
	}
	return t, nil
}
func (t *unusedTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_service_v_io_x_ref_examples_rps_unused)
	}
}
func (t *unusedTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *unusedTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type (
	// JudgeAction represents any single field of the JudgeAction union type.
	JudgeAction interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the JudgeAction union type.
		__VDLReflect(__JudgeActionReflect)
		FillVDLTarget(vdl.Target, *vdl.Type) error
	}
	// JudgeActionPlayerNum represents field PlayerNum of the JudgeAction union type.
	JudgeActionPlayerNum struct{ Value int32 } // The player's number.
	// JudgeActionOpponentName represents field OpponentName of the JudgeAction union type.
	JudgeActionOpponentName struct{ Value string } // The name of the opponent.
	// JudgeActionMoveOptions represents field MoveOptions of the JudgeAction union type.
	JudgeActionMoveOptions struct{ Value []string } // A list of allowed moves that the player must choose from.
	// JudgeActionRoundResult represents field RoundResult of the JudgeAction union type.
	JudgeActionRoundResult struct{ Value Round } // The result of the previous round.
	// JudgeActionScore represents field Score of the JudgeAction union type.
	JudgeActionScore struct{ Value ScoreCard } // The result of the game.
	// __JudgeActionReflect describes the JudgeAction union type.
	__JudgeActionReflect struct {
		Name  string `vdl:"v.io/x/ref/examples/rps.JudgeAction"`
		Type  JudgeAction
		Union struct {
			PlayerNum    JudgeActionPlayerNum
			OpponentName JudgeActionOpponentName
			MoveOptions  JudgeActionMoveOptions
			RoundResult  JudgeActionRoundResult
			Score        JudgeActionScore
		}
	}
)

func (x JudgeActionPlayerNum) Index() int                        { return 0 }
func (x JudgeActionPlayerNum) Interface() interface{}            { return x.Value }
func (x JudgeActionPlayerNum) Name() string                      { return "PlayerNum" }
func (x JudgeActionPlayerNum) __VDLReflect(__JudgeActionReflect) {}

func (m JudgeActionPlayerNum) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_service_v_io_x_ref_examples_rps_JudgeAction)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("PlayerNum")
	if err != nil {
		return err
	}
	if err := fieldTarget3.FromInt(int64(m.Value), vdl.Int32Type); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m JudgeActionPlayerNum) MakeVDLTarget() vdl.Target {
	return nil
}

func (x JudgeActionOpponentName) Index() int                        { return 1 }
func (x JudgeActionOpponentName) Interface() interface{}            { return x.Value }
func (x JudgeActionOpponentName) Name() string                      { return "OpponentName" }
func (x JudgeActionOpponentName) __VDLReflect(__JudgeActionReflect) {}

func (m JudgeActionOpponentName) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_service_v_io_x_ref_examples_rps_JudgeAction)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("OpponentName")
	if err != nil {
		return err
	}
	if err := fieldTarget3.FromString(string(m.Value), vdl.StringType); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m JudgeActionOpponentName) MakeVDLTarget() vdl.Target {
	return nil
}

func (x JudgeActionMoveOptions) Index() int                        { return 2 }
func (x JudgeActionMoveOptions) Interface() interface{}            { return x.Value }
func (x JudgeActionMoveOptions) Name() string                      { return "MoveOptions" }
func (x JudgeActionMoveOptions) __VDLReflect(__JudgeActionReflect) {}

func (m JudgeActionMoveOptions) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_service_v_io_x_ref_examples_rps_JudgeAction)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("MoveOptions")
	if err != nil {
		return err
	}

	listTarget4, err := fieldTarget3.StartList(__VDLTypeservice3, len(m.Value))
	if err != nil {
		return err
	}
	for i, elem6 := range m.Value {
		elemTarget5, err := listTarget4.StartElem(i)
		if err != nil {
			return err
		}
		if err := elemTarget5.FromString(string(elem6), vdl.StringType); err != nil {
			return err
		}
		if err := listTarget4.FinishElem(elemTarget5); err != nil {
			return err
		}
	}
	if err := fieldTarget3.FinishList(listTarget4); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m JudgeActionMoveOptions) MakeVDLTarget() vdl.Target {
	return nil
}

func (x JudgeActionRoundResult) Index() int                        { return 3 }
func (x JudgeActionRoundResult) Interface() interface{}            { return x.Value }
func (x JudgeActionRoundResult) Name() string                      { return "RoundResult" }
func (x JudgeActionRoundResult) __VDLReflect(__JudgeActionReflect) {}

func (m JudgeActionRoundResult) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_service_v_io_x_ref_examples_rps_JudgeAction)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("RoundResult")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_service_v_io_x_ref_examples_rps_Round); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m JudgeActionRoundResult) MakeVDLTarget() vdl.Target {
	return nil
}

func (x JudgeActionScore) Index() int                        { return 4 }
func (x JudgeActionScore) Interface() interface{}            { return x.Value }
func (x JudgeActionScore) Name() string                      { return "Score" }
func (x JudgeActionScore) __VDLReflect(__JudgeActionReflect) {}

func (m JudgeActionScore) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_service_v_io_x_ref_examples_rps_JudgeAction)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Score")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_service_v_io_x_ref_examples_rps_ScoreCard); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m JudgeActionScore) MakeVDLTarget() vdl.Target {
	return nil
}

type PlayersMoves [2]string

func (PlayersMoves) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/examples/rps.PlayersMoves"`
}) {
}

func (m *PlayersMoves) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	listTarget1, err := t.StartList(__VDLType_service_v_io_x_ref_examples_rps_PlayersMoves, 2)
	if err != nil {
		return err
	}
	for i, elem3 := range *m {
		elemTarget2, err := listTarget1.StartElem(i)
		if err != nil {
			return err
		}
		if err := elemTarget2.FromString(string(elem3), vdl.StringType); err != nil {
			return err
		}
		if err := listTarget1.FinishElem(elemTarget2); err != nil {
			return err
		}
	}
	if err := t.FinishList(listTarget1); err != nil {
		return err
	}
	return nil
}

func (m *PlayersMoves) MakeVDLTarget() vdl.Target {
	return &PlayersMovesTarget{Value: m}
}

type PlayersMovesTarget struct {
	Value *PlayersMoves
	vdl.TargetBase
	vdl.ListTargetBase
}

func (t *PlayersMovesTarget) StartList(tt *vdl.Type, len int) (vdl.ListTarget, error) {
	if !vdl.Compatible(tt, __VDLType_service_v_io_x_ref_examples_rps_PlayersMoves) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_service_v_io_x_ref_examples_rps_PlayersMoves)
	}
	return t, nil
}
func (t *PlayersMovesTarget) StartElem(index int) (elem vdl.Target, _ error) {
	return &vdl.StringTarget{Value: &(*t.Value)[index]}, error(nil)
}
func (t *PlayersMovesTarget) FinishElem(elem vdl.Target) error {
	return nil
}
func (t *PlayersMovesTarget) FinishList(elem vdl.ListTarget) error {

	return nil
}

// Round represents the state of a round.
type Round struct {
	Moves     PlayersMoves // Each player's move.
	Comment   string       // A text comment from judge about the round.
	Winner    WinnerTag    // Who won the round.
	StartTime time.Time    // The time at which the round started.
	EndTime   time.Time    // The time at which the round ended.
}

func (Round) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/examples/rps.Round"`
}) {
}

func (m *Round) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	__VDLEnsureNativeBuilt_service()
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Moves")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Moves.FillVDLTarget(fieldTarget3, __VDLType_service_v_io_x_ref_examples_rps_PlayersMoves); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Comment")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromString(string(m.Comment), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Winner")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Winner.FillVDLTarget(fieldTarget7, __VDLType_service_v_io_x_ref_examples_rps_WinnerTag); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	var wireValue8 time_2.Time
	if err := time_2.TimeFromNative(&wireValue8, m.StartTime); err != nil {
		return err
	}

	keyTarget9, fieldTarget10, err := fieldsTarget1.StartField("StartTime")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := wireValue8.FillVDLTarget(fieldTarget10, __VDLType_service_time_Time); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget9, fieldTarget10); err != nil {
			return err
		}
	}
	var wireValue11 time_2.Time
	if err := time_2.TimeFromNative(&wireValue11, m.EndTime); err != nil {
		return err
	}

	keyTarget12, fieldTarget13, err := fieldsTarget1.StartField("EndTime")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := wireValue11.FillVDLTarget(fieldTarget13, __VDLType_service_time_Time); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget12, fieldTarget13); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Round) MakeVDLTarget() vdl.Target {
	return &RoundTarget{Value: m}
}

type RoundTarget struct {
	Value *Round
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *RoundTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_service_v_io_x_ref_examples_rps_Round) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_service_v_io_x_ref_examples_rps_Round)
	}
	return t, nil
}
func (t *RoundTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Moves":
		val, err := &PlayersMovesTarget{Value: &t.Value.Moves}, error(nil)
		return nil, val, err
	case "Comment":
		val, err := &vdl.StringTarget{Value: &t.Value.Comment}, error(nil)
		return nil, val, err
	case "Winner":
		val, err := &WinnerTagTarget{Value: &t.Value.Winner}, error(nil)
		return nil, val, err
	case "StartTime":
		val, err := &time_2.TimeTarget{Value: &t.Value.StartTime}, error(nil)
		return nil, val, err
	case "EndTime":
		val, err := &time_2.TimeTarget{Value: &t.Value.EndTime}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_service_v_io_x_ref_examples_rps_Round)
	}
}
func (t *RoundTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *RoundTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type WinnerTagTarget struct {
	Value *WinnerTag
	vdl.TargetBase
}

func (t *WinnerTagTarget) FromUint(src uint64, tt *vdl.Type) error {
	val, err := vdlconv.Uint64ToUint8(src)
	if err != nil {
		return err
	}
	*t.Value = WinnerTag(val)

	return nil
}
func (t *WinnerTagTarget) FromInt(src int64, tt *vdl.Type) error {
	val, err := vdlconv.Int64ToUint8(src)
	if err != nil {
		return err
	}
	*t.Value = WinnerTag(val)

	return nil
}
func (t *WinnerTagTarget) FromFloat(src float64, tt *vdl.Type) error {
	val, err := vdlconv.Float64ToUint8(src)
	if err != nil {
		return err
	}
	*t.Value = WinnerTag(val)

	return nil
}
func (t *WinnerTagTarget) FromComplex(src complex128, tt *vdl.Type) error {
	val, err := vdlconv.Complex128ToUint8(src)
	if err != nil {
		return err
	}
	*t.Value = WinnerTag(val)

	return nil
}

// WinnerTag is a type used to indicate whether a round or a game was a draw,
// was won by player 1 or was won by player 2.
type WinnerTag byte

func (WinnerTag) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/examples/rps.WinnerTag"`
}) {
}

func (m *WinnerTag) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if err := t.FromUint(uint64((*m)), __VDLType_service_v_io_x_ref_examples_rps_WinnerTag); err != nil {
		return err
	}
	return nil
}

func (m *WinnerTag) MakeVDLTarget() vdl.Target {
	return &WinnerTagTarget{Value: m}
}

// PlayResult is the value returned by the Play method. It indicates the outcome of the game.
type PlayResult struct {
	YouWon bool // True if the player receiving the result won the game.
}

func (PlayResult) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/examples/rps.PlayResult"`
}) {
}

func (m *PlayResult) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_service_v_io_x_ref_examples_rps_PlayResult == nil || __VDLTypeservice5 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("YouWon")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromBool(bool(m.YouWon), vdl.BoolType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *PlayResult) MakeVDLTarget() vdl.Target {
	return &PlayResultTarget{Value: m}
}

type PlayResultTarget struct {
	Value *PlayResult
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *PlayResultTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_service_v_io_x_ref_examples_rps_PlayResult) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_service_v_io_x_ref_examples_rps_PlayResult)
	}
	return t, nil
}
func (t *PlayResultTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "YouWon":
		val, err := &vdl.BoolTarget{Value: &t.Value.YouWon}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_service_v_io_x_ref_examples_rps_PlayResult)
	}
}
func (t *PlayResultTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *PlayResultTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type ScoreCard struct {
	Opts      GameOptions // The game options.
	Judge     string      // The name of the judge.
	Players   []string    // The name of the players.
	Rounds    []Round     // The outcome of each round.
	StartTime time.Time   // The time at which the game started.
	EndTime   time.Time   // The time at which the game ended.
	Winner    WinnerTag   // Who won the game.
}

func (ScoreCard) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/examples/rps.ScoreCard"`
}) {
}

func (m *ScoreCard) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	__VDLEnsureNativeBuilt_service()
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Opts")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Opts.FillVDLTarget(fieldTarget3, __VDLType_service_v_io_x_ref_examples_rps_GameOptions); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Judge")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromString(string(m.Judge), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Players")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		listTarget8, err := fieldTarget7.StartList(__VDLTypeservice3, len(m.Players))
		if err != nil {
			return err
		}
		for i, elem10 := range m.Players {
			elemTarget9, err := listTarget8.StartElem(i)
			if err != nil {
				return err
			}
			if err := elemTarget9.FromString(string(elem10), vdl.StringType); err != nil {
				return err
			}
			if err := listTarget8.FinishElem(elemTarget9); err != nil {
				return err
			}
		}
		if err := fieldTarget7.FinishList(listTarget8); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	keyTarget11, fieldTarget12, err := fieldsTarget1.StartField("Rounds")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		listTarget13, err := fieldTarget12.StartList(__VDLTypeservice7, len(m.Rounds))
		if err != nil {
			return err
		}
		for i, elem15 := range m.Rounds {
			elemTarget14, err := listTarget13.StartElem(i)
			if err != nil {
				return err
			}

			if err := elem15.FillVDLTarget(elemTarget14, __VDLType_service_v_io_x_ref_examples_rps_Round); err != nil {
				return err
			}
			if err := listTarget13.FinishElem(elemTarget14); err != nil {
				return err
			}
		}
		if err := fieldTarget12.FinishList(listTarget13); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget11, fieldTarget12); err != nil {
			return err
		}
	}
	var wireValue16 time_2.Time
	if err := time_2.TimeFromNative(&wireValue16, m.StartTime); err != nil {
		return err
	}

	keyTarget17, fieldTarget18, err := fieldsTarget1.StartField("StartTime")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := wireValue16.FillVDLTarget(fieldTarget18, __VDLType_service_time_Time); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget17, fieldTarget18); err != nil {
			return err
		}
	}
	var wireValue19 time_2.Time
	if err := time_2.TimeFromNative(&wireValue19, m.EndTime); err != nil {
		return err
	}

	keyTarget20, fieldTarget21, err := fieldsTarget1.StartField("EndTime")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := wireValue19.FillVDLTarget(fieldTarget21, __VDLType_service_time_Time); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget20, fieldTarget21); err != nil {
			return err
		}
	}
	keyTarget22, fieldTarget23, err := fieldsTarget1.StartField("Winner")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Winner.FillVDLTarget(fieldTarget23, __VDLType_service_v_io_x_ref_examples_rps_WinnerTag); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget22, fieldTarget23); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *ScoreCard) MakeVDLTarget() vdl.Target {
	return &ScoreCardTarget{Value: m}
}

type ScoreCardTarget struct {
	Value *ScoreCard
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *ScoreCardTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_service_v_io_x_ref_examples_rps_ScoreCard) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_service_v_io_x_ref_examples_rps_ScoreCard)
	}
	return t, nil
}
func (t *ScoreCardTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Opts":
		val, err := &GameOptionsTarget{Value: &t.Value.Opts}, error(nil)
		return nil, val, err
	case "Judge":
		val, err := &vdl.StringTarget{Value: &t.Value.Judge}, error(nil)
		return nil, val, err
	case "Players":
		val, err := &vdl.StringSliceTarget{Value: &t.Value.Players}, error(nil)
		return nil, val, err
	case "Rounds":
		val, err := &service5b5d762e696f2f782f7265662f6578616d706c65732f7270732e526f756e64207374727563747b4d6f76657320762e696f2f782f7265662f6578616d706c65732f7270732e506c61796572734d6f766573205b325d737472696e673b436f6d6d656e7420737472696e673b57696e6e657220762e696f2f782f7265662f6578616d706c65732f7270732e57696e6e657254616720627974653b537461727454696d652074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b456e6454696d652074696d652e54696d657dTarget{Value: &t.Value.Rounds}, error(nil)
		return nil, val, err
	case "StartTime":
		val, err := &time_2.TimeTarget{Value: &t.Value.StartTime}, error(nil)
		return nil, val, err
	case "EndTime":
		val, err := &time_2.TimeTarget{Value: &t.Value.EndTime}, error(nil)
		return nil, val, err
	case "Winner":
		val, err := &WinnerTagTarget{Value: &t.Value.Winner}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_service_v_io_x_ref_examples_rps_ScoreCard)
	}
}
func (t *ScoreCardTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *ScoreCardTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type service5b5d762e696f2f782f7265662f6578616d706c65732f7270732e526f756e64207374727563747b4d6f76657320762e696f2f782f7265662f6578616d706c65732f7270732e506c61796572734d6f766573205b325d737472696e673b436f6d6d656e7420737472696e673b57696e6e657220762e696f2f782f7265662f6578616d706c65732f7270732e57696e6e657254616720627974653b537461727454696d652074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b456e6454696d652074696d652e54696d657dTarget struct {
	Value *[]Round
	vdl.TargetBase
	vdl.ListTargetBase
}

func (t *service5b5d762e696f2f782f7265662f6578616d706c65732f7270732e526f756e64207374727563747b4d6f76657320762e696f2f782f7265662f6578616d706c65732f7270732e506c61796572734d6f766573205b325d737472696e673b436f6d6d656e7420737472696e673b57696e6e657220762e696f2f782f7265662f6578616d706c65732f7270732e57696e6e657254616720627974653b537461727454696d652074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b456e6454696d652074696d652e54696d657dTarget) StartList(tt *vdl.Type, len int) (vdl.ListTarget, error) {
	if !vdl.Compatible(tt, __VDLTypeservice7) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLTypeservice7)
	}
	if cap(*t.Value) < len {
		*t.Value = make([]Round, len)
	} else {
		*t.Value = (*t.Value)[:len]
	}
	return t, nil
}
func (t *service5b5d762e696f2f782f7265662f6578616d706c65732f7270732e526f756e64207374727563747b4d6f76657320762e696f2f782f7265662f6578616d706c65732f7270732e506c61796572734d6f766573205b325d737472696e673b436f6d6d656e7420737472696e673b57696e6e657220762e696f2f782f7265662f6578616d706c65732f7270732e57696e6e657254616720627974653b537461727454696d652074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b456e6454696d652074696d652e54696d657dTarget) StartElem(index int) (elem vdl.Target, _ error) {
	return &RoundTarget{Value: &(*t.Value)[index]}, error(nil)
}
func (t *service5b5d762e696f2f782f7265662f6578616d706c65732f7270732e526f756e64207374727563747b4d6f76657320762e696f2f782f7265662f6578616d706c65732f7270732e506c61796572734d6f766573205b325d737472696e673b436f6d6d656e7420737472696e673b57696e6e657220762e696f2f782f7265662f6578616d706c65732f7270732e57696e6e657254616720627974653b537461727454696d652074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b456e6454696d652074696d652e54696d657dTarget) FinishElem(elem vdl.Target) error {
	return nil
}
func (t *service5b5d762e696f2f782f7265662f6578616d706c65732f7270732e526f756e64207374727563747b4d6f76657320762e696f2f782f7265662f6578616d706c65732f7270732e506c61796572734d6f766573205b325d737472696e673b436f6d6d656e7420737472696e673b57696e6e657220762e696f2f782f7265662f6578616d706c65732f7270732e57696e6e657254616720627974653b537461727454696d652074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b456e6454696d652074696d652e54696d657dTarget) FinishList(elem vdl.ListTarget) error {

	return nil
}

func init() {
	vdl.Register((*GameId)(nil))
	vdl.Register((*GameOptions)(nil))
	vdl.Register((*GameTypeTag)(nil))
	vdl.Register((*PlayerAction)(nil))
	vdl.Register((*unused)(nil))
	vdl.Register((*JudgeAction)(nil))
	vdl.Register((*PlayersMoves)(nil))
	vdl.Register((*Round)(nil))
	vdl.Register((*WinnerTag)(nil))
	vdl.Register((*PlayResult)(nil))
	vdl.Register((*ScoreCard)(nil))
}

var __VDLTypeservice0 *vdl.Type = vdl.TypeOf((*GameId)(nil))
var __VDLTypeservice1 *vdl.Type = vdl.TypeOf((*GameOptions)(nil))
var __VDLTypeservice5 *vdl.Type = vdl.TypeOf((*PlayResult)(nil))
var __VDLTypeservice4 *vdl.Type

func __VDLTypeservice4_gen() *vdl.Type {
	__VDLTypeservice4Builder := vdl.TypeBuilder{}

	__VDLTypeservice41 := __VDLTypeservice4Builder.Optional()
	__VDLTypeservice42 := __VDLTypeservice4Builder.Struct()
	__VDLTypeservice43 := __VDLTypeservice4Builder.Named("v.io/x/ref/examples/rps.Round").AssignBase(__VDLTypeservice42)
	__VDLTypeservice44 := __VDLTypeservice4Builder.Array()
	__VDLTypeservice45 := __VDLTypeservice4Builder.Named("v.io/x/ref/examples/rps.PlayersMoves").AssignBase(__VDLTypeservice44)
	__VDLTypeservice46 := vdl.StringType
	__VDLTypeservice44.AssignElem(__VDLTypeservice46)
	__VDLTypeservice44.AssignLen(2)
	__VDLTypeservice42.AppendField("Moves", __VDLTypeservice45)
	__VDLTypeservice42.AppendField("Comment", __VDLTypeservice46)
	__VDLTypeservice47 := vdl.ByteType
	__VDLTypeservice48 := __VDLTypeservice4Builder.Named("v.io/x/ref/examples/rps.WinnerTag").AssignBase(__VDLTypeservice47)
	__VDLTypeservice42.AppendField("Winner", __VDLTypeservice48)
	__VDLTypeservice49 := __VDLTypeservice4Builder.Struct()
	__VDLTypeservice410 := __VDLTypeservice4Builder.Named("time.Time").AssignBase(__VDLTypeservice49)
	__VDLTypeservice411 := vdl.Int64Type
	__VDLTypeservice49.AppendField("Seconds", __VDLTypeservice411)
	__VDLTypeservice412 := vdl.Int32Type
	__VDLTypeservice49.AppendField("Nanos", __VDLTypeservice412)
	__VDLTypeservice42.AppendField("StartTime", __VDLTypeservice410)
	__VDLTypeservice42.AppendField("EndTime", __VDLTypeservice410)
	__VDLTypeservice41.AssignElem(__VDLTypeservice43)
	__VDLTypeservice4Builder.Build()
	__VDLTypeservice4v, err := __VDLTypeservice41.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypeservice4v
}
func init() {
	__VDLTypeservice4 = __VDLTypeservice4_gen()
}

var __VDLTypeservice6 *vdl.Type

func __VDLTypeservice6_gen() *vdl.Type {
	__VDLTypeservice6Builder := vdl.TypeBuilder{}

	__VDLTypeservice61 := __VDLTypeservice6Builder.Optional()
	__VDLTypeservice62 := __VDLTypeservice6Builder.Struct()
	__VDLTypeservice63 := __VDLTypeservice6Builder.Named("v.io/x/ref/examples/rps.ScoreCard").AssignBase(__VDLTypeservice62)
	__VDLTypeservice64 := __VDLTypeservice6Builder.Struct()
	__VDLTypeservice65 := __VDLTypeservice6Builder.Named("v.io/x/ref/examples/rps.GameOptions").AssignBase(__VDLTypeservice64)
	__VDLTypeservice66 := vdl.Int32Type
	__VDLTypeservice64.AppendField("NumRounds", __VDLTypeservice66)
	__VDLTypeservice67 := vdl.ByteType
	__VDLTypeservice68 := __VDLTypeservice6Builder.Named("v.io/x/ref/examples/rps.GameTypeTag").AssignBase(__VDLTypeservice67)
	__VDLTypeservice64.AppendField("GameType", __VDLTypeservice68)
	__VDLTypeservice62.AppendField("Opts", __VDLTypeservice65)
	__VDLTypeservice69 := vdl.StringType
	__VDLTypeservice62.AppendField("Judge", __VDLTypeservice69)
	__VDLTypeservice610 := __VDLTypeservice6Builder.List()
	__VDLTypeservice610.AssignElem(__VDLTypeservice69)
	__VDLTypeservice62.AppendField("Players", __VDLTypeservice610)
	__VDLTypeservice611 := __VDLTypeservice6Builder.List()
	__VDLTypeservice612 := __VDLTypeservice6Builder.Struct()
	__VDLTypeservice613 := __VDLTypeservice6Builder.Named("v.io/x/ref/examples/rps.Round").AssignBase(__VDLTypeservice612)
	__VDLTypeservice614 := __VDLTypeservice6Builder.Array()
	__VDLTypeservice615 := __VDLTypeservice6Builder.Named("v.io/x/ref/examples/rps.PlayersMoves").AssignBase(__VDLTypeservice614)
	__VDLTypeservice614.AssignElem(__VDLTypeservice69)
	__VDLTypeservice614.AssignLen(2)
	__VDLTypeservice612.AppendField("Moves", __VDLTypeservice615)
	__VDLTypeservice612.AppendField("Comment", __VDLTypeservice69)
	__VDLTypeservice616 := vdl.ByteType
	__VDLTypeservice617 := __VDLTypeservice6Builder.Named("v.io/x/ref/examples/rps.WinnerTag").AssignBase(__VDLTypeservice616)
	__VDLTypeservice612.AppendField("Winner", __VDLTypeservice617)
	__VDLTypeservice618 := __VDLTypeservice6Builder.Struct()
	__VDLTypeservice619 := __VDLTypeservice6Builder.Named("time.Time").AssignBase(__VDLTypeservice618)
	__VDLTypeservice620 := vdl.Int64Type
	__VDLTypeservice618.AppendField("Seconds", __VDLTypeservice620)
	__VDLTypeservice618.AppendField("Nanos", __VDLTypeservice66)
	__VDLTypeservice612.AppendField("StartTime", __VDLTypeservice619)
	__VDLTypeservice612.AppendField("EndTime", __VDLTypeservice619)
	__VDLTypeservice611.AssignElem(__VDLTypeservice613)
	__VDLTypeservice62.AppendField("Rounds", __VDLTypeservice611)
	__VDLTypeservice62.AppendField("StartTime", __VDLTypeservice619)
	__VDLTypeservice62.AppendField("EndTime", __VDLTypeservice619)
	__VDLTypeservice62.AppendField("Winner", __VDLTypeservice617)
	__VDLTypeservice61.AssignElem(__VDLTypeservice63)
	__VDLTypeservice6Builder.Build()
	__VDLTypeservice6v, err := __VDLTypeservice61.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypeservice6v
}
func init() {
	__VDLTypeservice6 = __VDLTypeservice6_gen()
}

var __VDLTypeservice2 *vdl.Type = vdl.TypeOf((*unused)(nil))
var __VDLTypeservice3 *vdl.Type = vdl.TypeOf([]string(nil))
var __VDLTypeservice7 *vdl.Type

func __VDLTypeservice7_gen() *vdl.Type {
	__VDLTypeservice7Builder := vdl.TypeBuilder{}

	__VDLTypeservice71 := __VDLTypeservice7Builder.List()
	__VDLTypeservice72 := __VDLTypeservice7Builder.Struct()
	__VDLTypeservice73 := __VDLTypeservice7Builder.Named("v.io/x/ref/examples/rps.Round").AssignBase(__VDLTypeservice72)
	__VDLTypeservice74 := __VDLTypeservice7Builder.Array()
	__VDLTypeservice75 := __VDLTypeservice7Builder.Named("v.io/x/ref/examples/rps.PlayersMoves").AssignBase(__VDLTypeservice74)
	__VDLTypeservice76 := vdl.StringType
	__VDLTypeservice74.AssignElem(__VDLTypeservice76)
	__VDLTypeservice74.AssignLen(2)
	__VDLTypeservice72.AppendField("Moves", __VDLTypeservice75)
	__VDLTypeservice72.AppendField("Comment", __VDLTypeservice76)
	__VDLTypeservice77 := vdl.ByteType
	__VDLTypeservice78 := __VDLTypeservice7Builder.Named("v.io/x/ref/examples/rps.WinnerTag").AssignBase(__VDLTypeservice77)
	__VDLTypeservice72.AppendField("Winner", __VDLTypeservice78)
	__VDLTypeservice79 := __VDLTypeservice7Builder.Struct()
	__VDLTypeservice710 := __VDLTypeservice7Builder.Named("time.Time").AssignBase(__VDLTypeservice79)
	__VDLTypeservice711 := vdl.Int64Type
	__VDLTypeservice79.AppendField("Seconds", __VDLTypeservice711)
	__VDLTypeservice712 := vdl.Int32Type
	__VDLTypeservice79.AppendField("Nanos", __VDLTypeservice712)
	__VDLTypeservice72.AppendField("StartTime", __VDLTypeservice710)
	__VDLTypeservice72.AppendField("EndTime", __VDLTypeservice710)
	__VDLTypeservice71.AssignElem(__VDLTypeservice73)
	__VDLTypeservice7Builder.Build()
	__VDLTypeservice7v, err := __VDLTypeservice71.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypeservice7v
}
func init() {
	__VDLTypeservice7 = __VDLTypeservice7_gen()
}

var __VDLType_service_time_Time *vdl.Type

func __VDLType_service_time_Time_gen() *vdl.Type {
	__VDLType_service_time_TimeBuilder := vdl.TypeBuilder{}

	__VDLType_service_time_Time1 := __VDLType_service_time_TimeBuilder.Struct()
	__VDLType_service_time_Time2 := __VDLType_service_time_TimeBuilder.Named("time.Time").AssignBase(__VDLType_service_time_Time1)
	__VDLType_service_time_Time3 := vdl.Int64Type
	__VDLType_service_time_Time1.AppendField("Seconds", __VDLType_service_time_Time3)
	__VDLType_service_time_Time4 := vdl.Int32Type
	__VDLType_service_time_Time1.AppendField("Nanos", __VDLType_service_time_Time4)
	__VDLType_service_time_TimeBuilder.Build()
	__VDLType_service_time_Timev, err := __VDLType_service_time_Time2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_service_time_Timev
}
func init() {
	__VDLType_service_time_Time = __VDLType_service_time_Time_gen()
}

var __VDLType_service_v_io_x_ref_examples_rps_GameId *vdl.Type = vdl.TypeOf(GameId{})
var __VDLType_service_v_io_x_ref_examples_rps_GameOptions *vdl.Type = vdl.TypeOf(GameOptions{})
var __VDLType_service_v_io_x_ref_examples_rps_GameTypeTag *vdl.Type = vdl.TypeOf(GameTypeTag(0))
var __VDLType_service_v_io_x_ref_examples_rps_JudgeAction *vdl.Type

func __VDLType_service_v_io_x_ref_examples_rps_JudgeAction_gen() *vdl.Type {
	__VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder := vdl.TypeBuilder{}

	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction1 := __VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.Union()
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction2 := __VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.Named("v.io/x/ref/examples/rps.JudgeAction").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_JudgeAction1)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction3 := vdl.Int32Type
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction1.AppendField("PlayerNum", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction3)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction4 := vdl.StringType
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction1.AppendField("OpponentName", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction4)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction5 := __VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.List()
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction5.AssignElem(__VDLType_service_v_io_x_ref_examples_rps_JudgeAction4)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction1.AppendField("MoveOptions", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction5)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction6 := __VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.Struct()
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction7 := __VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.Named("v.io/x/ref/examples/rps.Round").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_JudgeAction6)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction8 := __VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.Array()
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction9 := __VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.Named("v.io/x/ref/examples/rps.PlayersMoves").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_JudgeAction8)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction8.AssignElem(__VDLType_service_v_io_x_ref_examples_rps_JudgeAction4)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction8.AssignLen(2)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction6.AppendField("Moves", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction9)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction6.AppendField("Comment", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction4)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction10 := vdl.ByteType
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction11 := __VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.Named("v.io/x/ref/examples/rps.WinnerTag").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_JudgeAction10)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction6.AppendField("Winner", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction11)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction12 := __VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.Struct()
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction13 := __VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.Named("time.Time").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_JudgeAction12)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction14 := vdl.Int64Type
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction12.AppendField("Seconds", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction14)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction12.AppendField("Nanos", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction3)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction6.AppendField("StartTime", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction13)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction6.AppendField("EndTime", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction13)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction1.AppendField("RoundResult", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction7)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction15 := __VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.Struct()
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction16 := __VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.Named("v.io/x/ref/examples/rps.ScoreCard").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_JudgeAction15)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction17 := __VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.Struct()
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction18 := __VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.Named("v.io/x/ref/examples/rps.GameOptions").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_JudgeAction17)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction17.AppendField("NumRounds", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction3)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction19 := vdl.ByteType
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction20 := __VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.Named("v.io/x/ref/examples/rps.GameTypeTag").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_JudgeAction19)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction17.AppendField("GameType", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction20)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction15.AppendField("Opts", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction18)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction15.AppendField("Judge", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction4)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction15.AppendField("Players", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction5)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction21 := __VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.List()
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction21.AssignElem(__VDLType_service_v_io_x_ref_examples_rps_JudgeAction7)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction15.AppendField("Rounds", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction21)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction15.AppendField("StartTime", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction13)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction15.AppendField("EndTime", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction13)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction15.AppendField("Winner", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction11)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction1.AppendField("Score", __VDLType_service_v_io_x_ref_examples_rps_JudgeAction16)
	__VDLType_service_v_io_x_ref_examples_rps_JudgeActionBuilder.Build()
	__VDLType_service_v_io_x_ref_examples_rps_JudgeActionv, err := __VDLType_service_v_io_x_ref_examples_rps_JudgeAction2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_service_v_io_x_ref_examples_rps_JudgeActionv
}
func init() {
	__VDLType_service_v_io_x_ref_examples_rps_JudgeAction = __VDLType_service_v_io_x_ref_examples_rps_JudgeAction_gen()
}

var __VDLType_service_v_io_x_ref_examples_rps_PlayResult *vdl.Type = vdl.TypeOf(PlayResult{})
var __VDLType_service_v_io_x_ref_examples_rps_PlayerAction *vdl.Type = vdl.TypeOf(PlayerAction(PlayerActionMove{""}))
var __VDLType_service_v_io_x_ref_examples_rps_PlayersMoves *vdl.Type = vdl.TypeOf(PlayersMoves{})
var __VDLType_service_v_io_x_ref_examples_rps_Round *vdl.Type

func __VDLType_service_v_io_x_ref_examples_rps_Round_gen() *vdl.Type {
	__VDLType_service_v_io_x_ref_examples_rps_RoundBuilder := vdl.TypeBuilder{}

	__VDLType_service_v_io_x_ref_examples_rps_Round1 := __VDLType_service_v_io_x_ref_examples_rps_RoundBuilder.Struct()
	__VDLType_service_v_io_x_ref_examples_rps_Round2 := __VDLType_service_v_io_x_ref_examples_rps_RoundBuilder.Named("v.io/x/ref/examples/rps.Round").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_Round1)
	__VDLType_service_v_io_x_ref_examples_rps_Round3 := __VDLType_service_v_io_x_ref_examples_rps_RoundBuilder.Array()
	__VDLType_service_v_io_x_ref_examples_rps_Round4 := __VDLType_service_v_io_x_ref_examples_rps_RoundBuilder.Named("v.io/x/ref/examples/rps.PlayersMoves").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_Round3)
	__VDLType_service_v_io_x_ref_examples_rps_Round5 := vdl.StringType
	__VDLType_service_v_io_x_ref_examples_rps_Round3.AssignElem(__VDLType_service_v_io_x_ref_examples_rps_Round5)
	__VDLType_service_v_io_x_ref_examples_rps_Round3.AssignLen(2)
	__VDLType_service_v_io_x_ref_examples_rps_Round1.AppendField("Moves", __VDLType_service_v_io_x_ref_examples_rps_Round4)
	__VDLType_service_v_io_x_ref_examples_rps_Round1.AppendField("Comment", __VDLType_service_v_io_x_ref_examples_rps_Round5)
	__VDLType_service_v_io_x_ref_examples_rps_Round6 := vdl.ByteType
	__VDLType_service_v_io_x_ref_examples_rps_Round7 := __VDLType_service_v_io_x_ref_examples_rps_RoundBuilder.Named("v.io/x/ref/examples/rps.WinnerTag").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_Round6)
	__VDLType_service_v_io_x_ref_examples_rps_Round1.AppendField("Winner", __VDLType_service_v_io_x_ref_examples_rps_Round7)
	__VDLType_service_v_io_x_ref_examples_rps_Round8 := __VDLType_service_v_io_x_ref_examples_rps_RoundBuilder.Struct()
	__VDLType_service_v_io_x_ref_examples_rps_Round9 := __VDLType_service_v_io_x_ref_examples_rps_RoundBuilder.Named("time.Time").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_Round8)
	__VDLType_service_v_io_x_ref_examples_rps_Round10 := vdl.Int64Type
	__VDLType_service_v_io_x_ref_examples_rps_Round8.AppendField("Seconds", __VDLType_service_v_io_x_ref_examples_rps_Round10)
	__VDLType_service_v_io_x_ref_examples_rps_Round11 := vdl.Int32Type
	__VDLType_service_v_io_x_ref_examples_rps_Round8.AppendField("Nanos", __VDLType_service_v_io_x_ref_examples_rps_Round11)
	__VDLType_service_v_io_x_ref_examples_rps_Round1.AppendField("StartTime", __VDLType_service_v_io_x_ref_examples_rps_Round9)
	__VDLType_service_v_io_x_ref_examples_rps_Round1.AppendField("EndTime", __VDLType_service_v_io_x_ref_examples_rps_Round9)
	__VDLType_service_v_io_x_ref_examples_rps_RoundBuilder.Build()
	__VDLType_service_v_io_x_ref_examples_rps_Roundv, err := __VDLType_service_v_io_x_ref_examples_rps_Round2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_service_v_io_x_ref_examples_rps_Roundv
}
func init() {
	__VDLType_service_v_io_x_ref_examples_rps_Round = __VDLType_service_v_io_x_ref_examples_rps_Round_gen()
}

var __VDLType_service_v_io_x_ref_examples_rps_ScoreCard *vdl.Type

func __VDLType_service_v_io_x_ref_examples_rps_ScoreCard_gen() *vdl.Type {
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCardBuilder := vdl.TypeBuilder{}

	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard1 := __VDLType_service_v_io_x_ref_examples_rps_ScoreCardBuilder.Struct()
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard2 := __VDLType_service_v_io_x_ref_examples_rps_ScoreCardBuilder.Named("v.io/x/ref/examples/rps.ScoreCard").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_ScoreCard1)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard3 := __VDLType_service_v_io_x_ref_examples_rps_ScoreCardBuilder.Struct()
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard4 := __VDLType_service_v_io_x_ref_examples_rps_ScoreCardBuilder.Named("v.io/x/ref/examples/rps.GameOptions").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_ScoreCard3)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard5 := vdl.Int32Type
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard3.AppendField("NumRounds", __VDLType_service_v_io_x_ref_examples_rps_ScoreCard5)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard6 := vdl.ByteType
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard7 := __VDLType_service_v_io_x_ref_examples_rps_ScoreCardBuilder.Named("v.io/x/ref/examples/rps.GameTypeTag").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_ScoreCard6)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard3.AppendField("GameType", __VDLType_service_v_io_x_ref_examples_rps_ScoreCard7)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard1.AppendField("Opts", __VDLType_service_v_io_x_ref_examples_rps_ScoreCard4)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard8 := vdl.StringType
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard1.AppendField("Judge", __VDLType_service_v_io_x_ref_examples_rps_ScoreCard8)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard9 := __VDLType_service_v_io_x_ref_examples_rps_ScoreCardBuilder.List()
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard9.AssignElem(__VDLType_service_v_io_x_ref_examples_rps_ScoreCard8)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard1.AppendField("Players", __VDLType_service_v_io_x_ref_examples_rps_ScoreCard9)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard10 := __VDLType_service_v_io_x_ref_examples_rps_ScoreCardBuilder.List()
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard11 := __VDLType_service_v_io_x_ref_examples_rps_ScoreCardBuilder.Struct()
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard12 := __VDLType_service_v_io_x_ref_examples_rps_ScoreCardBuilder.Named("v.io/x/ref/examples/rps.Round").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_ScoreCard11)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard13 := __VDLType_service_v_io_x_ref_examples_rps_ScoreCardBuilder.Array()
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard14 := __VDLType_service_v_io_x_ref_examples_rps_ScoreCardBuilder.Named("v.io/x/ref/examples/rps.PlayersMoves").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_ScoreCard13)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard13.AssignElem(__VDLType_service_v_io_x_ref_examples_rps_ScoreCard8)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard13.AssignLen(2)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard11.AppendField("Moves", __VDLType_service_v_io_x_ref_examples_rps_ScoreCard14)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard11.AppendField("Comment", __VDLType_service_v_io_x_ref_examples_rps_ScoreCard8)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard15 := vdl.ByteType
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard16 := __VDLType_service_v_io_x_ref_examples_rps_ScoreCardBuilder.Named("v.io/x/ref/examples/rps.WinnerTag").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_ScoreCard15)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard11.AppendField("Winner", __VDLType_service_v_io_x_ref_examples_rps_ScoreCard16)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard17 := __VDLType_service_v_io_x_ref_examples_rps_ScoreCardBuilder.Struct()
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard18 := __VDLType_service_v_io_x_ref_examples_rps_ScoreCardBuilder.Named("time.Time").AssignBase(__VDLType_service_v_io_x_ref_examples_rps_ScoreCard17)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard19 := vdl.Int64Type
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard17.AppendField("Seconds", __VDLType_service_v_io_x_ref_examples_rps_ScoreCard19)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard17.AppendField("Nanos", __VDLType_service_v_io_x_ref_examples_rps_ScoreCard5)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard11.AppendField("StartTime", __VDLType_service_v_io_x_ref_examples_rps_ScoreCard18)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard11.AppendField("EndTime", __VDLType_service_v_io_x_ref_examples_rps_ScoreCard18)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard10.AssignElem(__VDLType_service_v_io_x_ref_examples_rps_ScoreCard12)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard1.AppendField("Rounds", __VDLType_service_v_io_x_ref_examples_rps_ScoreCard10)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard1.AppendField("StartTime", __VDLType_service_v_io_x_ref_examples_rps_ScoreCard18)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard1.AppendField("EndTime", __VDLType_service_v_io_x_ref_examples_rps_ScoreCard18)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard1.AppendField("Winner", __VDLType_service_v_io_x_ref_examples_rps_ScoreCard16)
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCardBuilder.Build()
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCardv, err := __VDLType_service_v_io_x_ref_examples_rps_ScoreCard2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_service_v_io_x_ref_examples_rps_ScoreCardv
}
func init() {
	__VDLType_service_v_io_x_ref_examples_rps_ScoreCard = __VDLType_service_v_io_x_ref_examples_rps_ScoreCard_gen()
}

var __VDLType_service_v_io_x_ref_examples_rps_WinnerTag *vdl.Type = vdl.TypeOf(WinnerTag(0))
var __VDLType_service_v_io_x_ref_examples_rps_unused *vdl.Type = vdl.TypeOf(unused{})

func __VDLEnsureNativeBuilt_service() {
	if __VDLTypeservice4 == nil {
		__VDLTypeservice4 = __VDLTypeservice4_gen()
	}
	if __VDLTypeservice6 == nil {
		__VDLTypeservice6 = __VDLTypeservice6_gen()
	}
	if __VDLTypeservice7 == nil {
		__VDLTypeservice7 = __VDLTypeservice7_gen()
	}
	if __VDLType_service_time_Time == nil {
		__VDLType_service_time_Time = __VDLType_service_time_Time_gen()
	}
	if __VDLType_service_v_io_x_ref_examples_rps_JudgeAction == nil {
		__VDLType_service_v_io_x_ref_examples_rps_JudgeAction = __VDLType_service_v_io_x_ref_examples_rps_JudgeAction_gen()
	}
	if __VDLType_service_v_io_x_ref_examples_rps_Round == nil {
		__VDLType_service_v_io_x_ref_examples_rps_Round = __VDLType_service_v_io_x_ref_examples_rps_Round_gen()
	}
	if __VDLType_service_v_io_x_ref_examples_rps_ScoreCard == nil {
		__VDLType_service_v_io_x_ref_examples_rps_ScoreCard = __VDLType_service_v_io_x_ref_examples_rps_ScoreCard_gen()
	}
}

const Classic = GameTypeTag(0) // Rock-Paper-Scissors

const LizardSpock = GameTypeTag(1) // Rock-Paper-Scissors-Lizard-Spock

const Draw = WinnerTag(0)

const Player1 = WinnerTag(1)

const Player2 = WinnerTag(2)

// JudgeClientMethods is the client interface
// containing Judge methods.
type JudgeClientMethods interface {
	// CreateGame creates a new game with the given game options and returns a game
	// identifier that can be used by the players to join the game.
	CreateGame(_ *context.T, Opts GameOptions, _ ...rpc.CallOpt) (GameId, error)
	// Play lets a player join an existing game and play.
	Play(_ *context.T, Id GameId, _ ...rpc.CallOpt) (JudgePlayClientCall, error)
}

// JudgeClientStub adds universal methods to JudgeClientMethods.
type JudgeClientStub interface {
	JudgeClientMethods
	rpc.UniversalServiceMethods
}

// JudgeClient returns a client stub for Judge.
func JudgeClient(name string) JudgeClientStub {
	return implJudgeClientStub{name}
}

type implJudgeClientStub struct {
	name string
}

func (c implJudgeClientStub) CreateGame(ctx *context.T, i0 GameOptions, opts ...rpc.CallOpt) (o0 GameId, err error) {
	err = v23.GetClient(ctx).Call(ctx, c.name, "CreateGame", []interface{}{i0}, []interface{}{&o0}, opts...)
	return
}

func (c implJudgeClientStub) Play(ctx *context.T, i0 GameId, opts ...rpc.CallOpt) (ocall JudgePlayClientCall, err error) {
	var call rpc.ClientCall
	if call, err = v23.GetClient(ctx).StartCall(ctx, c.name, "Play", []interface{}{i0}, opts...); err != nil {
		return
	}
	ocall = &implJudgePlayClientCall{ClientCall: call}
	return
}

// JudgePlayClientStream is the client stream for Judge.Play.
type JudgePlayClientStream interface {
	// RecvStream returns the receiver side of the Judge.Play client stream.
	RecvStream() interface {
		// Advance stages an item so that it may be retrieved via Value.  Returns
		// true iff there is an item to retrieve.  Advance must be called before
		// Value is called.  May block if an item is not available.
		Advance() bool
		// Value returns the item that was staged by Advance.  May panic if Advance
		// returned false or was not called.  Never blocks.
		Value() JudgeAction
		// Err returns any error encountered by Advance.  Never blocks.
		Err() error
	}
	// SendStream returns the send side of the Judge.Play client stream.
	SendStream() interface {
		// Send places the item onto the output stream.  Returns errors
		// encountered while sending, or if Send is called after Close or
		// the stream has been canceled.  Blocks if there is no buffer
		// space; will unblock when buffer space is available or after
		// the stream has been canceled.
		Send(item PlayerAction) error
		// Close indicates to the server that no more items will be sent;
		// server Recv calls will receive io.EOF after all sent items.
		// This is an optional call - e.g. a client might call Close if it
		// needs to continue receiving items from the server after it's
		// done sending.  Returns errors encountered while closing, or if
		// Close is called after the stream has been canceled.  Like Send,
		// blocks if there is no buffer space available.
		Close() error
	}
}

// JudgePlayClientCall represents the call returned from Judge.Play.
type JudgePlayClientCall interface {
	JudgePlayClientStream
	// Finish performs the equivalent of SendStream().Close, then blocks until
	// the server is done, and returns the positional return values for the call.
	//
	// Finish returns immediately if the call has been canceled; depending on the
	// timing the output could either be an error signaling cancelation, or the
	// valid positional return values from the server.
	//
	// Calling Finish is mandatory for releasing stream resources, unless the call
	// has been canceled or any of the other methods return an error.  Finish should
	// be called at most once.
	Finish() (PlayResult, error)
}

type implJudgePlayClientCall struct {
	rpc.ClientCall
	valRecv JudgeAction
	errRecv error
}

func (c *implJudgePlayClientCall) RecvStream() interface {
	Advance() bool
	Value() JudgeAction
	Err() error
} {
	return implJudgePlayClientCallRecv{c}
}

type implJudgePlayClientCallRecv struct {
	c *implJudgePlayClientCall
}

func (c implJudgePlayClientCallRecv) Advance() bool {
	c.c.errRecv = c.c.Recv(&c.c.valRecv)
	return c.c.errRecv == nil
}
func (c implJudgePlayClientCallRecv) Value() JudgeAction {
	return c.c.valRecv
}
func (c implJudgePlayClientCallRecv) Err() error {
	if c.c.errRecv == io.EOF {
		return nil
	}
	return c.c.errRecv
}
func (c *implJudgePlayClientCall) SendStream() interface {
	Send(item PlayerAction) error
	Close() error
} {
	return implJudgePlayClientCallSend{c}
}

type implJudgePlayClientCallSend struct {
	c *implJudgePlayClientCall
}

func (c implJudgePlayClientCallSend) Send(item PlayerAction) error {
	return c.c.Send(item)
}
func (c implJudgePlayClientCallSend) Close() error {
	return c.c.CloseSend()
}
func (c *implJudgePlayClientCall) Finish() (o0 PlayResult, err error) {
	err = c.ClientCall.Finish(&o0)
	return
}

// JudgeServerMethods is the interface a server writer
// implements for Judge.
type JudgeServerMethods interface {
	// CreateGame creates a new game with the given game options and returns a game
	// identifier that can be used by the players to join the game.
	CreateGame(_ *context.T, _ rpc.ServerCall, Opts GameOptions) (GameId, error)
	// Play lets a player join an existing game and play.
	Play(_ *context.T, _ JudgePlayServerCall, Id GameId) (PlayResult, error)
}

// JudgeServerStubMethods is the server interface containing
// Judge methods, as expected by rpc.Server.
// The only difference between this interface and JudgeServerMethods
// is the streaming methods.
type JudgeServerStubMethods interface {
	// CreateGame creates a new game with the given game options and returns a game
	// identifier that can be used by the players to join the game.
	CreateGame(_ *context.T, _ rpc.ServerCall, Opts GameOptions) (GameId, error)
	// Play lets a player join an existing game and play.
	Play(_ *context.T, _ *JudgePlayServerCallStub, Id GameId) (PlayResult, error)
}

// JudgeServerStub adds universal methods to JudgeServerStubMethods.
type JudgeServerStub interface {
	JudgeServerStubMethods
	// Describe the Judge interfaces.
	Describe__() []rpc.InterfaceDesc
}

// JudgeServer returns a server stub for Judge.
// It converts an implementation of JudgeServerMethods into
// an object that may be used by rpc.Server.
func JudgeServer(impl JudgeServerMethods) JudgeServerStub {
	stub := implJudgeServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := rpc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := rpc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implJudgeServerStub struct {
	impl JudgeServerMethods
	gs   *rpc.GlobState
}

func (s implJudgeServerStub) CreateGame(ctx *context.T, call rpc.ServerCall, i0 GameOptions) (GameId, error) {
	return s.impl.CreateGame(ctx, call, i0)
}

func (s implJudgeServerStub) Play(ctx *context.T, call *JudgePlayServerCallStub, i0 GameId) (PlayResult, error) {
	return s.impl.Play(ctx, call, i0)
}

func (s implJudgeServerStub) Globber() *rpc.GlobState {
	return s.gs
}

func (s implJudgeServerStub) Describe__() []rpc.InterfaceDesc {
	return []rpc.InterfaceDesc{JudgeDesc}
}

// JudgeDesc describes the Judge interface.
var JudgeDesc rpc.InterfaceDesc = descJudge

// descJudge hides the desc to keep godoc clean.
var descJudge = rpc.InterfaceDesc{
	Name:    "Judge",
	PkgPath: "v.io/x/ref/examples/rps",
	Methods: []rpc.MethodDesc{
		{
			Name: "CreateGame",
			Doc:  "// CreateGame creates a new game with the given game options and returns a game\n// identifier that can be used by the players to join the game.",
			InArgs: []rpc.ArgDesc{
				{"Opts", ``}, // GameOptions
			},
			OutArgs: []rpc.ArgDesc{
				{"", ``}, // GameId
			},
			Tags: []*vdl.Value{vdl.ValueOf(access.Tag("Write"))},
		},
		{
			Name: "Play",
			Doc:  "// Play lets a player join an existing game and play.",
			InArgs: []rpc.ArgDesc{
				{"Id", ``}, // GameId
			},
			OutArgs: []rpc.ArgDesc{
				{"", ``}, // PlayResult
			},
			Tags: []*vdl.Value{vdl.ValueOf(access.Tag("Write"))},
		},
	},
}

// JudgePlayServerStream is the server stream for Judge.Play.
type JudgePlayServerStream interface {
	// RecvStream returns the receiver side of the Judge.Play server stream.
	RecvStream() interface {
		// Advance stages an item so that it may be retrieved via Value.  Returns
		// true iff there is an item to retrieve.  Advance must be called before
		// Value is called.  May block if an item is not available.
		Advance() bool
		// Value returns the item that was staged by Advance.  May panic if Advance
		// returned false or was not called.  Never blocks.
		Value() PlayerAction
		// Err returns any error encountered by Advance.  Never blocks.
		Err() error
	}
	// SendStream returns the send side of the Judge.Play server stream.
	SendStream() interface {
		// Send places the item onto the output stream.  Returns errors encountered
		// while sending.  Blocks if there is no buffer space; will unblock when
		// buffer space is available.
		Send(item JudgeAction) error
	}
}

// JudgePlayServerCall represents the context passed to Judge.Play.
type JudgePlayServerCall interface {
	rpc.ServerCall
	JudgePlayServerStream
}

// JudgePlayServerCallStub is a wrapper that converts rpc.StreamServerCall into
// a typesafe stub that implements JudgePlayServerCall.
type JudgePlayServerCallStub struct {
	rpc.StreamServerCall
	valRecv PlayerAction
	errRecv error
}

// Init initializes JudgePlayServerCallStub from rpc.StreamServerCall.
func (s *JudgePlayServerCallStub) Init(call rpc.StreamServerCall) {
	s.StreamServerCall = call
}

// RecvStream returns the receiver side of the Judge.Play server stream.
func (s *JudgePlayServerCallStub) RecvStream() interface {
	Advance() bool
	Value() PlayerAction
	Err() error
} {
	return implJudgePlayServerCallRecv{s}
}

type implJudgePlayServerCallRecv struct {
	s *JudgePlayServerCallStub
}

func (s implJudgePlayServerCallRecv) Advance() bool {
	s.s.errRecv = s.s.Recv(&s.s.valRecv)
	return s.s.errRecv == nil
}
func (s implJudgePlayServerCallRecv) Value() PlayerAction {
	return s.s.valRecv
}
func (s implJudgePlayServerCallRecv) Err() error {
	if s.s.errRecv == io.EOF {
		return nil
	}
	return s.s.errRecv
}

// SendStream returns the send side of the Judge.Play server stream.
func (s *JudgePlayServerCallStub) SendStream() interface {
	Send(item JudgeAction) error
} {
	return implJudgePlayServerCallSend{s}
}

type implJudgePlayServerCallSend struct {
	s *JudgePlayServerCallStub
}

func (s implJudgePlayServerCallSend) Send(item JudgeAction) error {
	return s.s.Send(item)
}

// PlayerClientMethods is the client interface
// containing Player methods.
//
// Player can receive challenges from other players.
type PlayerClientMethods interface {
	// Challenge is used by other players to challenge this player to a game. If
	// the challenge is accepted, the method returns nil.
	Challenge(_ *context.T, Address string, Id GameId, Opts GameOptions, _ ...rpc.CallOpt) error
}

// PlayerClientStub adds universal methods to PlayerClientMethods.
type PlayerClientStub interface {
	PlayerClientMethods
	rpc.UniversalServiceMethods
}

// PlayerClient returns a client stub for Player.
func PlayerClient(name string) PlayerClientStub {
	return implPlayerClientStub{name}
}

type implPlayerClientStub struct {
	name string
}

func (c implPlayerClientStub) Challenge(ctx *context.T, i0 string, i1 GameId, i2 GameOptions, opts ...rpc.CallOpt) (err error) {
	err = v23.GetClient(ctx).Call(ctx, c.name, "Challenge", []interface{}{i0, i1, i2}, nil, opts...)
	return
}

// PlayerServerMethods is the interface a server writer
// implements for Player.
//
// Player can receive challenges from other players.
type PlayerServerMethods interface {
	// Challenge is used by other players to challenge this player to a game. If
	// the challenge is accepted, the method returns nil.
	Challenge(_ *context.T, _ rpc.ServerCall, Address string, Id GameId, Opts GameOptions) error
}

// PlayerServerStubMethods is the server interface containing
// Player methods, as expected by rpc.Server.
// There is no difference between this interface and PlayerServerMethods
// since there are no streaming methods.
type PlayerServerStubMethods PlayerServerMethods

// PlayerServerStub adds universal methods to PlayerServerStubMethods.
type PlayerServerStub interface {
	PlayerServerStubMethods
	// Describe the Player interfaces.
	Describe__() []rpc.InterfaceDesc
}

// PlayerServer returns a server stub for Player.
// It converts an implementation of PlayerServerMethods into
// an object that may be used by rpc.Server.
func PlayerServer(impl PlayerServerMethods) PlayerServerStub {
	stub := implPlayerServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := rpc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := rpc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implPlayerServerStub struct {
	impl PlayerServerMethods
	gs   *rpc.GlobState
}

func (s implPlayerServerStub) Challenge(ctx *context.T, call rpc.ServerCall, i0 string, i1 GameId, i2 GameOptions) error {
	return s.impl.Challenge(ctx, call, i0, i1, i2)
}

func (s implPlayerServerStub) Globber() *rpc.GlobState {
	return s.gs
}

func (s implPlayerServerStub) Describe__() []rpc.InterfaceDesc {
	return []rpc.InterfaceDesc{PlayerDesc}
}

// PlayerDesc describes the Player interface.
var PlayerDesc rpc.InterfaceDesc = descPlayer

// descPlayer hides the desc to keep godoc clean.
var descPlayer = rpc.InterfaceDesc{
	Name:    "Player",
	PkgPath: "v.io/x/ref/examples/rps",
	Doc:     "// Player can receive challenges from other players.",
	Methods: []rpc.MethodDesc{
		{
			Name: "Challenge",
			Doc:  "// Challenge is used by other players to challenge this player to a game. If\n// the challenge is accepted, the method returns nil.",
			InArgs: []rpc.ArgDesc{
				{"Address", ``}, // string
				{"Id", ``},      // GameId
				{"Opts", ``},    // GameOptions
			},
			Tags: []*vdl.Value{vdl.ValueOf(access.Tag("Write"))},
		},
	},
}

// ScoreKeeperClientMethods is the client interface
// containing ScoreKeeper methods.
//
// ScoreKeeper receives the outcome of games from Judges.
type ScoreKeeperClientMethods interface {
	Record(_ *context.T, Score ScoreCard, _ ...rpc.CallOpt) error
}

// ScoreKeeperClientStub adds universal methods to ScoreKeeperClientMethods.
type ScoreKeeperClientStub interface {
	ScoreKeeperClientMethods
	rpc.UniversalServiceMethods
}

// ScoreKeeperClient returns a client stub for ScoreKeeper.
func ScoreKeeperClient(name string) ScoreKeeperClientStub {
	return implScoreKeeperClientStub{name}
}

type implScoreKeeperClientStub struct {
	name string
}

func (c implScoreKeeperClientStub) Record(ctx *context.T, i0 ScoreCard, opts ...rpc.CallOpt) (err error) {
	err = v23.GetClient(ctx).Call(ctx, c.name, "Record", []interface{}{i0}, nil, opts...)
	return
}

// ScoreKeeperServerMethods is the interface a server writer
// implements for ScoreKeeper.
//
// ScoreKeeper receives the outcome of games from Judges.
type ScoreKeeperServerMethods interface {
	Record(_ *context.T, _ rpc.ServerCall, Score ScoreCard) error
}

// ScoreKeeperServerStubMethods is the server interface containing
// ScoreKeeper methods, as expected by rpc.Server.
// There is no difference between this interface and ScoreKeeperServerMethods
// since there are no streaming methods.
type ScoreKeeperServerStubMethods ScoreKeeperServerMethods

// ScoreKeeperServerStub adds universal methods to ScoreKeeperServerStubMethods.
type ScoreKeeperServerStub interface {
	ScoreKeeperServerStubMethods
	// Describe the ScoreKeeper interfaces.
	Describe__() []rpc.InterfaceDesc
}

// ScoreKeeperServer returns a server stub for ScoreKeeper.
// It converts an implementation of ScoreKeeperServerMethods into
// an object that may be used by rpc.Server.
func ScoreKeeperServer(impl ScoreKeeperServerMethods) ScoreKeeperServerStub {
	stub := implScoreKeeperServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := rpc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := rpc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implScoreKeeperServerStub struct {
	impl ScoreKeeperServerMethods
	gs   *rpc.GlobState
}

func (s implScoreKeeperServerStub) Record(ctx *context.T, call rpc.ServerCall, i0 ScoreCard) error {
	return s.impl.Record(ctx, call, i0)
}

func (s implScoreKeeperServerStub) Globber() *rpc.GlobState {
	return s.gs
}

func (s implScoreKeeperServerStub) Describe__() []rpc.InterfaceDesc {
	return []rpc.InterfaceDesc{ScoreKeeperDesc}
}

// ScoreKeeperDesc describes the ScoreKeeper interface.
var ScoreKeeperDesc rpc.InterfaceDesc = descScoreKeeper

// descScoreKeeper hides the desc to keep godoc clean.
var descScoreKeeper = rpc.InterfaceDesc{
	Name:    "ScoreKeeper",
	PkgPath: "v.io/x/ref/examples/rps",
	Doc:     "// ScoreKeeper receives the outcome of games from Judges.",
	Methods: []rpc.MethodDesc{
		{
			Name: "Record",
			InArgs: []rpc.ArgDesc{
				{"Score", ``}, // ScoreCard
			},
			Tags: []*vdl.Value{vdl.ValueOf(access.Tag("Write"))},
		},
	},
}

// RockPaperScissorsClientMethods is the client interface
// containing RockPaperScissors methods.
type RockPaperScissorsClientMethods interface {
	JudgeClientMethods
	// Player can receive challenges from other players.
	PlayerClientMethods
	// ScoreKeeper receives the outcome of games from Judges.
	ScoreKeeperClientMethods
}

// RockPaperScissorsClientStub adds universal methods to RockPaperScissorsClientMethods.
type RockPaperScissorsClientStub interface {
	RockPaperScissorsClientMethods
	rpc.UniversalServiceMethods
}

// RockPaperScissorsClient returns a client stub for RockPaperScissors.
func RockPaperScissorsClient(name string) RockPaperScissorsClientStub {
	return implRockPaperScissorsClientStub{name, JudgeClient(name), PlayerClient(name), ScoreKeeperClient(name)}
}

type implRockPaperScissorsClientStub struct {
	name string

	JudgeClientStub
	PlayerClientStub
	ScoreKeeperClientStub
}

// RockPaperScissorsServerMethods is the interface a server writer
// implements for RockPaperScissors.
type RockPaperScissorsServerMethods interface {
	JudgeServerMethods
	// Player can receive challenges from other players.
	PlayerServerMethods
	// ScoreKeeper receives the outcome of games from Judges.
	ScoreKeeperServerMethods
}

// RockPaperScissorsServerStubMethods is the server interface containing
// RockPaperScissors methods, as expected by rpc.Server.
// The only difference between this interface and RockPaperScissorsServerMethods
// is the streaming methods.
type RockPaperScissorsServerStubMethods interface {
	JudgeServerStubMethods
	// Player can receive challenges from other players.
	PlayerServerStubMethods
	// ScoreKeeper receives the outcome of games from Judges.
	ScoreKeeperServerStubMethods
}

// RockPaperScissorsServerStub adds universal methods to RockPaperScissorsServerStubMethods.
type RockPaperScissorsServerStub interface {
	RockPaperScissorsServerStubMethods
	// Describe the RockPaperScissors interfaces.
	Describe__() []rpc.InterfaceDesc
}

// RockPaperScissorsServer returns a server stub for RockPaperScissors.
// It converts an implementation of RockPaperScissorsServerMethods into
// an object that may be used by rpc.Server.
func RockPaperScissorsServer(impl RockPaperScissorsServerMethods) RockPaperScissorsServerStub {
	stub := implRockPaperScissorsServerStub{
		impl:                  impl,
		JudgeServerStub:       JudgeServer(impl),
		PlayerServerStub:      PlayerServer(impl),
		ScoreKeeperServerStub: ScoreKeeperServer(impl),
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := rpc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := rpc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implRockPaperScissorsServerStub struct {
	impl RockPaperScissorsServerMethods
	JudgeServerStub
	PlayerServerStub
	ScoreKeeperServerStub
	gs *rpc.GlobState
}

func (s implRockPaperScissorsServerStub) Globber() *rpc.GlobState {
	return s.gs
}

func (s implRockPaperScissorsServerStub) Describe__() []rpc.InterfaceDesc {
	return []rpc.InterfaceDesc{RockPaperScissorsDesc, JudgeDesc, PlayerDesc, ScoreKeeperDesc}
}

// RockPaperScissorsDesc describes the RockPaperScissors interface.
var RockPaperScissorsDesc rpc.InterfaceDesc = descRockPaperScissors

// descRockPaperScissors hides the desc to keep godoc clean.
var descRockPaperScissors = rpc.InterfaceDesc{
	Name:    "RockPaperScissors",
	PkgPath: "v.io/x/ref/examples/rps",
	Embeds: []rpc.EmbedDesc{
		{"Judge", "v.io/x/ref/examples/rps", ``},
		{"Player", "v.io/x/ref/examples/rps", "// Player can receive challenges from other players."},
		{"ScoreKeeper", "v.io/x/ref/examples/rps", "// ScoreKeeper receives the outcome of games from Judges."},
	},
}
