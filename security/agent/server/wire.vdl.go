// This file was auto-generated by the veyron vdl tool.
// Source: wire.vdl

package server

import (
	// VDL system imports
	"v.io/core/veyron2"
	"v.io/core/veyron2/context"
	"v.io/core/veyron2/ipc"
	"v.io/core/veyron2/vdl"

	// VDL user imports
	"v.io/core/veyron2/security"
)

// AgentClientMethods is the client interface
// containing Agent methods.
type AgentClientMethods interface {
	Bless(ctx *context.T, key []byte, wit security.WireBlessings, extension string, caveat security.Caveat, additionalCaveats []security.Caveat, opts ...ipc.CallOpt) (security.WireBlessings, error)
	BlessSelf(ctx *context.T, name string, caveats []security.Caveat, opts ...ipc.CallOpt) (security.WireBlessings, error)
	Sign(ctx *context.T, message []byte, opts ...ipc.CallOpt) (security.Signature, error)
	MintDischarge(ctx *context.T, tp vdl.AnyRep, caveat security.Caveat, additionalCaveats []security.Caveat, opts ...ipc.CallOpt) (vdl.AnyRep, error)
	PublicKey(*context.T, ...ipc.CallOpt) ([]byte, error)
	BlessingsByName(ctx *context.T, name security.BlessingPattern, opts ...ipc.CallOpt) ([]security.WireBlessings, error)
	BlessingsInfo(ctx *context.T, blessings security.WireBlessings, opts ...ipc.CallOpt) (map[string][]security.Caveat, error)
	AddToRoots(ctx *context.T, blessing security.WireBlessings, opts ...ipc.CallOpt) error
	BlessingStoreSet(ctx *context.T, blessings security.WireBlessings, forPeers security.BlessingPattern, opts ...ipc.CallOpt) (security.WireBlessings, error)
	BlessingStoreForPeer(ctx *context.T, peerBlessings []string, opts ...ipc.CallOpt) (security.WireBlessings, error)
	BlessingStoreSetDefault(ctx *context.T, blessings security.WireBlessings, opts ...ipc.CallOpt) error
	BlessingStoreDefault(*context.T, ...ipc.CallOpt) (security.WireBlessings, error)
	BlessingStorePeerBlessings(*context.T, ...ipc.CallOpt) (map[security.BlessingPattern]security.WireBlessings, error)
	BlessingStoreDebugString(*context.T, ...ipc.CallOpt) (string, error)
	BlessingRootsAdd(ctx *context.T, root []byte, pattern security.BlessingPattern, opts ...ipc.CallOpt) error
	BlessingRootsRecognized(ctx *context.T, root []byte, blessing string, opts ...ipc.CallOpt) error
	BlessingRootsDebugString(*context.T, ...ipc.CallOpt) (string, error)
}

// AgentClientStub adds universal methods to AgentClientMethods.
type AgentClientStub interface {
	AgentClientMethods
	ipc.UniversalServiceMethods
}

// AgentClient returns a client stub for Agent.
func AgentClient(name string, opts ...ipc.BindOpt) AgentClientStub {
	var client ipc.Client
	for _, opt := range opts {
		if clientOpt, ok := opt.(ipc.Client); ok {
			client = clientOpt
		}
	}
	return implAgentClientStub{name, client}
}

type implAgentClientStub struct {
	name   string
	client ipc.Client
}

func (c implAgentClientStub) c(ctx *context.T) ipc.Client {
	if c.client != nil {
		return c.client
	}
	return veyron2.GetClient(ctx)
}

func (c implAgentClientStub) Bless(ctx *context.T, i0 []byte, i1 security.WireBlessings, i2 string, i3 security.Caveat, i4 []security.Caveat, opts ...ipc.CallOpt) (o0 security.WireBlessings, err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Bless", []interface{}{i0, i1, i2, i3, i4}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAgentClientStub) BlessSelf(ctx *context.T, i0 string, i1 []security.Caveat, opts ...ipc.CallOpt) (o0 security.WireBlessings, err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "BlessSelf", []interface{}{i0, i1}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAgentClientStub) Sign(ctx *context.T, i0 []byte, opts ...ipc.CallOpt) (o0 security.Signature, err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Sign", []interface{}{i0}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAgentClientStub) MintDischarge(ctx *context.T, i0 vdl.AnyRep, i1 security.Caveat, i2 []security.Caveat, opts ...ipc.CallOpt) (o0 vdl.AnyRep, err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "MintDischarge", []interface{}{i0, i1, i2}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAgentClientStub) PublicKey(ctx *context.T, opts ...ipc.CallOpt) (o0 []byte, err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "PublicKey", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAgentClientStub) BlessingsByName(ctx *context.T, i0 security.BlessingPattern, opts ...ipc.CallOpt) (o0 []security.WireBlessings, err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "BlessingsByName", []interface{}{i0}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAgentClientStub) BlessingsInfo(ctx *context.T, i0 security.WireBlessings, opts ...ipc.CallOpt) (o0 map[string][]security.Caveat, err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "BlessingsInfo", []interface{}{i0}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAgentClientStub) AddToRoots(ctx *context.T, i0 security.WireBlessings, opts ...ipc.CallOpt) (err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "AddToRoots", []interface{}{i0}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAgentClientStub) BlessingStoreSet(ctx *context.T, i0 security.WireBlessings, i1 security.BlessingPattern, opts ...ipc.CallOpt) (o0 security.WireBlessings, err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "BlessingStoreSet", []interface{}{i0, i1}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAgentClientStub) BlessingStoreForPeer(ctx *context.T, i0 []string, opts ...ipc.CallOpt) (o0 security.WireBlessings, err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "BlessingStoreForPeer", []interface{}{i0}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAgentClientStub) BlessingStoreSetDefault(ctx *context.T, i0 security.WireBlessings, opts ...ipc.CallOpt) (err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "BlessingStoreSetDefault", []interface{}{i0}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAgentClientStub) BlessingStoreDefault(ctx *context.T, opts ...ipc.CallOpt) (o0 security.WireBlessings, err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "BlessingStoreDefault", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAgentClientStub) BlessingStorePeerBlessings(ctx *context.T, opts ...ipc.CallOpt) (o0 map[security.BlessingPattern]security.WireBlessings, err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "BlessingStorePeerBlessings", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAgentClientStub) BlessingStoreDebugString(ctx *context.T, opts ...ipc.CallOpt) (o0 string, err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "BlessingStoreDebugString", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAgentClientStub) BlessingRootsAdd(ctx *context.T, i0 []byte, i1 security.BlessingPattern, opts ...ipc.CallOpt) (err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "BlessingRootsAdd", []interface{}{i0, i1}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAgentClientStub) BlessingRootsRecognized(ctx *context.T, i0 []byte, i1 string, opts ...ipc.CallOpt) (err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "BlessingRootsRecognized", []interface{}{i0, i1}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAgentClientStub) BlessingRootsDebugString(ctx *context.T, opts ...ipc.CallOpt) (o0 string, err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "BlessingRootsDebugString", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

// AgentServerMethods is the interface a server writer
// implements for Agent.
type AgentServerMethods interface {
	Bless(ctx ipc.ServerContext, key []byte, wit security.WireBlessings, extension string, caveat security.Caveat, additionalCaveats []security.Caveat) (security.WireBlessings, error)
	BlessSelf(ctx ipc.ServerContext, name string, caveats []security.Caveat) (security.WireBlessings, error)
	Sign(ctx ipc.ServerContext, message []byte) (security.Signature, error)
	MintDischarge(ctx ipc.ServerContext, tp vdl.AnyRep, caveat security.Caveat, additionalCaveats []security.Caveat) (vdl.AnyRep, error)
	PublicKey(ipc.ServerContext) ([]byte, error)
	BlessingsByName(ctx ipc.ServerContext, name security.BlessingPattern) ([]security.WireBlessings, error)
	BlessingsInfo(ctx ipc.ServerContext, blessings security.WireBlessings) (map[string][]security.Caveat, error)
	AddToRoots(ctx ipc.ServerContext, blessing security.WireBlessings) error
	BlessingStoreSet(ctx ipc.ServerContext, blessings security.WireBlessings, forPeers security.BlessingPattern) (security.WireBlessings, error)
	BlessingStoreForPeer(ctx ipc.ServerContext, peerBlessings []string) (security.WireBlessings, error)
	BlessingStoreSetDefault(ctx ipc.ServerContext, blessings security.WireBlessings) error
	BlessingStoreDefault(ipc.ServerContext) (security.WireBlessings, error)
	BlessingStorePeerBlessings(ipc.ServerContext) (map[security.BlessingPattern]security.WireBlessings, error)
	BlessingStoreDebugString(ipc.ServerContext) (string, error)
	BlessingRootsAdd(ctx ipc.ServerContext, root []byte, pattern security.BlessingPattern) error
	BlessingRootsRecognized(ctx ipc.ServerContext, root []byte, blessing string) error
	BlessingRootsDebugString(ipc.ServerContext) (string, error)
}

// AgentServerStubMethods is the server interface containing
// Agent methods, as expected by ipc.Server.
// There is no difference between this interface and AgentServerMethods
// since there are no streaming methods.
type AgentServerStubMethods AgentServerMethods

// AgentServerStub adds universal methods to AgentServerStubMethods.
type AgentServerStub interface {
	AgentServerStubMethods
	// Describe the Agent interfaces.
	Describe__() []ipc.InterfaceDesc
}

// AgentServer returns a server stub for Agent.
// It converts an implementation of AgentServerMethods into
// an object that may be used by ipc.Server.
func AgentServer(impl AgentServerMethods) AgentServerStub {
	stub := implAgentServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := ipc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := ipc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implAgentServerStub struct {
	impl AgentServerMethods
	gs   *ipc.GlobState
}

func (s implAgentServerStub) Bless(ctx ipc.ServerContext, i0 []byte, i1 security.WireBlessings, i2 string, i3 security.Caveat, i4 []security.Caveat) (security.WireBlessings, error) {
	return s.impl.Bless(ctx, i0, i1, i2, i3, i4)
}

func (s implAgentServerStub) BlessSelf(ctx ipc.ServerContext, i0 string, i1 []security.Caveat) (security.WireBlessings, error) {
	return s.impl.BlessSelf(ctx, i0, i1)
}

func (s implAgentServerStub) Sign(ctx ipc.ServerContext, i0 []byte) (security.Signature, error) {
	return s.impl.Sign(ctx, i0)
}

func (s implAgentServerStub) MintDischarge(ctx ipc.ServerContext, i0 vdl.AnyRep, i1 security.Caveat, i2 []security.Caveat) (vdl.AnyRep, error) {
	return s.impl.MintDischarge(ctx, i0, i1, i2)
}

func (s implAgentServerStub) PublicKey(ctx ipc.ServerContext) ([]byte, error) {
	return s.impl.PublicKey(ctx)
}

func (s implAgentServerStub) BlessingsByName(ctx ipc.ServerContext, i0 security.BlessingPattern) ([]security.WireBlessings, error) {
	return s.impl.BlessingsByName(ctx, i0)
}

func (s implAgentServerStub) BlessingsInfo(ctx ipc.ServerContext, i0 security.WireBlessings) (map[string][]security.Caveat, error) {
	return s.impl.BlessingsInfo(ctx, i0)
}

func (s implAgentServerStub) AddToRoots(ctx ipc.ServerContext, i0 security.WireBlessings) error {
	return s.impl.AddToRoots(ctx, i0)
}

func (s implAgentServerStub) BlessingStoreSet(ctx ipc.ServerContext, i0 security.WireBlessings, i1 security.BlessingPattern) (security.WireBlessings, error) {
	return s.impl.BlessingStoreSet(ctx, i0, i1)
}

func (s implAgentServerStub) BlessingStoreForPeer(ctx ipc.ServerContext, i0 []string) (security.WireBlessings, error) {
	return s.impl.BlessingStoreForPeer(ctx, i0)
}

func (s implAgentServerStub) BlessingStoreSetDefault(ctx ipc.ServerContext, i0 security.WireBlessings) error {
	return s.impl.BlessingStoreSetDefault(ctx, i0)
}

func (s implAgentServerStub) BlessingStoreDefault(ctx ipc.ServerContext) (security.WireBlessings, error) {
	return s.impl.BlessingStoreDefault(ctx)
}

func (s implAgentServerStub) BlessingStorePeerBlessings(ctx ipc.ServerContext) (map[security.BlessingPattern]security.WireBlessings, error) {
	return s.impl.BlessingStorePeerBlessings(ctx)
}

func (s implAgentServerStub) BlessingStoreDebugString(ctx ipc.ServerContext) (string, error) {
	return s.impl.BlessingStoreDebugString(ctx)
}

func (s implAgentServerStub) BlessingRootsAdd(ctx ipc.ServerContext, i0 []byte, i1 security.BlessingPattern) error {
	return s.impl.BlessingRootsAdd(ctx, i0, i1)
}

func (s implAgentServerStub) BlessingRootsRecognized(ctx ipc.ServerContext, i0 []byte, i1 string) error {
	return s.impl.BlessingRootsRecognized(ctx, i0, i1)
}

func (s implAgentServerStub) BlessingRootsDebugString(ctx ipc.ServerContext) (string, error) {
	return s.impl.BlessingRootsDebugString(ctx)
}

func (s implAgentServerStub) Globber() *ipc.GlobState {
	return s.gs
}

func (s implAgentServerStub) Describe__() []ipc.InterfaceDesc {
	return []ipc.InterfaceDesc{AgentDesc}
}

// AgentDesc describes the Agent interface.
var AgentDesc ipc.InterfaceDesc = descAgent

// descAgent hides the desc to keep godoc clean.
var descAgent = ipc.InterfaceDesc{
	Name:    "Agent",
	PkgPath: "v.io/core/veyron/security/agent/server",
	Methods: []ipc.MethodDesc{
		{
			Name: "Bless",
			InArgs: []ipc.ArgDesc{
				{"key", ``},               // []byte
				{"wit", ``},               // security.WireBlessings
				{"extension", ``},         // string
				{"caveat", ``},            // security.Caveat
				{"additionalCaveats", ``}, // []security.Caveat
			},
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // security.WireBlessings
				{"", ``}, // error
			},
		},
		{
			Name: "BlessSelf",
			InArgs: []ipc.ArgDesc{
				{"name", ``},    // string
				{"caveats", ``}, // []security.Caveat
			},
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // security.WireBlessings
				{"", ``}, // error
			},
		},
		{
			Name: "Sign",
			InArgs: []ipc.ArgDesc{
				{"message", ``}, // []byte
			},
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // security.Signature
				{"", ``}, // error
			},
		},
		{
			Name: "MintDischarge",
			InArgs: []ipc.ArgDesc{
				{"tp", ``},                // vdl.AnyRep
				{"caveat", ``},            // security.Caveat
				{"additionalCaveats", ``}, // []security.Caveat
			},
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // vdl.AnyRep
				{"", ``}, // error
			},
		},
		{
			Name: "PublicKey",
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // []byte
				{"", ``}, // error
			},
		},
		{
			Name: "BlessingsByName",
			InArgs: []ipc.ArgDesc{
				{"name", ``}, // security.BlessingPattern
			},
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // []security.WireBlessings
				{"", ``}, // error
			},
		},
		{
			Name: "BlessingsInfo",
			InArgs: []ipc.ArgDesc{
				{"blessings", ``}, // security.WireBlessings
			},
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // map[string][]security.Caveat
				{"", ``}, // error
			},
		},
		{
			Name: "AddToRoots",
			InArgs: []ipc.ArgDesc{
				{"blessing", ``}, // security.WireBlessings
			},
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // error
			},
		},
		{
			Name: "BlessingStoreSet",
			InArgs: []ipc.ArgDesc{
				{"blessings", ``}, // security.WireBlessings
				{"forPeers", ``},  // security.BlessingPattern
			},
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // security.WireBlessings
				{"", ``}, // error
			},
		},
		{
			Name: "BlessingStoreForPeer",
			InArgs: []ipc.ArgDesc{
				{"peerBlessings", ``}, // []string
			},
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // security.WireBlessings
				{"", ``}, // error
			},
		},
		{
			Name: "BlessingStoreSetDefault",
			InArgs: []ipc.ArgDesc{
				{"blessings", ``}, // security.WireBlessings
			},
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // error
			},
		},
		{
			Name: "BlessingStoreDefault",
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // security.WireBlessings
				{"", ``}, // error
			},
		},
		{
			Name: "BlessingStorePeerBlessings",
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // map[security.BlessingPattern]security.WireBlessings
				{"", ``}, // error
			},
		},
		{
			Name: "BlessingStoreDebugString",
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // string
				{"", ``}, // error
			},
		},
		{
			Name: "BlessingRootsAdd",
			InArgs: []ipc.ArgDesc{
				{"root", ``},    // []byte
				{"pattern", ``}, // security.BlessingPattern
			},
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // error
			},
		},
		{
			Name: "BlessingRootsRecognized",
			InArgs: []ipc.ArgDesc{
				{"root", ``},     // []byte
				{"blessing", ``}, // string
			},
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // error
			},
		},
		{
			Name: "BlessingRootsDebugString",
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // string
				{"", ``}, // error
			},
		},
	},
}
