// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Source: types.vdl

package conn

import (
	"fmt"
	"reflect"
	"v.io/v23/security"
	"v.io/v23/vdl"
	"v.io/x/ref/lib/security/bcrypter"
)

// Blessings is used to transport blessings between the two ends of a Conn.
// Since blessings can be large, we try not to send them more than once by
// associating them with an integer key (BKey). Thereafter we refer to them
// by their key.
type Blessings struct {
	Blessings security.Blessings
	BKey      uint64
}

func (Blessings) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/runtime/internal/flow/conn.Blessings"`
}) {
}

func (m *Blessings) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	__VDLEnsureNativeBuilt_types()
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	var wireValue2 security.WireBlessings
	if err := security.WireBlessingsFromNative(&wireValue2, m.Blessings); err != nil {
		return err
	}

	keyTarget3, fieldTarget4, err := fieldsTarget1.StartField("Blessings")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := wireValue2.FillVDLTarget(fieldTarget4, __VDLType_types_v_io_v23_security_WireBlessings); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget3, fieldTarget4); err != nil {
			return err
		}
	}
	keyTarget5, fieldTarget6, err := fieldsTarget1.StartField("BKey")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget6.FromUint(uint64(m.BKey), vdl.Uint64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget5, fieldTarget6); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Blessings) MakeVDLTarget() vdl.Target {
	return &BlessingsTarget{Value: m}
}

type BlessingsTarget struct {
	Value *Blessings
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *BlessingsTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings)
	}
	return t, nil
}
func (t *BlessingsTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Blessings":
		val, err := vdl.ReflectTarget(reflect.ValueOf(&t.Value.Blessings))
		return nil, val, err
	case "BKey":
		val, err := &vdl.Uint64Target{Value: &t.Value.BKey}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings)
	}
}
func (t *BlessingsTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *BlessingsTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}

// EncryptedBlessings is used to transport encrypted blessings between the
// two ends of a Conn. The encryption is with respect to a set of blessing
// patterns that define the set of peers that are allowed to see the blessings.
// Since encrypted blessings can be large, we try not to send them more than
// once by associating them with an integer key (BKey). Thereafter we refer to
// them by their key.
type EncryptedBlessings struct {
	Ciphertexts []bcrypter.WireCiphertext
	BKey        uint64
}

func (EncryptedBlessings) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/runtime/internal/flow/conn.EncryptedBlessings"`
}) {
}

func (m *EncryptedBlessings) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_EncryptedBlessings == nil || __VDLTypetypes1 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Ciphertexts")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		listTarget4, err := fieldTarget3.StartList(__VDLTypetypes2, len(m.Ciphertexts))
		if err != nil {
			return err
		}
		for i, elem6 := range m.Ciphertexts {
			elemTarget5, err := listTarget4.StartElem(i)
			if err != nil {
				return err
			}

			if err := elem6.FillVDLTarget(elemTarget5, __VDLType_types_v_io_x_ref_lib_security_bcrypter_WireCiphertext); err != nil {
				return err
			}
			if err := listTarget4.FinishElem(elemTarget5); err != nil {
				return err
			}
		}
		if err := fieldTarget3.FinishList(listTarget4); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget7, fieldTarget8, err := fieldsTarget1.StartField("BKey")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget8.FromUint(uint64(m.BKey), vdl.Uint64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget7, fieldTarget8); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *EncryptedBlessings) MakeVDLTarget() vdl.Target {
	return &EncryptedBlessingsTarget{Value: m}
}

type EncryptedBlessingsTarget struct {
	Value *EncryptedBlessings
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *EncryptedBlessingsTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_EncryptedBlessings) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_EncryptedBlessings)
	}
	return t, nil
}
func (t *EncryptedBlessingsTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Ciphertexts":
		val, err := &types5b5d762e696f2f782f7265662f6c69622f73656375726974792f62637279707465722e5769726543697068657274657874207374727563747b5061747465726e496420737472696e673b4279746573206d61705b737472696e675d5b5d627974657dTarget{Value: &t.Value.Ciphertexts}, error(nil)
		return nil, val, err
	case "BKey":
		val, err := &vdl.Uint64Target{Value: &t.Value.BKey}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_EncryptedBlessings)
	}
}
func (t *EncryptedBlessingsTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *EncryptedBlessingsTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}

type types5b5d762e696f2f782f7265662f6c69622f73656375726974792f62637279707465722e5769726543697068657274657874207374727563747b5061747465726e496420737472696e673b4279746573206d61705b737472696e675d5b5d627974657dTarget struct {
	Value *[]bcrypter.WireCiphertext
	vdl.TargetBase
	vdl.ListTargetBase
}

func (t *types5b5d762e696f2f782f7265662f6c69622f73656375726974792f62637279707465722e5769726543697068657274657874207374727563747b5061747465726e496420737472696e673b4279746573206d61705b737472696e675d5b5d627974657dTarget) StartList(tt *vdl.Type, len int) (vdl.ListTarget, error) {
	if !vdl.Compatible(tt, __VDLTypetypes2) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLTypetypes2)
	}
	if cap(*t.Value) < len {
		*t.Value = make([]bcrypter.WireCiphertext, len)
	} else {
		*t.Value = (*t.Value)[:len]
	}
	return t, nil
}
func (t *types5b5d762e696f2f782f7265662f6c69622f73656375726974792f62637279707465722e5769726543697068657274657874207374727563747b5061747465726e496420737472696e673b4279746573206d61705b737472696e675d5b5d627974657dTarget) StartElem(index int) (elem vdl.Target, _ error) {
	return &bcrypter.WireCiphertextTarget{Value: &(*t.Value)[index]}, error(nil)
}
func (t *types5b5d762e696f2f782f7265662f6c69622f73656375726974792f62637279707465722e5769726543697068657274657874207374727563747b5061747465726e496420737472696e673b4279746573206d61705b737472696e675d5b5d627974657dTarget) FinishElem(elem vdl.Target) error {
	return nil
}
func (t *types5b5d762e696f2f782f7265662f6c69622f73656375726974792f62637279707465722e5769726543697068657274657874207374727563747b5061747465726e496420737472696e673b4279746573206d61705b737472696e675d5b5d627974657dTarget) FinishList(elem vdl.ListTarget) error {
	return nil
}

// Discharges is used to transport discharges between the two ends of a Conn.
// Since discharges can be large, we try not to send them more than once by
// associating them with an integer key (DKey). Thereafter we refer to them
// by their key.
// Discharges also contains the BKey of the blessings with which the discharges
// are associated with.
type Discharges struct {
	Discharges []security.Discharge
	DKey       uint64
	BKey       uint64
}

func (Discharges) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/runtime/internal/flow/conn.Discharges"`
}) {
}

func (m *Discharges) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	__VDLEnsureNativeBuilt_types()
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Discharges")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		listTarget4, err := fieldTarget3.StartList(__VDLTypetypes4, len(m.Discharges))
		if err != nil {
			return err
		}
		for i, elem6 := range m.Discharges {
			elemTarget5, err := listTarget4.StartElem(i)
			if err != nil {
				return err
			}

			var wireValue7 security.WireDischarge
			if err := security.WireDischargeFromNative(&wireValue7, elem6); err != nil {
				return err
			}

			unionValue8 := wireValue7
			if unionValue8 == nil {
				unionValue8 = security.WireDischargePublicKey{}
			}
			if err := unionValue8.FillVDLTarget(elemTarget5, __VDLType_types_v_io_v23_security_WireDischarge); err != nil {
				return err
			}
			if err := listTarget4.FinishElem(elemTarget5); err != nil {
				return err
			}
		}
		if err := fieldTarget3.FinishList(listTarget4); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget9, fieldTarget10, err := fieldsTarget1.StartField("DKey")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget10.FromUint(uint64(m.DKey), vdl.Uint64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget9, fieldTarget10); err != nil {
			return err
		}
	}
	keyTarget11, fieldTarget12, err := fieldsTarget1.StartField("BKey")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget12.FromUint(uint64(m.BKey), vdl.Uint64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget11, fieldTarget12); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Discharges) MakeVDLTarget() vdl.Target {
	return &DischargesTarget{Value: m}
}

type DischargesTarget struct {
	Value *Discharges
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *DischargesTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges)
	}
	return t, nil
}
func (t *DischargesTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Discharges":
		val, err := &types5b5d762e696f2f7632332f73656375726974792e5769726544697363686172676520756e696f6e7b5075626c69634b657920762e696f2f7632332f73656375726974792e7075626c69634b6579446973636861726765207374727563747b54686972645061727479436176656174496420737472696e673b43617665617473205b5d762e696f2f7632332f73656375726974792e436176656174207374727563747b496420762e696f2f7632332f756e6971756569642e4964205b31365d627974653b506172616d566f6d205b5d627974657d3b5369676e617475726520762e696f2f7632332f73656375726974792e5369676e6174757265207374727563747b507572706f7365205b5d627974653b4861736820762e696f2f7632332f73656375726974792e4861736820737472696e673b52205b5d627974653b53205b5d627974657d7d7dTarget{Value: &t.Value.Discharges}, error(nil)
		return nil, val, err
	case "DKey":
		val, err := &vdl.Uint64Target{Value: &t.Value.DKey}, error(nil)
		return nil, val, err
	case "BKey":
		val, err := &vdl.Uint64Target{Value: &t.Value.BKey}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges)
	}
}
func (t *DischargesTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *DischargesTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}

type types5b5d762e696f2f7632332f73656375726974792e5769726544697363686172676520756e696f6e7b5075626c69634b657920762e696f2f7632332f73656375726974792e7075626c69634b6579446973636861726765207374727563747b54686972645061727479436176656174496420737472696e673b43617665617473205b5d762e696f2f7632332f73656375726974792e436176656174207374727563747b496420762e696f2f7632332f756e6971756569642e4964205b31365d627974653b506172616d566f6d205b5d627974657d3b5369676e617475726520762e696f2f7632332f73656375726974792e5369676e6174757265207374727563747b507572706f7365205b5d627974653b4861736820762e696f2f7632332f73656375726974792e4861736820737472696e673b52205b5d627974653b53205b5d627974657d7d7dTarget struct {
	Value *[]security.Discharge
	vdl.TargetBase
	vdl.ListTargetBase
}

func (t *types5b5d762e696f2f7632332f73656375726974792e5769726544697363686172676520756e696f6e7b5075626c69634b657920762e696f2f7632332f73656375726974792e7075626c69634b6579446973636861726765207374727563747b54686972645061727479436176656174496420737472696e673b43617665617473205b5d762e696f2f7632332f73656375726974792e436176656174207374727563747b496420762e696f2f7632332f756e6971756569642e4964205b31365d627974653b506172616d566f6d205b5d627974657d3b5369676e617475726520762e696f2f7632332f73656375726974792e5369676e6174757265207374727563747b507572706f7365205b5d627974653b4861736820762e696f2f7632332f73656375726974792e4861736820737472696e673b52205b5d627974653b53205b5d627974657d7d7dTarget) StartList(tt *vdl.Type, len int) (vdl.ListTarget, error) {
	if !vdl.Compatible(tt, __VDLTypetypes4) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLTypetypes4)
	}
	if cap(*t.Value) < len {
		*t.Value = make([]security.Discharge, len)
	} else {
		*t.Value = (*t.Value)[:len]
	}
	return t, nil
}
func (t *types5b5d762e696f2f7632332f73656375726974792e5769726544697363686172676520756e696f6e7b5075626c69634b657920762e696f2f7632332f73656375726974792e7075626c69634b6579446973636861726765207374727563747b54686972645061727479436176656174496420737472696e673b43617665617473205b5d762e696f2f7632332f73656375726974792e436176656174207374727563747b496420762e696f2f7632332f756e6971756569642e4964205b31365d627974653b506172616d566f6d205b5d627974657d3b5369676e617475726520762e696f2f7632332f73656375726974792e5369676e6174757265207374727563747b507572706f7365205b5d627974653b4861736820762e696f2f7632332f73656375726974792e4861736820737472696e673b52205b5d627974653b53205b5d627974657d7d7dTarget) StartElem(index int) (elem vdl.Target, _ error) {
	return vdl.ReflectTarget(reflect.ValueOf(&(*t.Value)[index]))
}
func (t *types5b5d762e696f2f7632332f73656375726974792e5769726544697363686172676520756e696f6e7b5075626c69634b657920762e696f2f7632332f73656375726974792e7075626c69634b6579446973636861726765207374727563747b54686972645061727479436176656174496420737472696e673b43617665617473205b5d762e696f2f7632332f73656375726974792e436176656174207374727563747b496420762e696f2f7632332f756e6971756569642e4964205b31365d627974653b506172616d566f6d205b5d627974657d3b5369676e617475726520762e696f2f7632332f73656375726974792e5369676e6174757265207374727563747b507572706f7365205b5d627974653b4861736820762e696f2f7632332f73656375726974792e4861736820737472696e673b52205b5d627974653b53205b5d627974657d7d7dTarget) FinishElem(elem vdl.Target) error {
	return nil
}
func (t *types5b5d762e696f2f7632332f73656375726974792e5769726544697363686172676520756e696f6e7b5075626c69634b657920762e696f2f7632332f73656375726974792e7075626c69634b6579446973636861726765207374727563747b54686972645061727479436176656174496420737472696e673b43617665617473205b5d762e696f2f7632332f73656375726974792e436176656174207374727563747b496420762e696f2f7632332f756e6971756569642e4964205b31365d627974653b506172616d566f6d205b5d627974657d3b5369676e617475726520762e696f2f7632332f73656375726974792e5369676e6174757265207374727563747b507572706f7365205b5d627974653b4861736820762e696f2f7632332f73656375726974792e4861736820737472696e673b52205b5d627974653b53205b5d627974657d7d7dTarget) FinishList(elem vdl.ListTarget) error {
	return nil
}

// EncryptedDischarges is used to transport encrypted discharges between the
// two ends of a Conn. The encryption is with respect to a set of blessing
// patterns that define the set of peers that are allowed to see the discharges.
// Since discharges can be large, we try not to send them more than once by
// associating them with an integer key (DKey). Thereafter we refer to them
// by their key.
// EncryptedDischarges also contains the BKey of the blessings with which the
// plaintext discharges are associated with.
type EncryptedDischarges struct {
	Ciphertexts []bcrypter.WireCiphertext
	DKey        uint64
	BKey        uint64
}

func (EncryptedDischarges) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/runtime/internal/flow/conn.EncryptedDischarges"`
}) {
}

func (m *EncryptedDischarges) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_EncryptedDischarges == nil || __VDLTypetypes5 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Ciphertexts")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		listTarget4, err := fieldTarget3.StartList(__VDLTypetypes2, len(m.Ciphertexts))
		if err != nil {
			return err
		}
		for i, elem6 := range m.Ciphertexts {
			elemTarget5, err := listTarget4.StartElem(i)
			if err != nil {
				return err
			}

			if err := elem6.FillVDLTarget(elemTarget5, __VDLType_types_v_io_x_ref_lib_security_bcrypter_WireCiphertext); err != nil {
				return err
			}
			if err := listTarget4.FinishElem(elemTarget5); err != nil {
				return err
			}
		}
		if err := fieldTarget3.FinishList(listTarget4); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget7, fieldTarget8, err := fieldsTarget1.StartField("DKey")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget8.FromUint(uint64(m.DKey), vdl.Uint64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget7, fieldTarget8); err != nil {
			return err
		}
	}
	keyTarget9, fieldTarget10, err := fieldsTarget1.StartField("BKey")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget10.FromUint(uint64(m.BKey), vdl.Uint64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget9, fieldTarget10); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *EncryptedDischarges) MakeVDLTarget() vdl.Target {
	return &EncryptedDischargesTarget{Value: m}
}

type EncryptedDischargesTarget struct {
	Value *EncryptedDischarges
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *EncryptedDischargesTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_EncryptedDischarges) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_EncryptedDischarges)
	}
	return t, nil
}
func (t *EncryptedDischargesTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Ciphertexts":
		val, err := &types5b5d762e696f2f782f7265662f6c69622f73656375726974792f62637279707465722e5769726543697068657274657874207374727563747b5061747465726e496420737472696e673b4279746573206d61705b737472696e675d5b5d627974657dTarget{Value: &t.Value.Ciphertexts}, error(nil)
		return nil, val, err
	case "DKey":
		val, err := &vdl.Uint64Target{Value: &t.Value.DKey}, error(nil)
		return nil, val, err
	case "BKey":
		val, err := &vdl.Uint64Target{Value: &t.Value.BKey}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_EncryptedDischarges)
	}
}
func (t *EncryptedDischargesTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *EncryptedDischargesTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}

type (
	// BlessingsFlowMessage represents any single field of the BlessingsFlowMessage union type.
	//
	// BlessingsFlowMessage is used to send either a Blessings, Discharges, EncryptedBlessings
	// or EncryptedDischarges object over the wire.
	BlessingsFlowMessage interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the BlessingsFlowMessage union type.
		__VDLReflect(__BlessingsFlowMessageReflect)
		FillVDLTarget(vdl.Target, *vdl.Type) error
	}
	// BlessingsFlowMessageBlessings represents field Blessings of the BlessingsFlowMessage union type.
	BlessingsFlowMessageBlessings struct{ Value Blessings }
	// BlessingsFlowMessageDischarges represents field Discharges of the BlessingsFlowMessage union type.
	BlessingsFlowMessageDischarges struct{ Value Discharges }
	// BlessingsFlowMessageEncryptedBlessings represents field EncryptedBlessings of the BlessingsFlowMessage union type.
	BlessingsFlowMessageEncryptedBlessings struct{ Value EncryptedBlessings }
	// BlessingsFlowMessageEncryptedDischarges represents field EncryptedDischarges of the BlessingsFlowMessage union type.
	BlessingsFlowMessageEncryptedDischarges struct{ Value EncryptedDischarges }
	// __BlessingsFlowMessageReflect describes the BlessingsFlowMessage union type.
	__BlessingsFlowMessageReflect struct {
		Name  string `vdl:"v.io/x/ref/runtime/internal/flow/conn.BlessingsFlowMessage"`
		Type  BlessingsFlowMessage
		Union struct {
			Blessings           BlessingsFlowMessageBlessings
			Discharges          BlessingsFlowMessageDischarges
			EncryptedBlessings  BlessingsFlowMessageEncryptedBlessings
			EncryptedDischarges BlessingsFlowMessageEncryptedDischarges
		}
	}
)

func (x BlessingsFlowMessageBlessings) Index() int                                 { return 0 }
func (x BlessingsFlowMessageBlessings) Interface() interface{}                     { return x.Value }
func (x BlessingsFlowMessageBlessings) Name() string                               { return "Blessings" }
func (x BlessingsFlowMessageBlessings) __VDLReflect(__BlessingsFlowMessageReflect) {}

func (m BlessingsFlowMessageBlessings) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Blessings")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m BlessingsFlowMessageBlessings) MakeVDLTarget() vdl.Target {
	return nil
}

func (x BlessingsFlowMessageDischarges) Index() int                                 { return 1 }
func (x BlessingsFlowMessageDischarges) Interface() interface{}                     { return x.Value }
func (x BlessingsFlowMessageDischarges) Name() string                               { return "Discharges" }
func (x BlessingsFlowMessageDischarges) __VDLReflect(__BlessingsFlowMessageReflect) {}

func (m BlessingsFlowMessageDischarges) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Discharges")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m BlessingsFlowMessageDischarges) MakeVDLTarget() vdl.Target {
	return nil
}

func (x BlessingsFlowMessageEncryptedBlessings) Index() int                                 { return 2 }
func (x BlessingsFlowMessageEncryptedBlessings) Interface() interface{}                     { return x.Value }
func (x BlessingsFlowMessageEncryptedBlessings) Name() string                               { return "EncryptedBlessings" }
func (x BlessingsFlowMessageEncryptedBlessings) __VDLReflect(__BlessingsFlowMessageReflect) {}

func (m BlessingsFlowMessageEncryptedBlessings) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("EncryptedBlessings")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_EncryptedBlessings); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m BlessingsFlowMessageEncryptedBlessings) MakeVDLTarget() vdl.Target {
	return nil
}

func (x BlessingsFlowMessageEncryptedDischarges) Index() int                                 { return 3 }
func (x BlessingsFlowMessageEncryptedDischarges) Interface() interface{}                     { return x.Value }
func (x BlessingsFlowMessageEncryptedDischarges) Name() string                               { return "EncryptedDischarges" }
func (x BlessingsFlowMessageEncryptedDischarges) __VDLReflect(__BlessingsFlowMessageReflect) {}

func (m BlessingsFlowMessageEncryptedDischarges) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("EncryptedDischarges")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_EncryptedDischarges); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m BlessingsFlowMessageEncryptedDischarges) MakeVDLTarget() vdl.Target {
	return nil
}

func init() {
	vdl.Register((*Blessings)(nil))
	vdl.Register((*EncryptedBlessings)(nil))
	vdl.Register((*Discharges)(nil))
	vdl.Register((*EncryptedDischarges)(nil))
	vdl.Register((*BlessingsFlowMessage)(nil))
}

var __VDLTypetypes0 *vdl.Type

func __VDLTypetypes0_gen() *vdl.Type {
	__VDLTypetypes0Builder := vdl.TypeBuilder{}

	__VDLTypetypes01 := __VDLTypetypes0Builder.Optional()
	__VDLTypetypes02 := __VDLTypetypes0Builder.Struct()
	__VDLTypetypes03 := __VDLTypetypes0Builder.Named("v.io/x/ref/runtime/internal/flow/conn.Blessings").AssignBase(__VDLTypetypes02)
	__VDLTypetypes04 := __VDLTypetypes0Builder.Struct()
	__VDLTypetypes05 := __VDLTypetypes0Builder.Named("v.io/v23/security.WireBlessings").AssignBase(__VDLTypetypes04)
	__VDLTypetypes06 := __VDLTypetypes0Builder.List()
	__VDLTypetypes07 := __VDLTypetypes0Builder.List()
	__VDLTypetypes08 := __VDLTypetypes0Builder.Struct()
	__VDLTypetypes09 := __VDLTypetypes0Builder.Named("v.io/v23/security.Certificate").AssignBase(__VDLTypetypes08)
	__VDLTypetypes010 := vdl.StringType
	__VDLTypetypes08.AppendField("Extension", __VDLTypetypes010)
	__VDLTypetypes011 := __VDLTypetypes0Builder.List()
	__VDLTypetypes012 := vdl.ByteType
	__VDLTypetypes011.AssignElem(__VDLTypetypes012)
	__VDLTypetypes08.AppendField("PublicKey", __VDLTypetypes011)
	__VDLTypetypes013 := __VDLTypetypes0Builder.List()
	__VDLTypetypes014 := __VDLTypetypes0Builder.Struct()
	__VDLTypetypes015 := __VDLTypetypes0Builder.Named("v.io/v23/security.Caveat").AssignBase(__VDLTypetypes014)
	__VDLTypetypes016 := __VDLTypetypes0Builder.Array()
	__VDLTypetypes017 := __VDLTypetypes0Builder.Named("v.io/v23/uniqueid.Id").AssignBase(__VDLTypetypes016)
	__VDLTypetypes016.AssignElem(__VDLTypetypes012)
	__VDLTypetypes016.AssignLen(16)
	__VDLTypetypes014.AppendField("Id", __VDLTypetypes017)
	__VDLTypetypes014.AppendField("ParamVom", __VDLTypetypes011)
	__VDLTypetypes013.AssignElem(__VDLTypetypes015)
	__VDLTypetypes08.AppendField("Caveats", __VDLTypetypes013)
	__VDLTypetypes018 := __VDLTypetypes0Builder.Struct()
	__VDLTypetypes019 := __VDLTypetypes0Builder.Named("v.io/v23/security.Signature").AssignBase(__VDLTypetypes018)
	__VDLTypetypes018.AppendField("Purpose", __VDLTypetypes011)
	__VDLTypetypes020 := vdl.StringType
	__VDLTypetypes021 := __VDLTypetypes0Builder.Named("v.io/v23/security.Hash").AssignBase(__VDLTypetypes020)
	__VDLTypetypes018.AppendField("Hash", __VDLTypetypes021)
	__VDLTypetypes018.AppendField("R", __VDLTypetypes011)
	__VDLTypetypes018.AppendField("S", __VDLTypetypes011)
	__VDLTypetypes08.AppendField("Signature", __VDLTypetypes019)
	__VDLTypetypes07.AssignElem(__VDLTypetypes09)
	__VDLTypetypes06.AssignElem(__VDLTypetypes07)
	__VDLTypetypes04.AppendField("CertificateChains", __VDLTypetypes06)
	__VDLTypetypes02.AppendField("Blessings", __VDLTypetypes05)
	__VDLTypetypes022 := vdl.Uint64Type
	__VDLTypetypes02.AppendField("BKey", __VDLTypetypes022)
	__VDLTypetypes01.AssignElem(__VDLTypetypes03)
	__VDLTypetypes0Builder.Build()
	__VDLTypetypes0v, err := __VDLTypetypes01.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypetypes0v
}
func init() {
	__VDLTypetypes0 = __VDLTypetypes0_gen()
}

var __VDLTypetypes3 *vdl.Type

func __VDLTypetypes3_gen() *vdl.Type {
	__VDLTypetypes3Builder := vdl.TypeBuilder{}

	__VDLTypetypes31 := __VDLTypetypes3Builder.Optional()
	__VDLTypetypes32 := __VDLTypetypes3Builder.Struct()
	__VDLTypetypes33 := __VDLTypetypes3Builder.Named("v.io/x/ref/runtime/internal/flow/conn.Discharges").AssignBase(__VDLTypetypes32)
	__VDLTypetypes34 := __VDLTypetypes3Builder.List()
	__VDLTypetypes35 := __VDLTypetypes3Builder.Union()
	__VDLTypetypes36 := __VDLTypetypes3Builder.Named("v.io/v23/security.WireDischarge").AssignBase(__VDLTypetypes35)
	__VDLTypetypes37 := __VDLTypetypes3Builder.Struct()
	__VDLTypetypes38 := __VDLTypetypes3Builder.Named("v.io/v23/security.publicKeyDischarge").AssignBase(__VDLTypetypes37)
	__VDLTypetypes39 := vdl.StringType
	__VDLTypetypes37.AppendField("ThirdPartyCaveatId", __VDLTypetypes39)
	__VDLTypetypes310 := __VDLTypetypes3Builder.List()
	__VDLTypetypes311 := __VDLTypetypes3Builder.Struct()
	__VDLTypetypes312 := __VDLTypetypes3Builder.Named("v.io/v23/security.Caveat").AssignBase(__VDLTypetypes311)
	__VDLTypetypes313 := __VDLTypetypes3Builder.Array()
	__VDLTypetypes314 := __VDLTypetypes3Builder.Named("v.io/v23/uniqueid.Id").AssignBase(__VDLTypetypes313)
	__VDLTypetypes315 := vdl.ByteType
	__VDLTypetypes313.AssignElem(__VDLTypetypes315)
	__VDLTypetypes313.AssignLen(16)
	__VDLTypetypes311.AppendField("Id", __VDLTypetypes314)
	__VDLTypetypes316 := __VDLTypetypes3Builder.List()
	__VDLTypetypes316.AssignElem(__VDLTypetypes315)
	__VDLTypetypes311.AppendField("ParamVom", __VDLTypetypes316)
	__VDLTypetypes310.AssignElem(__VDLTypetypes312)
	__VDLTypetypes37.AppendField("Caveats", __VDLTypetypes310)
	__VDLTypetypes317 := __VDLTypetypes3Builder.Struct()
	__VDLTypetypes318 := __VDLTypetypes3Builder.Named("v.io/v23/security.Signature").AssignBase(__VDLTypetypes317)
	__VDLTypetypes317.AppendField("Purpose", __VDLTypetypes316)
	__VDLTypetypes319 := vdl.StringType
	__VDLTypetypes320 := __VDLTypetypes3Builder.Named("v.io/v23/security.Hash").AssignBase(__VDLTypetypes319)
	__VDLTypetypes317.AppendField("Hash", __VDLTypetypes320)
	__VDLTypetypes317.AppendField("R", __VDLTypetypes316)
	__VDLTypetypes317.AppendField("S", __VDLTypetypes316)
	__VDLTypetypes37.AppendField("Signature", __VDLTypetypes318)
	__VDLTypetypes35.AppendField("PublicKey", __VDLTypetypes38)
	__VDLTypetypes34.AssignElem(__VDLTypetypes36)
	__VDLTypetypes32.AppendField("Discharges", __VDLTypetypes34)
	__VDLTypetypes321 := vdl.Uint64Type
	__VDLTypetypes32.AppendField("DKey", __VDLTypetypes321)
	__VDLTypetypes32.AppendField("BKey", __VDLTypetypes321)
	__VDLTypetypes31.AssignElem(__VDLTypetypes33)
	__VDLTypetypes3Builder.Build()
	__VDLTypetypes3v, err := __VDLTypetypes31.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypetypes3v
}
func init() {
	__VDLTypetypes3 = __VDLTypetypes3_gen()
}

var __VDLTypetypes1 *vdl.Type = vdl.TypeOf((*EncryptedBlessings)(nil))
var __VDLTypetypes5 *vdl.Type = vdl.TypeOf((*EncryptedDischarges)(nil))
var __VDLTypetypes4 *vdl.Type

func __VDLTypetypes4_gen() *vdl.Type {
	__VDLTypetypes4Builder := vdl.TypeBuilder{}

	__VDLTypetypes41 := __VDLTypetypes4Builder.List()
	__VDLTypetypes42 := __VDLTypetypes4Builder.Union()
	__VDLTypetypes43 := __VDLTypetypes4Builder.Named("v.io/v23/security.WireDischarge").AssignBase(__VDLTypetypes42)
	__VDLTypetypes44 := __VDLTypetypes4Builder.Struct()
	__VDLTypetypes45 := __VDLTypetypes4Builder.Named("v.io/v23/security.publicKeyDischarge").AssignBase(__VDLTypetypes44)
	__VDLTypetypes46 := vdl.StringType
	__VDLTypetypes44.AppendField("ThirdPartyCaveatId", __VDLTypetypes46)
	__VDLTypetypes47 := __VDLTypetypes4Builder.List()
	__VDLTypetypes48 := __VDLTypetypes4Builder.Struct()
	__VDLTypetypes49 := __VDLTypetypes4Builder.Named("v.io/v23/security.Caveat").AssignBase(__VDLTypetypes48)
	__VDLTypetypes410 := __VDLTypetypes4Builder.Array()
	__VDLTypetypes411 := __VDLTypetypes4Builder.Named("v.io/v23/uniqueid.Id").AssignBase(__VDLTypetypes410)
	__VDLTypetypes412 := vdl.ByteType
	__VDLTypetypes410.AssignElem(__VDLTypetypes412)
	__VDLTypetypes410.AssignLen(16)
	__VDLTypetypes48.AppendField("Id", __VDLTypetypes411)
	__VDLTypetypes413 := __VDLTypetypes4Builder.List()
	__VDLTypetypes413.AssignElem(__VDLTypetypes412)
	__VDLTypetypes48.AppendField("ParamVom", __VDLTypetypes413)
	__VDLTypetypes47.AssignElem(__VDLTypetypes49)
	__VDLTypetypes44.AppendField("Caveats", __VDLTypetypes47)
	__VDLTypetypes414 := __VDLTypetypes4Builder.Struct()
	__VDLTypetypes415 := __VDLTypetypes4Builder.Named("v.io/v23/security.Signature").AssignBase(__VDLTypetypes414)
	__VDLTypetypes414.AppendField("Purpose", __VDLTypetypes413)
	__VDLTypetypes416 := vdl.StringType
	__VDLTypetypes417 := __VDLTypetypes4Builder.Named("v.io/v23/security.Hash").AssignBase(__VDLTypetypes416)
	__VDLTypetypes414.AppendField("Hash", __VDLTypetypes417)
	__VDLTypetypes414.AppendField("R", __VDLTypetypes413)
	__VDLTypetypes414.AppendField("S", __VDLTypetypes413)
	__VDLTypetypes44.AppendField("Signature", __VDLTypetypes415)
	__VDLTypetypes42.AppendField("PublicKey", __VDLTypetypes45)
	__VDLTypetypes41.AssignElem(__VDLTypetypes43)
	__VDLTypetypes4Builder.Build()
	__VDLTypetypes4v, err := __VDLTypetypes41.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypetypes4v
}
func init() {
	__VDLTypetypes4 = __VDLTypetypes4_gen()
}

var __VDLTypetypes2 *vdl.Type = vdl.TypeOf([]bcrypter.WireCiphertext(nil))
var __VDLType_types_v_io_v23_security_WireBlessings *vdl.Type

func __VDLType_types_v_io_v23_security_WireBlessings_gen() *vdl.Type {
	__VDLType_types_v_io_v23_security_WireBlessingsBuilder := vdl.TypeBuilder{}

	__VDLType_types_v_io_v23_security_WireBlessings1 := __VDLType_types_v_io_v23_security_WireBlessingsBuilder.Struct()
	__VDLType_types_v_io_v23_security_WireBlessings2 := __VDLType_types_v_io_v23_security_WireBlessingsBuilder.Named("v.io/v23/security.WireBlessings").AssignBase(__VDLType_types_v_io_v23_security_WireBlessings1)
	__VDLType_types_v_io_v23_security_WireBlessings3 := __VDLType_types_v_io_v23_security_WireBlessingsBuilder.List()
	__VDLType_types_v_io_v23_security_WireBlessings4 := __VDLType_types_v_io_v23_security_WireBlessingsBuilder.List()
	__VDLType_types_v_io_v23_security_WireBlessings5 := __VDLType_types_v_io_v23_security_WireBlessingsBuilder.Struct()
	__VDLType_types_v_io_v23_security_WireBlessings6 := __VDLType_types_v_io_v23_security_WireBlessingsBuilder.Named("v.io/v23/security.Certificate").AssignBase(__VDLType_types_v_io_v23_security_WireBlessings5)
	__VDLType_types_v_io_v23_security_WireBlessings7 := vdl.StringType
	__VDLType_types_v_io_v23_security_WireBlessings5.AppendField("Extension", __VDLType_types_v_io_v23_security_WireBlessings7)
	__VDLType_types_v_io_v23_security_WireBlessings8 := __VDLType_types_v_io_v23_security_WireBlessingsBuilder.List()
	__VDLType_types_v_io_v23_security_WireBlessings9 := vdl.ByteType
	__VDLType_types_v_io_v23_security_WireBlessings8.AssignElem(__VDLType_types_v_io_v23_security_WireBlessings9)
	__VDLType_types_v_io_v23_security_WireBlessings5.AppendField("PublicKey", __VDLType_types_v_io_v23_security_WireBlessings8)
	__VDLType_types_v_io_v23_security_WireBlessings10 := __VDLType_types_v_io_v23_security_WireBlessingsBuilder.List()
	__VDLType_types_v_io_v23_security_WireBlessings11 := __VDLType_types_v_io_v23_security_WireBlessingsBuilder.Struct()
	__VDLType_types_v_io_v23_security_WireBlessings12 := __VDLType_types_v_io_v23_security_WireBlessingsBuilder.Named("v.io/v23/security.Caveat").AssignBase(__VDLType_types_v_io_v23_security_WireBlessings11)
	__VDLType_types_v_io_v23_security_WireBlessings13 := __VDLType_types_v_io_v23_security_WireBlessingsBuilder.Array()
	__VDLType_types_v_io_v23_security_WireBlessings14 := __VDLType_types_v_io_v23_security_WireBlessingsBuilder.Named("v.io/v23/uniqueid.Id").AssignBase(__VDLType_types_v_io_v23_security_WireBlessings13)
	__VDLType_types_v_io_v23_security_WireBlessings13.AssignElem(__VDLType_types_v_io_v23_security_WireBlessings9)
	__VDLType_types_v_io_v23_security_WireBlessings13.AssignLen(16)
	__VDLType_types_v_io_v23_security_WireBlessings11.AppendField("Id", __VDLType_types_v_io_v23_security_WireBlessings14)
	__VDLType_types_v_io_v23_security_WireBlessings11.AppendField("ParamVom", __VDLType_types_v_io_v23_security_WireBlessings8)
	__VDLType_types_v_io_v23_security_WireBlessings10.AssignElem(__VDLType_types_v_io_v23_security_WireBlessings12)
	__VDLType_types_v_io_v23_security_WireBlessings5.AppendField("Caveats", __VDLType_types_v_io_v23_security_WireBlessings10)
	__VDLType_types_v_io_v23_security_WireBlessings15 := __VDLType_types_v_io_v23_security_WireBlessingsBuilder.Struct()
	__VDLType_types_v_io_v23_security_WireBlessings16 := __VDLType_types_v_io_v23_security_WireBlessingsBuilder.Named("v.io/v23/security.Signature").AssignBase(__VDLType_types_v_io_v23_security_WireBlessings15)
	__VDLType_types_v_io_v23_security_WireBlessings15.AppendField("Purpose", __VDLType_types_v_io_v23_security_WireBlessings8)
	__VDLType_types_v_io_v23_security_WireBlessings17 := vdl.StringType
	__VDLType_types_v_io_v23_security_WireBlessings18 := __VDLType_types_v_io_v23_security_WireBlessingsBuilder.Named("v.io/v23/security.Hash").AssignBase(__VDLType_types_v_io_v23_security_WireBlessings17)
	__VDLType_types_v_io_v23_security_WireBlessings15.AppendField("Hash", __VDLType_types_v_io_v23_security_WireBlessings18)
	__VDLType_types_v_io_v23_security_WireBlessings15.AppendField("R", __VDLType_types_v_io_v23_security_WireBlessings8)
	__VDLType_types_v_io_v23_security_WireBlessings15.AppendField("S", __VDLType_types_v_io_v23_security_WireBlessings8)
	__VDLType_types_v_io_v23_security_WireBlessings5.AppendField("Signature", __VDLType_types_v_io_v23_security_WireBlessings16)
	__VDLType_types_v_io_v23_security_WireBlessings4.AssignElem(__VDLType_types_v_io_v23_security_WireBlessings6)
	__VDLType_types_v_io_v23_security_WireBlessings3.AssignElem(__VDLType_types_v_io_v23_security_WireBlessings4)
	__VDLType_types_v_io_v23_security_WireBlessings1.AppendField("CertificateChains", __VDLType_types_v_io_v23_security_WireBlessings3)
	__VDLType_types_v_io_v23_security_WireBlessingsBuilder.Build()
	__VDLType_types_v_io_v23_security_WireBlessingsv, err := __VDLType_types_v_io_v23_security_WireBlessings2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_types_v_io_v23_security_WireBlessingsv
}
func init() {
	__VDLType_types_v_io_v23_security_WireBlessings = __VDLType_types_v_io_v23_security_WireBlessings_gen()
}

var __VDLType_types_v_io_v23_security_WireDischarge *vdl.Type

func __VDLType_types_v_io_v23_security_WireDischarge_gen() *vdl.Type {
	__VDLType_types_v_io_v23_security_WireDischargeBuilder := vdl.TypeBuilder{}

	__VDLType_types_v_io_v23_security_WireDischarge1 := __VDLType_types_v_io_v23_security_WireDischargeBuilder.Union()
	__VDLType_types_v_io_v23_security_WireDischarge2 := __VDLType_types_v_io_v23_security_WireDischargeBuilder.Named("v.io/v23/security.WireDischarge").AssignBase(__VDLType_types_v_io_v23_security_WireDischarge1)
	__VDLType_types_v_io_v23_security_WireDischarge3 := __VDLType_types_v_io_v23_security_WireDischargeBuilder.Struct()
	__VDLType_types_v_io_v23_security_WireDischarge4 := __VDLType_types_v_io_v23_security_WireDischargeBuilder.Named("v.io/v23/security.publicKeyDischarge").AssignBase(__VDLType_types_v_io_v23_security_WireDischarge3)
	__VDLType_types_v_io_v23_security_WireDischarge5 := vdl.StringType
	__VDLType_types_v_io_v23_security_WireDischarge3.AppendField("ThirdPartyCaveatId", __VDLType_types_v_io_v23_security_WireDischarge5)
	__VDLType_types_v_io_v23_security_WireDischarge6 := __VDLType_types_v_io_v23_security_WireDischargeBuilder.List()
	__VDLType_types_v_io_v23_security_WireDischarge7 := __VDLType_types_v_io_v23_security_WireDischargeBuilder.Struct()
	__VDLType_types_v_io_v23_security_WireDischarge8 := __VDLType_types_v_io_v23_security_WireDischargeBuilder.Named("v.io/v23/security.Caveat").AssignBase(__VDLType_types_v_io_v23_security_WireDischarge7)
	__VDLType_types_v_io_v23_security_WireDischarge9 := __VDLType_types_v_io_v23_security_WireDischargeBuilder.Array()
	__VDLType_types_v_io_v23_security_WireDischarge10 := __VDLType_types_v_io_v23_security_WireDischargeBuilder.Named("v.io/v23/uniqueid.Id").AssignBase(__VDLType_types_v_io_v23_security_WireDischarge9)
	__VDLType_types_v_io_v23_security_WireDischarge11 := vdl.ByteType
	__VDLType_types_v_io_v23_security_WireDischarge9.AssignElem(__VDLType_types_v_io_v23_security_WireDischarge11)
	__VDLType_types_v_io_v23_security_WireDischarge9.AssignLen(16)
	__VDLType_types_v_io_v23_security_WireDischarge7.AppendField("Id", __VDLType_types_v_io_v23_security_WireDischarge10)
	__VDLType_types_v_io_v23_security_WireDischarge12 := __VDLType_types_v_io_v23_security_WireDischargeBuilder.List()
	__VDLType_types_v_io_v23_security_WireDischarge12.AssignElem(__VDLType_types_v_io_v23_security_WireDischarge11)
	__VDLType_types_v_io_v23_security_WireDischarge7.AppendField("ParamVom", __VDLType_types_v_io_v23_security_WireDischarge12)
	__VDLType_types_v_io_v23_security_WireDischarge6.AssignElem(__VDLType_types_v_io_v23_security_WireDischarge8)
	__VDLType_types_v_io_v23_security_WireDischarge3.AppendField("Caveats", __VDLType_types_v_io_v23_security_WireDischarge6)
	__VDLType_types_v_io_v23_security_WireDischarge13 := __VDLType_types_v_io_v23_security_WireDischargeBuilder.Struct()
	__VDLType_types_v_io_v23_security_WireDischarge14 := __VDLType_types_v_io_v23_security_WireDischargeBuilder.Named("v.io/v23/security.Signature").AssignBase(__VDLType_types_v_io_v23_security_WireDischarge13)
	__VDLType_types_v_io_v23_security_WireDischarge13.AppendField("Purpose", __VDLType_types_v_io_v23_security_WireDischarge12)
	__VDLType_types_v_io_v23_security_WireDischarge15 := vdl.StringType
	__VDLType_types_v_io_v23_security_WireDischarge16 := __VDLType_types_v_io_v23_security_WireDischargeBuilder.Named("v.io/v23/security.Hash").AssignBase(__VDLType_types_v_io_v23_security_WireDischarge15)
	__VDLType_types_v_io_v23_security_WireDischarge13.AppendField("Hash", __VDLType_types_v_io_v23_security_WireDischarge16)
	__VDLType_types_v_io_v23_security_WireDischarge13.AppendField("R", __VDLType_types_v_io_v23_security_WireDischarge12)
	__VDLType_types_v_io_v23_security_WireDischarge13.AppendField("S", __VDLType_types_v_io_v23_security_WireDischarge12)
	__VDLType_types_v_io_v23_security_WireDischarge3.AppendField("Signature", __VDLType_types_v_io_v23_security_WireDischarge14)
	__VDLType_types_v_io_v23_security_WireDischarge1.AppendField("PublicKey", __VDLType_types_v_io_v23_security_WireDischarge4)
	__VDLType_types_v_io_v23_security_WireDischargeBuilder.Build()
	__VDLType_types_v_io_v23_security_WireDischargev, err := __VDLType_types_v_io_v23_security_WireDischarge2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_types_v_io_v23_security_WireDischargev
}
func init() {
	__VDLType_types_v_io_v23_security_WireDischarge = __VDLType_types_v_io_v23_security_WireDischarge_gen()
}

var __VDLType_types_v_io_x_ref_lib_security_bcrypter_WireCiphertext *vdl.Type = vdl.TypeOf(bcrypter.WireCiphertext{})
var __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings *vdl.Type

func __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings_gen() *vdl.Type {
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder := vdl.TypeBuilder{}

	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings1 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings2 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.Named("v.io/x/ref/runtime/internal/flow/conn.Blessings").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings1)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings3 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings4 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.Named("v.io/v23/security.WireBlessings").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings3)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings5 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.List()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings6 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.List()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings7 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings8 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.Named("v.io/v23/security.Certificate").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings7)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings9 := vdl.StringType
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings7.AppendField("Extension", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings9)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings10 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.List()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings11 := vdl.ByteType
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings10.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings11)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings7.AppendField("PublicKey", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings10)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings12 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.List()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings13 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings14 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.Named("v.io/v23/security.Caveat").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings13)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings15 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.Array()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings16 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.Named("v.io/v23/uniqueid.Id").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings15)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings15.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings11)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings15.AssignLen(16)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings13.AppendField("Id", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings16)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings13.AppendField("ParamVom", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings10)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings12.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings14)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings7.AppendField("Caveats", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings12)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings17 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings18 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.Named("v.io/v23/security.Signature").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings17)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings17.AppendField("Purpose", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings10)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings19 := vdl.StringType
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings20 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.Named("v.io/v23/security.Hash").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings19)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings17.AppendField("Hash", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings20)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings17.AppendField("R", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings10)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings17.AppendField("S", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings10)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings7.AppendField("Signature", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings18)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings6.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings8)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings5.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings6)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings3.AppendField("CertificateChains", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings5)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings1.AppendField("Blessings", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings4)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings21 := vdl.Uint64Type
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings1.AppendField("BKey", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings21)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsBuilder.Build()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessingsv, err := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessingsv
}
func init() {
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings = __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings_gen()
}

var __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage *vdl.Type

func __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage_gen() *vdl.Type {
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder := vdl.TypeBuilder{}

	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage1 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Union()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage2 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Named("v.io/x/ref/runtime/internal/flow/conn.BlessingsFlowMessage").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage1)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage3 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage4 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Named("v.io/x/ref/runtime/internal/flow/conn.Blessings").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage3)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage5 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage6 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Named("v.io/v23/security.WireBlessings").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage5)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage7 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.List()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage8 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.List()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage9 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage10 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Named("v.io/v23/security.Certificate").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage9)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage11 := vdl.StringType
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage9.AppendField("Extension", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage11)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage12 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.List()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage13 := vdl.ByteType
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage12.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage13)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage9.AppendField("PublicKey", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage12)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage14 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.List()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage15 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage16 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Named("v.io/v23/security.Caveat").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage15)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage17 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Array()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage18 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Named("v.io/v23/uniqueid.Id").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage17)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage17.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage13)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage17.AssignLen(16)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage15.AppendField("Id", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage18)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage15.AppendField("ParamVom", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage12)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage14.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage16)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage9.AppendField("Caveats", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage14)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage19 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage20 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Named("v.io/v23/security.Signature").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage19)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage19.AppendField("Purpose", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage12)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage21 := vdl.StringType
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage22 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Named("v.io/v23/security.Hash").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage21)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage19.AppendField("Hash", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage22)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage19.AppendField("R", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage12)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage19.AppendField("S", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage12)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage9.AppendField("Signature", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage20)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage8.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage10)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage7.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage8)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage5.AppendField("CertificateChains", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage7)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage3.AppendField("Blessings", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage6)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage23 := vdl.Uint64Type
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage3.AppendField("BKey", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage23)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage1.AppendField("Blessings", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage4)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage24 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage25 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Named("v.io/x/ref/runtime/internal/flow/conn.Discharges").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage24)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage26 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.List()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage27 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Union()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage28 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Named("v.io/v23/security.WireDischarge").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage27)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage29 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage30 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Named("v.io/v23/security.publicKeyDischarge").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage29)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage29.AppendField("ThirdPartyCaveatId", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage11)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage29.AppendField("Caveats", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage14)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage29.AppendField("Signature", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage20)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage27.AppendField("PublicKey", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage30)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage26.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage28)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage24.AppendField("Discharges", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage26)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage24.AppendField("DKey", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage23)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage24.AppendField("BKey", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage23)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage1.AppendField("Discharges", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage25)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage31 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage32 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Named("v.io/x/ref/runtime/internal/flow/conn.EncryptedBlessings").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage31)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage33 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.List()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage34 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage35 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Named("v.io/x/ref/lib/security/bcrypter.WireCiphertext").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage34)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage34.AppendField("PatternId", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage11)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage36 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Map()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage36.AssignKey(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage11)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage36.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage12)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage34.AppendField("Bytes", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage36)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage33.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage35)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage31.AppendField("Ciphertexts", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage33)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage31.AppendField("BKey", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage23)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage1.AppendField("EncryptedBlessings", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage32)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage37 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage38 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Named("v.io/x/ref/runtime/internal/flow/conn.EncryptedDischarges").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage37)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage37.AppendField("Ciphertexts", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage33)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage37.AppendField("DKey", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage23)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage37.AppendField("BKey", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage23)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage1.AppendField("EncryptedDischarges", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage38)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessageBuilder.Build()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessagev, err := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessagev
}
func init() {
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage = __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage_gen()
}

var __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges *vdl.Type

func __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges_gen() *vdl.Type {
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder := vdl.TypeBuilder{}

	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges1 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges2 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.Named("v.io/x/ref/runtime/internal/flow/conn.Discharges").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges1)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges3 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.List()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges4 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.Union()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges5 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.Named("v.io/v23/security.WireDischarge").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges4)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges6 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges7 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.Named("v.io/v23/security.publicKeyDischarge").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges6)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges8 := vdl.StringType
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges6.AppendField("ThirdPartyCaveatId", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges8)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges9 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.List()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges10 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges11 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.Named("v.io/v23/security.Caveat").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges10)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges12 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.Array()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges13 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.Named("v.io/v23/uniqueid.Id").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges12)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges14 := vdl.ByteType
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges12.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges14)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges12.AssignLen(16)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges10.AppendField("Id", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges13)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges15 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.List()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges15.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges14)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges10.AppendField("ParamVom", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges15)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges9.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges11)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges6.AppendField("Caveats", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges9)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges16 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.Struct()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges17 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.Named("v.io/v23/security.Signature").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges16)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges16.AppendField("Purpose", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges15)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges18 := vdl.StringType
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges19 := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.Named("v.io/v23/security.Hash").AssignBase(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges18)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges16.AppendField("Hash", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges19)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges16.AppendField("R", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges15)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges16.AppendField("S", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges15)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges6.AppendField("Signature", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges17)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges4.AppendField("PublicKey", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges7)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges3.AssignElem(__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges5)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges1.AppendField("Discharges", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges3)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges20 := vdl.Uint64Type
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges1.AppendField("DKey", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges20)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges1.AppendField("BKey", __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges20)
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_DischargesBuilder.Build()
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Dischargesv, err := __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Dischargesv
}
func init() {
	__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges = __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges_gen()
}

var __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_EncryptedBlessings *vdl.Type = vdl.TypeOf(EncryptedBlessings{})
var __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_EncryptedDischarges *vdl.Type = vdl.TypeOf(EncryptedDischarges{})

func __VDLEnsureNativeBuilt_types() {
	if __VDLTypetypes0 == nil {
		__VDLTypetypes0 = __VDLTypetypes0_gen()
	}
	if __VDLTypetypes3 == nil {
		__VDLTypetypes3 = __VDLTypetypes3_gen()
	}
	if __VDLTypetypes4 == nil {
		__VDLTypetypes4 = __VDLTypetypes4_gen()
	}
	if __VDLType_types_v_io_v23_security_WireBlessings == nil {
		__VDLType_types_v_io_v23_security_WireBlessings = __VDLType_types_v_io_v23_security_WireBlessings_gen()
	}
	if __VDLType_types_v_io_v23_security_WireDischarge == nil {
		__VDLType_types_v_io_v23_security_WireDischarge = __VDLType_types_v_io_v23_security_WireDischarge_gen()
	}
	if __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings == nil {
		__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings = __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Blessings_gen()
	}
	if __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage == nil {
		__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage = __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_BlessingsFlowMessage_gen()
	}
	if __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges == nil {
		__VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges = __VDLType_types_v_io_x_ref_runtime_internal_flow_conn_Discharges_gen()
	}
}
