// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Source: gen_iszero_testcases.vdl

package internal

import (
	// VDL system imports
	"v.io/v23/vdl"
)

type A int8

func (A) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/lib/vdl/codegen/golang/internal.A"`
}) {
}

func (m A) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if err := t.FromInt(int64(m), __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_A); err != nil {
		return err
	}
	return nil
}

func (m A) MakeVDLTarget() vdl.Target {
	return nil
}

func (m A) IsZero() bool {

	var1 := (m == A(0))
	return var1
}

type B struct {
	X bool
}

func (B) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/lib/vdl/codegen/golang/internal.B"`
}) {
}

func (m *B) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_B == nil || __VDLTypegen_iszero_testcases0 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	var2 := (m.X == false)
	if !var2 {
		keyTarget3, fieldTarget4, err := fieldsTarget1.StartField("X")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {
			if err := fieldTarget4.FromBool(bool(m.X), vdl.BoolType); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget3, fieldTarget4); err != nil {
				return err
			}
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *B) MakeVDLTarget() vdl.Target {
	return nil
}

func (m *B) IsZero() bool {

	var1 := (*m == B{})
	return var1
}

type C struct {
	A A
	B B
}

func (C) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/lib/vdl/codegen/golang/internal.C"`
}) {
}

func (m *C) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_C == nil || __VDLTypegen_iszero_testcases1 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	var2 := m.A.IsZero()
	if !var2 {
		keyTarget3, fieldTarget4, err := fieldsTarget1.StartField("A")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {

			if err := m.A.FillVDLTarget(fieldTarget4, __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_A); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget3, fieldTarget4); err != nil {
				return err
			}
		}
	}
	var5 := m.B.IsZero()
	if !var5 {
		keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("B")
		if err != vdl.ErrFieldNoExist && err != nil {
			return err
		}
		if err != vdl.ErrFieldNoExist {

			if err := m.B.FillVDLTarget(fieldTarget7, __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_B); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
				return err
			}
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *C) MakeVDLTarget() vdl.Target {
	return nil
}

func (m *C) IsZero() bool {

	var1 := (*m == C{})
	return var1
}

type D [4]byte

func (D) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/lib/vdl/codegen/golang/internal.D"`
}) {
}

func (m D) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if err := t.FromBytes([]byte(m[:]), __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_D); err != nil {
		return err
	}
	return nil
}

func (m D) MakeVDLTarget() vdl.Target {
	return nil
}

func (m D) IsZero() bool {

	var1 := (m == D{})
	return var1
}

type E string

func (E) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/lib/vdl/codegen/golang/internal.E"`
}) {
}

func (m E) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if err := t.FromString(string(m), __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_E); err != nil {
		return err
	}
	return nil
}

func (m E) MakeVDLTarget() vdl.Target {
	return nil
}

func (m E) IsZero() bool {

	var1 := (m == E(""))
	return var1
}

type F [4]int8

func (F) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/lib/vdl/codegen/golang/internal.F"`
}) {
}

func (m F) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	listTarget1, err := t.StartList(__VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_F, 4)
	if err != nil {
		return err
	}
	for i, elem3 := range m {
		elemTarget2, err := listTarget1.StartElem(i)
		if err != nil {
			return err
		}
		if err := elemTarget2.FromInt(int64(elem3), vdl.Int8Type); err != nil {
			return err
		}
		if err := listTarget1.FinishElem(elemTarget2); err != nil {
			return err
		}
	}
	if err := t.FinishList(listTarget1); err != nil {
		return err
	}
	return nil
}

func (m F) MakeVDLTarget() vdl.Target {
	return nil
}

func (m F) IsZero() bool {

	var1 := (m == F{})
	return var1
}

type G []int8

func (G) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/lib/vdl/codegen/golang/internal.G"`
}) {
}

func (m G) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	listTarget1, err := t.StartList(__VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_G, len(m))
	if err != nil {
		return err
	}
	for i, elem3 := range m {
		elemTarget2, err := listTarget1.StartElem(i)
		if err != nil {
			return err
		}
		if err := elemTarget2.FromInt(int64(elem3), vdl.Int8Type); err != nil {
			return err
		}
		if err := listTarget1.FinishElem(elemTarget2); err != nil {
			return err
		}
	}
	if err := t.FinishList(listTarget1); err != nil {
		return err
	}
	return nil
}

func (m G) MakeVDLTarget() vdl.Target {
	return nil
}

func (m G) IsZero() bool {

	var var1 bool
	if len(m) == 0 {
		var1 = true
	}
	return var1
}

type (
	// H represents any single field of the H union type.
	H interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the H union type.
		__VDLReflect(__HReflect)
		FillVDLTarget(vdl.Target, *vdl.Type) error
		IsZero() bool
	}
	// HA represents field A of the H union type.
	HA struct{ Value A }
	// HB represents field B of the H union type.
	HB struct{ Value B }
	// __HReflect describes the H union type.
	__HReflect struct {
		Name  string `vdl:"v.io/x/ref/lib/vdl/codegen/golang/internal.H"`
		Type  H
		Union struct {
			A HA
			B HB
		}
	}
)

func (x HA) Index() int              { return 0 }
func (x HA) Interface() interface{}  { return x.Value }
func (x HA) Name() string            { return "A" }
func (x HA) __VDLReflect(__HReflect) {}

func (m HA) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	fieldsTarget1, err := t.StartFields(__VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_H)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("A")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_A); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m HA) MakeVDLTarget() vdl.Target {
	return nil
}

func (m HA) IsZero() bool {

	var2 := m.Value.IsZero()
	return var2
}

func (x HB) Index() int              { return 1 }
func (x HB) Interface() interface{}  { return x.Value }
func (x HB) Name() string            { return "B" }
func (x HB) __VDLReflect(__HReflect) {}

func (m HB) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	fieldsTarget1, err := t.StartFields(__VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_H)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("B")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_B); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m HB) MakeVDLTarget() vdl.Target {
	return nil
}

func (m HB) IsZero() bool {

	unionField2 := false
	return unionField2
}

type (
	// I represents any single field of the I union type.
	I interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the I union type.
		__VDLReflect(__IReflect)
		FillVDLTarget(vdl.Target, *vdl.Type) error
		IsZero() bool
	}
	// IA represents field A of the I union type.
	IA struct{ Value A }
	// IB represents field B of the I union type.
	IB struct{ Value B }
	// IC represents field C of the I union type.
	IC struct{ Value C }
	// ID represents field D of the I union type.
	ID struct{ Value D }
	// __IReflect describes the I union type.
	__IReflect struct {
		Name  string `vdl:"v.io/x/ref/lib/vdl/codegen/golang/internal.I"`
		Type  I
		Union struct {
			A IA
			B IB
			C IC
			D ID
		}
	}
)

func (x IA) Index() int              { return 0 }
func (x IA) Interface() interface{}  { return x.Value }
func (x IA) Name() string            { return "A" }
func (x IA) __VDLReflect(__IReflect) {}

func (m IA) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	fieldsTarget1, err := t.StartFields(__VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_I)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("A")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_A); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m IA) MakeVDLTarget() vdl.Target {
	return nil
}

func (m IA) IsZero() bool {

	var2 := m.Value.IsZero()
	return var2
}

func (x IB) Index() int              { return 1 }
func (x IB) Interface() interface{}  { return x.Value }
func (x IB) Name() string            { return "B" }
func (x IB) __VDLReflect(__IReflect) {}

func (m IB) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	fieldsTarget1, err := t.StartFields(__VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_I)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("B")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_B); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m IB) MakeVDLTarget() vdl.Target {
	return nil
}

func (m IB) IsZero() bool {

	unionField2 := false
	return unionField2
}

func (x IC) Index() int              { return 2 }
func (x IC) Interface() interface{}  { return x.Value }
func (x IC) Name() string            { return "C" }
func (x IC) __VDLReflect(__IReflect) {}

func (m IC) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	fieldsTarget1, err := t.StartFields(__VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_I)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("C")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_C); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m IC) MakeVDLTarget() vdl.Target {
	return nil
}

func (m IC) IsZero() bool {

	unionField2 := false
	return unionField2
}

func (x ID) Index() int              { return 3 }
func (x ID) Interface() interface{}  { return x.Value }
func (x ID) Name() string            { return "D" }
func (x ID) __VDLReflect(__IReflect) {}

func (m ID) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	fieldsTarget1, err := t.StartFields(__VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_I)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("D")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_D); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m ID) MakeVDLTarget() vdl.Target {
	return nil
}

func (m ID) IsZero() bool {

	unionField2 := false
	return unionField2
}

func init() {
	vdl.Register((*A)(nil))
	vdl.Register((*B)(nil))
	vdl.Register((*C)(nil))
	vdl.Register((*D)(nil))
	vdl.Register((*E)(nil))
	vdl.Register((*F)(nil))
	vdl.Register((*G)(nil))
	vdl.Register((*H)(nil))
	vdl.Register((*I)(nil))
}

var __VDLTypegen_iszero_testcases0 *vdl.Type = vdl.TypeOf((*B)(nil))
var __VDLTypegen_iszero_testcases1 *vdl.Type = vdl.TypeOf((*C)(nil))
var __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_A *vdl.Type = vdl.TypeOf(A(0))
var __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_B *vdl.Type = vdl.TypeOf(B{})
var __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_C *vdl.Type = vdl.TypeOf(C{})
var __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_D *vdl.Type = vdl.TypeOf(D{})
var __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_E *vdl.Type = vdl.TypeOf(E(""))
var __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_F *vdl.Type = vdl.TypeOf(F{})
var __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_G *vdl.Type = vdl.TypeOf(G(nil))
var __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_H *vdl.Type = vdl.TypeOf(H(HA{A(0)}))
var __VDLType_gen_iszero_testcases_v_io_x_ref_lib_vdl_codegen_golang_internal_I *vdl.Type = vdl.TypeOf(I(IA{A(0)}))

func __VDLEnsureNativeBuilt_gen_iszero_testcases() {
}

const ZA = A(0)

const NZA = A(1)

var ZB = B{}

var NZB = B{
	X: true,
}

var ZC = C{}

var NZC = C{
	B: B{
		X: true,
	},
}

var ZD = D{}

var NZD = D{
	0,
	1,
	0,
	0,
}

const ZE = E("")

const NZE = E("abc")

var ZF = F{}

var NZF = F{
	0,
	1,
	0,
	0,
}

var ZG = G(nil)

var NZG = G{
	1,
	2,
}

var ZH = H(HA{A(0)})

var NZH = H(HB{B{
	X: true,
}})

var ZI = I(IA{A(0)})

var NZI1 = I(IB{B{}}) // zero-valued non-default union fields should be non-zero

var NZI2 = I(IA{A(1)})
