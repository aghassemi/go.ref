// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: nativedep

package nativedep

import (
	"fmt"
	"time"
	"v.io/v23/vdl"
	"v.io/v23/vdl/testdata/nativetest"
	nativetest_2 "v.io/x/ref/lib/vdl/testdata/nativetest"
)

var _ = __VDLInit() // Must be first; see __VDLInit comments for details.

//////////////////////////////////////////////////
// Type definitions

type All struct {
	A string
	B time.Time
	C nativetest.NativeSamePkg
	D map[nativetest.NativeSamePkg]time.Time
}

func (All) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/lib/vdl/testdata/nativedep.All"`
}) {
}

func (m *All) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}
	var wireValue2 nativetest_2.WireString
	if err := nativetest_2.WireStringFromNative(&wireValue2, m.A); err != nil {
		return err
	}

	var5 := (wireValue2 == nativetest_2.WireString(0))
	if var5 {
		if err := fieldsTarget1.ZeroField("A"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget3, fieldTarget4, err := fieldsTarget1.StartField("A")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}

			if err := wireValue2.FillVDLTarget(fieldTarget4, tt.NonOptional().Field(0).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget3, fieldTarget4); err != nil {
				return err
			}
		}
	}
	var wireValue6 nativetest_2.WireTime
	if err := nativetest_2.WireTimeFromNative(&wireValue6, m.B); err != nil {
		return err
	}

	var9 := (wireValue6 == nativetest_2.WireTime(0))
	if var9 {
		if err := fieldsTarget1.ZeroField("B"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget7, fieldTarget8, err := fieldsTarget1.StartField("B")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}

			if err := wireValue6.FillVDLTarget(fieldTarget8, tt.NonOptional().Field(1).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget7, fieldTarget8); err != nil {
				return err
			}
		}
	}
	var wireValue10 nativetest_2.WireSamePkg
	if err := nativetest_2.WireSamePkgFromNative(&wireValue10, m.C); err != nil {
		return err
	}

	var13 := (wireValue10 == nativetest_2.WireSamePkg(0))
	if var13 {
		if err := fieldsTarget1.ZeroField("C"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget11, fieldTarget12, err := fieldsTarget1.StartField("C")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}

			if err := wireValue10.FillVDLTarget(fieldTarget12, tt.NonOptional().Field(2).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget11, fieldTarget12); err != nil {
				return err
			}
		}
	}
	var wireValue14 nativetest_2.WireMultiImport
	if err := nativetest_2.WireMultiImportFromNative(&wireValue14, m.D); err != nil {
		return err
	}

	var17 := (wireValue14 == nativetest_2.WireMultiImport(0))
	if var17 {
		if err := fieldsTarget1.ZeroField("D"); err != nil && err != vdl.ErrFieldNoExist {
			return err
		}
	} else {
		keyTarget15, fieldTarget16, err := fieldsTarget1.StartField("D")
		if err != vdl.ErrFieldNoExist {
			if err != nil {
				return err
			}

			if err := wireValue14.FillVDLTarget(fieldTarget16, tt.NonOptional().Field(3).Type); err != nil {
				return err
			}
			if err := fieldsTarget1.FinishField(keyTarget15, fieldTarget16); err != nil {
				return err
			}
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *All) MakeVDLTarget() vdl.Target {
	return &AllTarget{Value: m}
}

type AllTarget struct {
	Value   *All
	aTarget nativetest_2.WireStringTarget
	bTarget nativetest_2.WireTimeTarget
	cTarget nativetest_2.WireSamePkgTarget
	dTarget nativetest_2.WireMultiImportTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *AllTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if ttWant := vdl.TypeOf((*All)(nil)).Elem(); !vdl.Compatible(tt, ttWant) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, ttWant)
	}
	return t, nil
}
func (t *AllTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "A":
		t.aTarget.Value = &t.Value.A
		target, err := &t.aTarget, error(nil)
		return nil, target, err
	case "B":
		t.bTarget.Value = &t.Value.B
		target, err := &t.bTarget, error(nil)
		return nil, target, err
	case "C":
		t.cTarget.Value = &t.Value.C
		target, err := &t.cTarget, error(nil)
		return nil, target, err
	case "D":
		t.dTarget.Value = &t.Value.D
		target, err := &t.dTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct v.io/x/ref/lib/vdl/testdata/nativedep.All", name)
	}
}
func (t *AllTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *AllTarget) ZeroField(name string) error {
	switch name {
	case "A":
		t.Value.A = string("")
		return nil
	case "B":
		t.Value.B = time.Time{}
		return nil
	case "C":
		t.Value.C = nativetest.NativeSamePkg("")
		return nil
	case "D":
		t.Value.D = map[nativetest.NativeSamePkg]time.Time(nil)
		return nil
	default:
		return fmt.Errorf("field %s not in struct v.io/x/ref/lib/vdl/testdata/nativedep.All", name)
	}
}
func (t *AllTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

func (x All) VDLIsZero() bool {
	if x.A != string("") {
		return false
	}
	if !x.B.IsZero() {
		return false
	}
	if x.C != nativetest.NativeSamePkg("") {
		return false
	}
	if x.D != map[nativetest.NativeSamePkg]time.Time(nil) {
		return false
	}
	return true
}

func (x All) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*All)(nil)).Elem()); err != nil {
		return err
	}
	if x.A != string("") {
		if err := enc.NextField("A"); err != nil {
			return err
		}
		var wire nativetest_2.WireString
		if err := nativetest_2.WireStringFromNative(&wire, x.A); err != nil {
			return err
		}
		if err := wire.VDLWrite(enc); err != nil {
			return err
		}
	}
	if !x.B.IsZero() {
		if err := enc.NextField("B"); err != nil {
			return err
		}
		var wire nativetest_2.WireTime
		if err := nativetest_2.WireTimeFromNative(&wire, x.B); err != nil {
			return err
		}
		if err := wire.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.C != nativetest.NativeSamePkg("") {
		if err := enc.NextField("C"); err != nil {
			return err
		}
		var wire nativetest_2.WireSamePkg
		if err := nativetest_2.WireSamePkgFromNative(&wire, x.C); err != nil {
			return err
		}
		if err := wire.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.D != map[nativetest.NativeSamePkg]time.Time(nil) {
		if err := enc.NextField("D"); err != nil {
			return err
		}
		var wire nativetest_2.WireMultiImport
		if err := nativetest_2.WireMultiImportFromNative(&wire, x.D); err != nil {
			return err
		}
		if err := wire.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *All) VDLRead(dec vdl.Decoder) error {
	*x = All{}
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible struct %T, from %v", *x, dec.Type())
	}
	for {
		f, err := dec.NextField()
		if err != nil {
			return err
		}
		switch f {
		case "":
			return dec.FinishValue()
		case "A":
			var wire nativetest_2.WireString
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := nativetest_2.WireStringToNative(wire, &x.A); err != nil {
				return err
			}
		case "B":
			var wire nativetest_2.WireTime
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := nativetest_2.WireTimeToNative(wire, &x.B); err != nil {
				return err
			}
		case "C":
			var wire nativetest_2.WireSamePkg
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := nativetest_2.WireSamePkgToNative(wire, &x.C); err != nil {
				return err
			}
		case "D":
			var wire nativetest_2.WireMultiImport
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := nativetest_2.WireMultiImportToNative(wire, &x.D); err != nil {
				return err
			}
		default:
			if err := dec.SkipValue(); err != nil {
				return err
			}
		}
	}
}

var __VDLInitCalled bool

// __VDLInit performs vdl initialization.  It is safe to call multiple times.
// If you have an init ordering issue, just insert the following line verbatim
// into your source files in this package, right after the "package foo" clause:
//
//    var _ = __VDLInit()
//
// The purpose of this function is to ensure that vdl initialization occurs in
// the right order, and very early in the init sequence.  In particular, vdl
// registration and package variable initialization needs to occur before
// functions like vdl.TypeOf will work properly.
//
// This function returns a dummy value, so that it can be used to initialize the
// first var in the file, to take advantage of Go's defined init order.
func __VDLInit() struct{} {
	if __VDLInitCalled {
		return struct{}{}
	}
	__VDLInitCalled = true

	// Register types.
	vdl.Register((*All)(nil))

	return struct{}{}
}
