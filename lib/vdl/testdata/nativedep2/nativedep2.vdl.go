// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: nativedep2

package nativedep2

import (
	"time"
	"v.io/v23/vdl"
	"v.io/v23/vdl/vdlconv"
	_ "v.io/x/ref/lib/vdl/testdata/nativetest"
)

type MyTime time.Time

func (MyTime) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/lib/vdl/testdata/nativedep2.MyTime"`
}) {
}

func (m *MyTime) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if err := t.FromInt(int64((*m)), __VDLType_v_io_x_ref_lib_vdl_testdata_nativedep2_MyTime); err != nil {
		return err
	}
	return nil
}

func (m *MyTime) MakeVDLTarget() vdl.Target {
	return &MyTimeTarget{Value: m}
}

type MyTimeTarget struct {
	Value *MyTime
	vdl.TargetBase
}

func (t *MyTimeTarget) FromUint(src uint64, tt *vdl.Type) error {
	val, err := vdlconv.Uint64ToInt32(src)
	if err != nil {
		return err
	}
	*t.Value = MyTime(val)

	return nil
}
func (t *MyTimeTarget) FromInt(src int64, tt *vdl.Type) error {
	val, err := vdlconv.Int64ToInt32(src)
	if err != nil {
		return err
	}
	*t.Value = MyTime(val)

	return nil
}
func (t *MyTimeTarget) FromFloat(src float64, tt *vdl.Type) error {
	val, err := vdlconv.Float64ToInt32(src)
	if err != nil {
		return err
	}
	*t.Value = MyTime(val)

	return nil
}
func (t *MyTimeTarget) FromComplex(src complex128, tt *vdl.Type) error {
	val, err := vdlconv.Complex128ToInt32(src)
	if err != nil {
		return err
	}
	*t.Value = MyTime(val)

	return nil
}

func init() {
	vdl.Register((*MyTime)(nil))
}

var __VDLType_v_io_x_ref_lib_vdl_testdata_nativedep2_MyTime *vdl.Type = vdl.TypeOf(MyTime(0))

func __VDLEnsureNativeBuilt() {
}
