// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: serialization

package serialization

import (
	"fmt"
	"v.io/v23/security"
	"v.io/v23/vdl"
)

type SignedHeader struct {
	ChunkSizeBytes int64
}

func (SignedHeader) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/lib/security/serialization.SignedHeader"`
}) {
}

func (m *SignedHeader) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_x_ref_lib_security_serialization_SignedHeader == nil || __VDLType0 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("ChunkSizeBytes")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromInt(int64(m.ChunkSizeBytes), vdl.Int64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *SignedHeader) MakeVDLTarget() vdl.Target {
	return &SignedHeaderTarget{Value: m}
}

type SignedHeaderTarget struct {
	Value                *SignedHeader
	chunkSizeBytesTarget vdl.Int64Target
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *SignedHeaderTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_x_ref_lib_security_serialization_SignedHeader) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_x_ref_lib_security_serialization_SignedHeader)
	}
	return t, nil
}
func (t *SignedHeaderTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "ChunkSizeBytes":
		t.chunkSizeBytesTarget.Value = &t.Value.ChunkSizeBytes
		target, err := &t.chunkSizeBytesTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_x_ref_lib_security_serialization_SignedHeader)
	}
}
func (t *SignedHeaderTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *SignedHeaderTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type HashCode [32]byte

func (HashCode) __VDLReflect(struct {
	Name string `vdl:"v.io/x/ref/lib/security/serialization.HashCode"`
}) {
}

func (m *HashCode) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if err := t.FromBytes([]byte((*m)[:]), __VDLType_v_io_x_ref_lib_security_serialization_HashCode); err != nil {
		return err
	}
	return nil
}

func (m *HashCode) MakeVDLTarget() vdl.Target {
	return &HashCodeTarget{Value: m}
}

type HashCodeTarget struct {
	Value *HashCode
	vdl.TargetBase
}

func (t *HashCodeTarget) FromBytes(src []byte, tt *vdl.Type) error {

	if !vdl.Compatible(tt, __VDLType_v_io_x_ref_lib_security_serialization_HashCode) {
		return fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_x_ref_lib_security_serialization_HashCode)
	}
	copy((*t.Value)[:], src)

	return nil
}

type (
	// SignedData represents any single field of the SignedData union type.
	//
	// SignedData describes the information sent by a SigningWriter and read by VerifiyingReader.
	SignedData interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the SignedData union type.
		__VDLReflect(__SignedDataReflect)
		FillVDLTarget(vdl.Target, *vdl.Type) error
	}
	// SignedDataSignature represents field Signature of the SignedData union type.
	SignedDataSignature struct{ Value security.Signature }
	// SignedDataHash represents field Hash of the SignedData union type.
	SignedDataHash struct{ Value HashCode }
	// __SignedDataReflect describes the SignedData union type.
	__SignedDataReflect struct {
		Name  string `vdl:"v.io/x/ref/lib/security/serialization.SignedData"`
		Type  SignedData
		Union struct {
			Signature SignedDataSignature
			Hash      SignedDataHash
		}
	}
)

func (x SignedDataSignature) Index() int                       { return 0 }
func (x SignedDataSignature) Interface() interface{}           { return x.Value }
func (x SignedDataSignature) Name() string                     { return "Signature" }
func (x SignedDataSignature) __VDLReflect(__SignedDataReflect) {}

func (m SignedDataSignature) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_v_io_x_ref_lib_security_serialization_SignedData)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Signature")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_v_io_v23_security_Signature); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m SignedDataSignature) MakeVDLTarget() vdl.Target {
	return nil
}

func (x SignedDataHash) Index() int                       { return 1 }
func (x SignedDataHash) Interface() interface{}           { return x.Value }
func (x SignedDataHash) Name() string                     { return "Hash" }
func (x SignedDataHash) __VDLReflect(__SignedDataReflect) {}

func (m SignedDataHash) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_v_io_x_ref_lib_security_serialization_SignedData)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Hash")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_v_io_x_ref_lib_security_serialization_HashCode); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m SignedDataHash) MakeVDLTarget() vdl.Target {
	return nil
}

func init() {
	vdl.Register((*SignedHeader)(nil))
	vdl.Register((*HashCode)(nil))
	vdl.Register((*SignedData)(nil))
}

var __VDLType0 *vdl.Type = vdl.TypeOf((*SignedHeader)(nil))
var __VDLType_v_io_v23_security_Signature *vdl.Type = vdl.TypeOf(security.Signature{})
var __VDLType_v_io_x_ref_lib_security_serialization_HashCode *vdl.Type = vdl.TypeOf(HashCode{})
var __VDLType_v_io_x_ref_lib_security_serialization_SignedData *vdl.Type = vdl.TypeOf(SignedData(SignedDataSignature{security.Signature{}}))
var __VDLType_v_io_x_ref_lib_security_serialization_SignedHeader *vdl.Type = vdl.TypeOf(SignedHeader{})

func __VDLEnsureNativeBuilt() {
}
